<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DocumentFormat.OpenXml.Framework</name>
    </assembly>
    <members>
        <member name="T:DocumentFormat.OpenXml.AlternateContent">
            <summary>
            Represents the mc:AlternateContent element of markup
            compatibility.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.AlternateContent.#ctor">
            <summary>
            Initializes a new instance of the AlternateContent
            class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.AlternateContent.#ctor(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement})">
            <summary>
            Initializes a new instance of the AlternateContent
            class by using the supplied IEnumerable elements.
            </summary>
            <param name="childElements">
            Represents all child elements.
            </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.AlternateContent.#ctor(DocumentFormat.OpenXml.OpenXmlElement[])">
            <summary>
            Initializes a new instance of the AlternateContent
            class by using the supplied OpenXmlElement elements.
            </summary>
            <param name="childElements">
            Represents all child elements.
            </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.AlternateContent.#ctor(System.String)">
            <param name="outerXml">The outer XML of the element.
            </param>
            <summary>
            Initializes a new instance of the AlternateContent
            class by using the supplied string.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.AlternateContent.MarkupCompatibilityNamespace">
            <summary>
            Gets a value that represents the markup compatibility
            namespace.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.AlternateContent.TagName">
            <summary>
            Gets a value that represents the tag name of the
            AlternateContent element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.AlternateContent.LocalName">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.AlternateContent.AppendNewAlternateContentChoice">
            <summary>
            Appends a new child of type T:DocumentFormat.OpenXml.AlternateContentChoice
             to the current element.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.AlternateContent.AppendNewAlternateContentFallback">
            <summary>
            Appends a new child of type T:DocumentFormat.OpenXml.AlternateContentFallback
             to the current element.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.AlternateContent.CloneNode(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:DocumentFormat.OpenXml.AlternateContentChoice">
            <summary>
            Defines an mc:Choice element in mc:AlternateContent.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.AlternateContentChoice.#ctor">
            <summary>
            Initializes a new instance of the
            AlternateContentChoice class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.AlternateContentChoice.#ctor(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement})">
            <summary>
            Initializes a new instance of the
            AlternateContentChoice class by using the supplied
            IEnumerable elements.
            </summary>
            <param name="childElements">
            Represents all child elements.
            </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.AlternateContentChoice.#ctor(DocumentFormat.OpenXml.OpenXmlElement[])">
            <summary>
            Initializes a new instance of the
            AlternateContentChoice class by using the supplied
            OpenXmlElement elements.
            </summary>
            <param name="childElements">
            Represents all child elements.
            </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.AlternateContentChoice.#ctor(System.String)">
            <param name="outerXml">
            The outer XML of the element.
            </param>
            <summary>
            Initializes a new instance of the
            AlternateContentChoice class by using the supplied
            string.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.AlternateContentChoice.TagName">
            <summary>
            Gets a value that represents the tag name of the
            Choice element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.AlternateContentChoice.LocalName">
            <summary>
            Gets the local name of the Choice element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.AlternateContentChoice.Requires">
            <summary>
            Gets or sets a whitespace-delimited list of namespace prefixes that identify the
            namespaces a markup consumer needs in order to understand and select that
            Choice and process the content.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.AlternateContentChoice.CloneNode(System.Boolean)">
            <returns>The cloned node. </returns>
            <summary>
            When a node is overridden in a derived class, CloneNode creates a duplicate
             of the node.
            </summary>
            <param name="deep">
            True to recursively clone the subtree under the specified node; False
             to clone only the node itself.
            </param>
        </member>
        <member name="T:DocumentFormat.OpenXml.AlternateContentFallback">
            <summary>
            Defines a mc:Fallback element in mc:AlternateContent.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.AlternateContentFallback.#ctor">
            <summary>
            Initializes a new instance of the AlternateContentFallback class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.AlternateContentFallback.#ctor(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement})">
            <summary>
            Initializes a new instance of the AlternateContentFallback class
             by using the supplied IEnumerable elements.
            </summary>
            <param name="childElements">
            Represents all child elements.
            </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.AlternateContentFallback.#ctor(DocumentFormat.OpenXml.OpenXmlElement[])">
            <summary>
            Initializes a new instance of the AlternateContentFallback class
             by using the supplied OpenXmlElement elements.
            </summary>
            <param name="childElements">
            Represents all child elements.
            </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.AlternateContentFallback.#ctor(System.String)">
            <param name="outerXml">The outer XML of the element.</param>
            <summary>
            Initializes a new instance of the AlternateContentFallback class
             by using the supplied string.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.AlternateContentFallback.TagName">
            <summary>
            Gets a value that represents the tag name of the AlternateContentFallback element.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.AlternateContentFallback.CloneNode(System.Boolean)">
            <returns>The cloned node. </returns>
            <summary>
            When a node is overridden in a derived class, CloneNode creates a
             duplicate of the node.
            </summary>
            <param name="deep">
            True to recursively clone the subtree under the specified node; False
             to clone only the node itself.
            </param>
        </member>
        <member name="T:DocumentFormat.OpenXml.Builder.PackageDelegate`1">
            <summary>
            A delegate for initializing a package.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Builder.IPackageBuilder`1">
            <summary>
            Defines a builder to create an initialization pipeline for a <typeparamref name="TPackage"/>.
            </summary>
            <typeparam name="TPackage">Type of the <see cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackage"/>.</typeparam>
        </member>
        <member name="P:DocumentFormat.OpenXml.Builder.IPackageBuilder`1.Properties">
            <summary>
            Gets a key/value collection that can be used to share data between middleware.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Builder.IPackageBuilder`1.Use(System.Func{DocumentFormat.OpenXml.Builder.PackageDelegate{`0},DocumentFormat.OpenXml.Builder.PackageDelegate{`0}})">
            <summary>
            Add middleware to the package builder.
            </summary>
            <param name="configure">The middleware to add.</param>
            <returns>The <see cref="T:DocumentFormat.OpenXml.Builder.IPackageBuilder`1"/>.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Builder.IPackageBuilder`1.Clone">
            <summary>
            Create a copy of the builder that will be independent of the original, but retains the existing middleware and properties.
            </summary>
            <returns>A new <see cref="T:DocumentFormat.OpenXml.Builder.IPackageBuilder`1"/>.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Builder.IPackageBuilder`1.Build">
            <summary>
            Builds the pipeline to initialize the package. Additional calls to this will return the cached pipeline unless
            more middleware has been added.
            </summary>
            <returns>The a <see cref="T:DocumentFormat.OpenXml.Builder.IPackageFactory`1"/> with the registered middleware.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Builder.IPackageFactory`1">
            <summary>
            Defines a factory to create a <typeparamref name="TPackage"/>.
            </summary>
            <typeparam name="TPackage">Type of the <see cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackage"/>.</typeparam>
        </member>
        <member name="M:DocumentFormat.OpenXml.Builder.IPackageFactory`1.Create(DocumentFormat.OpenXml.Features.IPackageInitializer)">
            <summary>
            Create an instance of <typeparamref name="TPackage"/>.
            </summary>
            <param name="initializer">Initializer for the package.</param>
            <returns>The created package.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Builder.OpenXmlPackageBuilderExtensions">
            <summary>
            A collection of extension methods for opening packages
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Builder.OpenXmlPackageBuilderExtensions.Open``1(DocumentFormat.OpenXml.Builder.IPackageFactory{``0},System.IO.Stream,DocumentFormat.OpenXml.Builder.PackageOpenMode)">
            <summary>
            Opens the <paramref name="stream"/> with the given <paramref name="mode"/>.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Builder.OpenXmlPackageBuilderExtensions.Open``1(DocumentFormat.OpenXml.Builder.IPackageFactory{``0},System.String,DocumentFormat.OpenXml.Builder.PackageOpenMode)">
            <summary>
            Opens the <paramref name="file"/> with the given <paramref name="mode"/>.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Builder.OpenXmlPackageBuilderExtensions.Open``1(DocumentFormat.OpenXml.Builder.IPackageFactory{``0},System.IO.Packaging.Package)">
            <summary>
            Opens the <paramref name="package"/>.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Builder.OpenXmlPackageBuilderExtensions.Use``1(DocumentFormat.OpenXml.Builder.IPackageBuilder{``0},System.Action{``0,DocumentFormat.OpenXml.Builder.PackageDelegate{``0}})">
            <summary>
            Adds the <paramref name="middleware"/> to the builder for initializing a package.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Builder.PackageOpenMode">
            <summary>
            An enum that describes how a package is going to be opened
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Builder.PackageOpenMode.Create">
            <summary>
            Indicates that a new package will be created.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Builder.PackageOpenMode.Read">
            <summary>
            Indicates that a package will be opened in read mode.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Builder.PackageOpenMode.ReadWrite">
            <summary>
            Indicates that a package will be opened in read/write mode.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Builder.SchemaTrackingExtensions">
            <summary>
            A collection of extension methods to track schema usage
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Builder.SchemaTrackingExtensions.UseSchemaTracker``1(DocumentFormat.OpenXml.Builder.IPackageBuilder{``0})">
            <summary>
            This method enables tracking ability to see what parts and roots are created. In order to better support AOT scenarios,
            an empty package with no knowledge of any parts would be constructed and required parts would be added via additional builders.
            The debug information gathered with this may be helpful in identifying which parts are required to open packages.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Builder.SchemaTrackingExtensions.GetSchemaTracker``1(DocumentFormat.OpenXml.Builder.IPackageBuilder{``0})">
            <summary>
            Gets the shared <see cref="T:DocumentFormat.OpenXml.Features.ISchemaTrackingFeature"/> for the builder, or creates a new one if it is not available.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Builder.TemplateBuilderExtensions">
            <summary>
            A collection of extensions to add a template as part of the <see cref="T:DocumentFormat.OpenXml.Builder.IPackageBuilder`1"/>.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.ElementEventArgs">
            <summary>
            Represents arguments for element events.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.ElementEventArgs.#ctor(DocumentFormat.OpenXml.OpenXmlElement,DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Initializes a new instance of the ElementEventArgs class using the
             supplied elements.
            </summary>
            <param name="element">
            The element that caused the event.
            </param>
            <param name="parentElement">
            The parent element of the element that caused the event.
            </param>
        </member>
        <member name="P:DocumentFormat.OpenXml.ElementEventArgs.Element">
            <summary>
            Gets the element that caused the event.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ElementEventArgs.ParentElement">
            <summary>
            Gets the parent element of the element that caused the event.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlElementComparers">
            <summary>
            Equality comparer for determining value equality for <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/>.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElementComparers.Default">
            <summary>
            Gets the default equality comparer.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElementComparers.Create(DocumentFormat.OpenXml.OpenXmlElementEqualityOptions)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> based on the given options./>
            </summary>
            <param name="openXmlElementEqualityOptions">The options defining equality.</param>
            <returns></returns>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElementEqualityComparer.Options">
            <summary>
            Gets the options regulating how equality is defined.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElementEqualityComparer.Equals(DocumentFormat.OpenXml.OpenXmlElement,DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Determines equality for two given <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/>.
            </summary>
            <param name="x">First object.</param>
            <param name="y">Second object.</param>
            <returns></returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElementEqualityComparer.CheckAndEquateSpecialOptions(DocumentFormat.OpenXml.OpenXmlElement,DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Handles checking of all options that changes the behavior of equality based on options in <see cref="T:DocumentFormat.OpenXml.OpenXmlElementEqualityOptions"/>.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElementEqualityComparer.GetHashCode(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Calculates a hashcode based on the given <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/> object.
            </summary>
            <param name="obj">The object to get a hashcode for.</param>
            <returns></returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlElementEqualityOptions">
            <summary>
            Options defining the behavior of equality for <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/>.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElementEqualityOptions.IncludeExtendedAttributes">
            <summary>
            Gets or sets a value indicating whether extended attributes should be considered when determining equality.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElementEqualityOptions.IncludeMCAttributes">
            <summary>
            Gets or sets a value indicating whether mC attributes should be considered when determining equality.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElementEqualityOptions.SkipPrefixComparison">
            <summary>
            Gets or sets a value indicating whether namespace should alone be used when comparing identity of elements, skipping prefix lookup to improve performance.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElementEqualityOptions.RequireParsed">
            <summary>
            Gets or sets a value indicating whether elements must be parsed which ensures order of schema is used instead of input ordering.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.AnnotationsFeature.AddAnnotation(System.Object)">
            <summary>
            Adds an object to the annotation list of this collection.
            </summary>
            <param name="annotation">The annotation to add to this collection.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.AnnotationsFeature.Annotation(System.Type)">
            <summary>
            Get the first annotation object of the specified type from the current OpenXmlElement element.
            </summary>
            <param name="type">The type of the annotation to retrieve.</param>
            <returns>The first annotation object with the specified type.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.DisposableFeatureExtensions">
            <summary>
            Extensions for using <see cref="T:DocumentFormat.OpenXml.Features.IDisposableFeature"/>
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.DisposableFeatureExtensions.Register(DocumentFormat.OpenXml.Features.IDisposableFeature,System.IDisposable)">
            <summary>
            Register a disposable for dispose.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.EventType">
            <summary>
            Type of event used for change notification.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Features.EventType.None">
            <summary>
            The default type when there is no event.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Features.EventType.Closed">
            <summary>
            When the item is closed.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Features.EventType.Closing">
            <summary>
            When the item is closing.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Features.EventType.Deleting">
            <summary>
            When the item is deleting.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Features.EventType.Deleted">
            <summary>
            When the item is deleted.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Features.EventType.Creating">
            <summary>
            When the item is being created.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Features.EventType.Created">
            <summary>
            When the item is created.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Features.EventType.Removing">
            <summary>
            When the item is being removed.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Features.EventType.Removed">
            <summary>
            When the item is removed.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Features.EventType.Reloading">
            <summary>
            When the item is reloading.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Features.EventType.Reloaded">
            <summary>
            When the item is reloaded.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Features.EventType.Saved">
            <summary>
            When the item is being saved.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Features.EventType.Saving">
            <summary>
            When the item is saved.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Features.EventType.Adding">
            <summary>
            When the item is being added.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Features.EventType.Added">
            <summary>
            When the item is added.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.FeatureCollection">
            <summary>
            Represents a collection of features.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.FeatureCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:DocumentFormat.OpenXml.Features.FeatureCollection"/>.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.FeatureCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:DocumentFormat.OpenXml.Features.FeatureCollection"/> with the specified initial capacity.
            </summary>
            <param name="initialCapacity">The initial number of elements that the collection can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="initialCapacity"/> is less than 0</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.FeatureCollection.#ctor(DocumentFormat.OpenXml.Features.IFeatureCollection,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:DocumentFormat.OpenXml.Features.FeatureCollection"/> with the specified defaults.
            </summary>
            <param name="defaults">The feature defaults.</param>
            <param name="isReadOnly">Marks the collection as readonly or not.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.Features.FeatureCollection.Revision">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.Features.FeatureCollection.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.FeatureCollection.Get``1">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.FeatureCollection.Set``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.FeatureCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.Features.FeatureCollection.Item(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.FeatureEventArgs`1">
            <summary>
            Holder for feature event args.
            </summary>
            <typeparam name="TArg">The type of the argument.</typeparam>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.FeatureEventArgs`1.#ctor(DocumentFormat.OpenXml.Features.EventType,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.Features.FeatureEventArgs`1"/> struct.
            </summary>
            <param name="type">Type of change.</param>
            <param name="arg">Argument of change.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.Features.FeatureEventArgs`1.Type">
            <summary>
            Gets the event type.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Features.FeatureEventArgs`1.Argument">
            <summary>
            Gets the argument.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.FeatureEventArgs`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.FeatureEventArgs`1.Equals(DocumentFormat.OpenXml.Features.FeatureEventArgs{`0})">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.FeatureEventArgs`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.FeatureExtensions">
            <summary>
            Methods to help with using <see cref="T:DocumentFormat.OpenXml.Features.IFeatureCollection"/>.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.FeatureExtensions.GetRequired``1(DocumentFormat.OpenXml.Features.IFeatureCollection)">
            <summary>
            Gets a required feature from the supplied collection.
            </summary>
            <typeparam name="TFeature">Feature type.</typeparam>
            <param name="features">Features collection to search.</param>
            <returns>The available feature.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.IDisposableFeature">
            <summary>
            Feature to track items to dispose when the containing package or part is closed.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.IDisposableFeature.Register(System.Action)">
            <summary>
            Register an action to be called on package or part close.
            </summary>
            <param name="disposable">Disposable to be called when a package or part is closed.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.IDocumentTypeFeature`1">
            <summary>
            Feature interface that defines the type of a document and allows for changing it.
            </summary>
            <typeparam name="TDocumentType">Type that represents the document type.</typeparam>
        </member>
        <member name="P:DocumentFormat.OpenXml.Features.IDocumentTypeFeature`1.Current">
            <summary>
            Gets or sets the type of the document.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.IDocumentTypeFeature`1.GetContentType(`0)">
            <summary>
            Gets the content type for a given document type.
            </summary>
            <param name="type">Document type.</param>
            <returns>The content type if known, otherwise <c>null</c></returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.IDocumentTypeFeature`1.GetDocumentType(System.String)">
            <summary>
            Gets the document type for a given content type.
            </summary>
            <param name="contentPart">The content type.</param>
            <returns>The document type if known, otherwise <c>null</c></returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.IDocumentTypeFeature`1.ChangeDocumentType(`0)">
            <summary>
            Provides logic to change one type to another. Will likely affect <see cref="P:DocumentFormat.OpenXml.Features.IDocumentTypeFeature`1.Current"/>.
            </summary>
            <param name="newType">Type to change the document to.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.IFeatureCollection">
            <summary>
            Represents a collection of features.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Features.IFeatureCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection can be modified.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Features.IFeatureCollection.Revision">
            <summary>
            Gets a value that is incremented for each modification and can be used to verify cached results.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Features.IFeatureCollection.Item(System.Type)">
            <summary>
            Gets or sets a given feature. Setting a null value removes the feature.
            </summary>
            <param name="key"></param>
            <returns>The requested feature, or null if it is not present.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.IFeatureCollection.Get``1">
            <summary>
            Retrieves the requested feature from the collection.
            </summary>
            <typeparam name="TFeature">The feature key.</typeparam>
            <returns>The requested feature, or null if it is not present.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.IFeatureCollection.Set``1(``0)">
            <summary>
            Sets the given feature in the collection.
            </summary>
            <typeparam name="TFeature">The feature key.</typeparam>
            <param name="instance">The feature value.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.IFeatureEvent`1">
            <summary>
            Interface for general feature eventing.
            </summary>
            <typeparam name="TArg">Type of the argument.</typeparam>
        </member>
        <member name="E:DocumentFormat.OpenXml.Features.IFeatureEvent`1.Change">
            <summary>
            Event to register to listen to any changes.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.IOpenXmlNamespaceResolver.TryGetTransitionalNamespace(DocumentFormat.OpenXml.Framework.OpenXmlNamespace,DocumentFormat.OpenXml.Framework.OpenXmlNamespace@)">
            <summary>
            Attempts to get the Transitional equivalent namespace.
            </summary>
            <param name="ns">Namespace to compare.</param>
            <param name="transitionalNamespace">An equivalent namespace in Transitional.</param>
            <returns>Returns true when a Transitional equivalent namespace is found, returns false when it is not found.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.IOpenXmlNamespaceResolver.TryGetTransitionalRelationship(DocumentFormat.OpenXml.Framework.OpenXmlNamespace,DocumentFormat.OpenXml.Framework.OpenXmlNamespace@)">
            <summary>
            Attempts to get the Transitional equivalent relationship.
            </summary>
            <param name="ns">Namespace to compare.</param>
            <param name="transitionalRelationship">An equivalent relationship in Transitional.</param>
            <returns>Returns true when a Transitional equivalent relationship is found, returns false when it is not.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.IOpenXmlNamespaceResolver.TryGetExtendedNamespace(DocumentFormat.OpenXml.Framework.OpenXmlNamespace,DocumentFormat.OpenXml.Framework.OpenXmlNamespace@)">
            <summary>
            Try to get the expected namespace if the passed namespace is an obsolete.
            </summary>
            <param name="ns">Namespace to compare.</param>
            <param name="extNamespaceUri">The expected namespace when the passed namespace is an obsolete.</param>
            <returns>True when the passed namespace is an obsolete and the expected namespace found</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.IPackageEventsFeature">
            <summary>
            A feature to track events around the package.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.IPackageFeature">
            <summary>
            A feature to access the backing <see cref="T:DocumentFormat.OpenXml.Packaging.IPackage"/> data.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Features.IPackageFeature.Package">
            <summary>
            Gets the <see cref="T:DocumentFormat.OpenXml.Packaging.IPackage"/>.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Features.IPackageFeature.Capabilities">
            <summary>
            Gets the capabilities of the package.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.IPackageFeature.Reload(System.Nullable{System.IO.FileMode},System.Nullable{System.IO.FileAccess})">
            <summary>
            Reloads the package.
            </summary>
            <param name="mode">File mode to use with reloaded package. If absent, will use original mode.</param>
            <param name="access">File access to use with the reloaded package. If absent, will use original access.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.IPackageInitializer">
            <summary>
            An initializer for a package.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.IPackageInitializer.Initialize(DocumentFormat.OpenXml.Packaging.OpenXmlPackage)">
            <summary>
            Initializes a package.
            </summary>
            <param name="package">Package to initialize.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.IPackagePartFeature">
            <summary>
            A feature to access the current package part.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Features.IPackagePartFeature.Part">
            <summary>
            Gets the current package part.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.IPartEventsFeature">
            <summary>
            A feature to track events around parts.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.IPartExtensionFeature">
            <summary>
            A feature that defines what extensions are used for a given part content type
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.IPartExtensionFeature.Register(System.String,System.String)">
            <summary>
            Registers a extension to be used for a content type.
            </summary>
            <param name="contentType">Conent type to register extension for.</param>
            <param name="extension">Extension to register.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.IPartExtensionFeature.TryGetExtension(System.String,System.String@)">
            <summary>
            Attempts to retrieve a registered extension for the content type.
            </summary>
            <param name="contentType">Content type to find extension for.</param>
            <param name="extension">Registered extension.</param>
            <returns>Whether an extension was found.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.IPartRelationshipsFeature.Add(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.String)">
            <summary>
            Adds a part to the relationship collection. If an <paramref name="id"/> is provided, it will be used, otherwise a random id will be generated.
            </summary>
            <param name="part">Part to add to relationship collection.</param>
            <param name="id">Id of part if supplied.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.IPartRootEventsFeature">
            <summary>
            A feature to track events around parts.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.IRaiseFeatureEvent`1">
            <summary>
            Interface to raise events for <see cref="T:DocumentFormat.OpenXml.Features.IFeatureEvent`1"/>.
            </summary>
            <typeparam name="TArg">Type of argument.</typeparam>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.IRaiseFeatureEvent`1.OnChange(DocumentFormat.OpenXml.Features.EventType,`0)">
            <summary>
            Raise event on underlying event.
            </summary>
            <param name="type">Type of event.</param>
            <param name="arg">Argument of event.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.ISchemaTrackingFeature">
            <summary>
            Feature to describe the schema elements that have been used.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Features.ISchemaTrackingFeature.RootElements">
            <summary>
            Gets a collection of root elements that have been requested.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Features.ISchemaTrackingFeature.Relationships">
            <summary>
            Gets a collection of relationships that have been requested.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.OpenXmlNamespaceResolver.TryGetTransitionalNamespace(DocumentFormat.OpenXml.Framework.OpenXmlNamespace,DocumentFormat.OpenXml.Framework.OpenXmlNamespace@)">
            <inheritdoc />
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.OpenXmlNamespaceResolver.TryGetTransitionalRelationship(DocumentFormat.OpenXml.Framework.OpenXmlNamespace,DocumentFormat.OpenXml.Framework.OpenXmlNamespace@)">
            <inheritdoc />
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.OpenXmlNamespaceResolver.TryGetExtendedNamespace(DocumentFormat.OpenXml.Framework.OpenXmlNamespace,DocumentFormat.OpenXml.Framework.OpenXmlNamespace@)">
            <inheritdoc />
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.OpenXmlNamespaceResolver.GetVersion(DocumentFormat.OpenXml.Framework.OpenXmlNamespace)">
            <inheritdoc />
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.PackageCapabilities">
            <summary>
            Values to query the capabilities of a package.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Features.PackageCapabilities.None">
            <summary>
            No capabilities
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Features.PackageCapabilities.Save">
            <summary>
            Capability that indicates that the package can be saved.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Features.PackageCapabilities.Reload">
            <summary>
            Capability that indicates that the package can be reloaded.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Features.PackageCapabilities.Cached">
            <summary>
            Capability that indicates that the package will return the same part and relationship for each call.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Features.PackageCapabilities.LargePartStreams">
            <summary>
            Capability that indicates that the package can handle writing large part streams without memory overhead.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Features.PackageCapabilities.MalformedUri">
            <summary>
            Capability that indicates that the package can handle malformed uri
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.PackageEventExtensions">
            <summary>
            Extensions to add events around lifecycle.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.PackageEventExtensions.AddPackageEventsFeature(DocumentFormat.OpenXml.Packaging.OpenXmlPackage)">
            <summary>
            Adds a feature to track eventing for a package lifecycle events.
            </summary>
            <param name="package">Package to add the feature to.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.PartEventFeatureExtensions">
            <summary>
            Extensions to add events around parts.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.PartEventFeatureExtensions.AddPartEventsFeature(DocumentFormat.OpenXml.Packaging.OpenXmlPackage)">
            <summary>
            Adds a feature to track eventing for a package creating or removing parts.
            </summary>
            <param name="package">Package to add the feature to.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.PartRootEventExtensions">
            <summary>
            Extensions to add events around part roots.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.PartRootEventExtensions.AddPartRootEventsFeature(DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer)">
            <summary>
            Adds a feature to track eventing for package life cycle events.
            </summary>
            <param name="container">Container to add the feature to.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.IFixedContentTypePart">
            <summary>
            Called from constructors of derived parts to initialize the IFixedContentTypePart interface. All derived parts must be parts that have fixed content type.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.AudioReferenceRelationship">
            <summary>
            Represents an internal audio reference relationship to a MediaDataPart element.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.AudioReferenceRelationship.RelationshipTypeConst">
            <summary>
            Represents the fixed value of the RelationshipType.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.AudioReferenceRelationship.AudioReferenceRelationshipType">
            <summary>
            Gets the source relationship type for an audio reference.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.AudioReferenceRelationship.#ctor(DocumentFormat.OpenXml.Packaging.MediaDataPart,System.String)">
            <summary>
            Initializes a new instance of the AudioReferenceRelationship using the supplied
            MediaDataPart and relationship ID.
            </summary>
            <param name="mediaDataPart">The target DataPart of the reference relationship.</param>
            <param name="id">The relationship ID.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.AudioReferenceRelationship.RelationshipType">
            <summary>
            Gets the relationship type for an audio reference.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.Builder.PackageRelationshipBuilder">
            <summary>
            A mutable instance of a package relationship used while building the final relationship
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.Builder.PackageRelationshipBuilder.Id">
            <summary>
            Gets or sets the id of the relationship.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.Builder.PackageRelationshipBuilder.RelationshipType">
            <summary>
            Gets or sets the relationship type.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.Builder.PackageRelationshipBuilder.SourceUri">
            <summary>
            Gets or sets the source URI.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.Builder.PackageRelationshipBuilder.TargetMode">
            <summary>
            Gets or sets the target mode.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.Builder.PackageRelationshipBuilder.TargetUri">
            <summary>
            Gets or sets the target uri.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.CloneableExtensions">
            <summary>
            Extensions to enable package cloning.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.CloneableExtensions.Clone``1(``0)">
            <summary>
            Creates an editable clone of this OpenXml package, opened on a
            <see cref="T:System.IO.MemoryStream"/> with expandable capacity and using
            default OpenSettings.
            </summary>
            <returns>The cloned OpenXml package.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.CloneableExtensions.Clone``1(``0,System.IO.Stream)">
            <summary>
            Creates a clone of this OpenXml package, opened on the given stream.
            The cloned OpenXml package is opened with the same settings, i.e.,
            FileOpenAccess and OpenSettings, as this OpenXml package.
            </summary>
            <param name="openXmlPackage"></param>
            <param name="stream">The IO stream on which to open the OpenXml package.</param>
            <returns>The cloned OpenXml package.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.CloneableExtensions.Clone``1(``0,System.IO.Stream,System.Boolean)">
            <summary>
            Creates a clone of this OpenXml package, opened on the given stream.
            The cloned OpenXml package is opened with the same OpenSettings as
            this OpenXml package.
            </summary>
            <param name="openXmlPackage"></param>
            <param name="stream">The IO stream on which to open the OpenXml package.</param>
            <param name="isEditable">In ReadWrite mode. False for Read only mode.</param>
            <returns>The cloned OpenXml package.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.CloneableExtensions.Clone``1(``0,System.IO.Stream,System.Boolean,DocumentFormat.OpenXml.Packaging.OpenSettings)">
            <summary>
            Creates a clone of this OpenXml package, opened on the given stream.
            </summary>
            <param name="openXmlPackage"></param>
            <param name="stream">The IO stream on which to open the OpenXml package.</param>
            <param name="isEditable">In ReadWrite mode. False for Read only mode.</param>
            <param name="openSettings">The advanced settings for opening a document.</param>
            <returns>The cloned OpenXml package.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.CloneableExtensions.Clone``1(``0,System.String)">
            <summary>
            Creates a clone of this OpenXml package opened from the given file
            (which will be created by cloning this OpenXml package).
            The cloned OpenXml package is opened with the same settings, i.e.,
            FileOpenAccess and OpenSettings, as this OpenXml package.
            </summary>
            <param name="openXmlPackage"></param>
            <param name="path">The path and file name of the target document.</param>
            <returns>The cloned document.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.CloneableExtensions.Clone``1(``0,System.String,System.Boolean)">
            <summary>
            Creates a clone of this OpenXml package opened from the given file
            (which will be created by cloning this OpenXml package).
            The cloned OpenXml package is opened with the same OpenSettings as
            this OpenXml package.
            </summary>
            <param name="openXmlPackage"></param>
            <param name="path">The path and file name of the target document.</param>
            <param name="isEditable">In ReadWrite mode. False for Read only mode.</param>
            <returns>The cloned document.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.CloneableExtensions.Clone``1(``0,System.String,System.Boolean,DocumentFormat.OpenXml.Packaging.OpenSettings)">
            <summary>
            Creates a clone of this OpenXml package opened from the given file (which
            will be created by cloning this OpenXml package).
            </summary>
            <param name="openXmlPackage"></param>
            <param name="path">The path and file name of the target document.</param>
            <param name="isEditable">In ReadWrite mode. False for Read only mode.</param>
            <param name="openSettings">The advanced settings for opening a document.</param>
            <returns>The cloned document.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.CloneableExtensions.Clone``1(``0,System.IO.Packaging.Package)">
            <summary>
            Creates a clone of this OpenXml package, opened on the specified instance
            of Package. The clone will be opened with the same OpenSettings as this
            OpenXml package.
            </summary>
            <param name="openXmlPackage"></param>
            <param name="package">The specified instance of Package.</param>
            <returns>The cloned OpenXml package.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.CloneableExtensions.Clone``1(``0,System.IO.Packaging.Package,DocumentFormat.OpenXml.Packaging.OpenSettings)">
            <summary>
            Creates a clone of this OpenXml package, opened on the specified instance
            of Package.
            </summary>
            <param name="openXmlPackage"></param>
            <param name="package">The specified instance of Package.</param>
            <param name="openSettings">The advanced settings for opening a document.</param>
            <returns>The cloned OpenXml package.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.CompatibilityLevel">
            <summary>
            An enum that describes the version to keep compatibility with.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.CompatibilityLevel.Default">
            <summary>
            Use all the latest version behavior.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.CompatibilityLevel.Version_2_20">
            <summary>
            Maintain compatibility with v2.20 if possible
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.CompatibilityLevel.Version_3_0">
            <summary>
            Maintain compatibility with v3.0 if possible
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.DataPart">
            <summary>
            Represents the type of part referenced by a <see cref="T:DocumentFormat.OpenXml.Packaging.DataPartReferenceRelationship"/>.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.DataPart.OpenXmlPackage">
            <summary>
            Gets the OpenXmlPackage which contains the current part.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.DataPart.Uri">
            <summary>
            Gets the internal part path in the package.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.DataPart.GetDataPartReferenceRelationships">
            <summary>
            Enumerates all <see cref="T:DocumentFormat.OpenXml.Packaging.DataPartReferenceRelationship" />s that reference the current data part.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.DataPart.GetStream">
            <summary>
            Returns the content data stream of the current part.
            </summary>
            <returns>The content data stream of the current part. </returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.DataPart.GetStream(System.IO.FileMode)">
            <summary>
            Returns the content stream that was opened using a specified I/O FileMode.
            </summary>
            <param name="mode">The I/O mode to be used to open the content stream.</param>
            <returns>The content stream of the part. </returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.DataPart.GetStream(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Returns the content stream of the part that was opened by using a specified FileMode and FileAccess.
            </summary>
            <param name="mode">The I/O mode to be used to open the content stream.</param>
            <param name="access">The access permissions to be used to open the content stream.</param>
            <returns>The content stream of the part. </returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.DataPart.FeedData(System.IO.Stream)">
            <summary>
            Feeds data into the part stream.
            The stream of the part will be truncated at first.
            </summary>
            <param name="sourceStream">The source stream to be read from.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="sourceStream"/> is a null reference.</exception>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.DataPart.ContentType">
            <summary>
            Gets the content type (MIME type) of the data in the part.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.DataPart.PackagePart">
            <summary>
            Gets the internal metro PackagePart.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.DataPart.TargetPath">
            <summary>
            Gets the internal path to be used for the part name.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.DataPart.TargetName">
            <summary>
            Gets the file base name to be used for the part name in the package.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.DataPart.TargetFileExtension">
            <summary>
            Gets the file extension to be used for the part in the package.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.DataPart.ThrowIfObjectDisposed">
            <summary>
            Indicates whether the object is destroyed (deleted from the package).
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.DataPartReferenceRelationship">
            <summary>
            Represents an internal reference relationship to a DataPart element.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.DataPartReferenceRelationship.#ctor(DocumentFormat.OpenXml.Packaging.DataPart,System.String,System.String)">
            <summary>
            Initializes a new instance of the DataPartReferenceRelationship class using the supplied
            DataPart, relationship type, and relationship ID.
            </summary>
            <param name="dataPart">The target DataPart of the reference relationship.</param>
            <param name="relationshipType">The relationship type of the reference relationship.</param>
            <param name="id">The relationship ID.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.DataPartReferenceRelationship.DataPart">
            <summary>
            Gets the referenced target DataPart.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.DataPartReferenceRelationship.#ctor(DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer,DocumentFormat.OpenXml.Packaging.DataPart,System.String,System.String)">
            <summary>
            Initializes the current instance of the DataPartRelationship class.
            </summary>
            <param name="containter">The owner <see cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer"/> that holds the <see cref="T:DocumentFormat.OpenXml.Packaging.ReferenceRelationship"/>.</param>
            <param name="dataPart">The target DataPart of the reference relationship.</param>
            <param name="relationshipType">The relationship type of the reference relationship.</param>
            <param name="id">The relationship ID.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.DataPartReferenceRelationship.Create(DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer,DocumentFormat.OpenXml.Packaging.DataPart,System.String,System.String)">
            <summary>
            Creates a new instance of the DataPartRelationship class based on the relationship type.
            </summary>
            <param name="container">The owner <see cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer"/> that holds the <see cref="T:DocumentFormat.OpenXml.Packaging.ReferenceRelationship"/>.</param>
            <param name="dataPart">The target DataPart of the reference relationship.</param>
            <param name="relationshipType">The relationship type of the reference relationship.</param>
            <param name="id">The relationship ID.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.ExtendedPart">
            <summary>
            Defines a class for all extended parts (Application specific part).
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.ExtendedPart.#ctor(System.String)">
            <summary>
            Initialize a new instance of ExtendedPart.
            </summary>
            <param name="relationshipType"></param>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.ExtendedPart.RelationshipType">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.ExtendedPart.IsInVersion(DocumentFormat.OpenXml.FileFormatVersions)">
            <summary>
            Whether this part is available in a specific version of Office Application.
            </summary>
            <param name="version">The Office file format version.</param>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.ExtendedPart.AddPartFrom(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.String)">
            <summary>
            Adds a new part.
            </summary>
            <param name="subPart">The part to be added.</param>
            <param name="rId">A unique relationship identifier. null to create new id.</param>
            <returns>The added part. May diff with the passed in part.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when "subPart" is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the part is no allowed to be added.</exception>
            <exception cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackageException">Thrown when one instance of same type part already exists and multiple instance of that type is not allowed.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.ExtendedPart.InitPart(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.String,System.String)">
            <summary>
            Initialize a new created part
            </summary>
            <param name="newPart">The part to be initialized.</param>
            <param name="contentType">The content type of the part.</param>
            <param name="id">The relationship id.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.ExtendedPart.Features">
            <inheritdoc/>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.ExternalRelationship">
            <summary>
            Represents an external relationship.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.ExternalRelationship.#ctor(System.Uri,System.String,System.String)">
            <summary>
            Initializes a new instance of the ExternalRelationship.
            </summary>
            <param name="externalUri">The target uri of the relationship.</param>
            <param name="relationshipType">The relationship type.</param>
            <param name="id">The relationship ID.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.FlatOpcExtensions">
            <summary>
            Extensions to convert to and from FlatOpc
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.FlatOpcExtensions.ToFlatOpcString(DocumentFormat.OpenXml.Packaging.OpenXmlPackage)">
            <summary>
            Converts an OpenXml package in OPC format to string in Flat OPC format.
            </summary>
            <returns>The OpenXml package in Flat OPC format.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.FlatOpcExtensions.ToFlatOpcDocument(DocumentFormat.OpenXml.Packaging.OpenXmlPackage)">
            <summary>
            Converts an OpenXml package in OPC format to an <see cref="T:System.Xml.Linq.XDocument"/>
            in Flat OPC format.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.FlatOpcExtensions.GetContentsAsXml(DocumentFormat.OpenXml.Packaging.IPackagePart,System.Collections.Generic.HashSet{System.Uri})">
            <summary>
            Gets the <see cref="T:System.IO.Packaging.PackagePart"/>'s XML or binary contents as an <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="part">The package part.</param>
            <param name="altChunkPartUris">The collection of AlternativeFormatInputPart URIs.</param>
            <returns>The corresponding <see cref="T:System.Xml.Linq.XElement"/>.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.HyperlinkRelationship">
            <summary>
            Represents a hyperlink relationship.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.HyperlinkRelationship.RelationshipTypeConst">
            <summary>
            The source relationship type for hyperlink. Defined as "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink".
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.HyperlinkRelationship.#ctor(System.Uri,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the HyperlinkRelationship.
            </summary>
            <param name="hyperlinkUri">The target uri of the hyperlink relationship.</param>
            <param name="id">The relationship ID.</param>
            <param name="isExternal">Is the URI external.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.HyperlinkRelationship.RelationshipType">
            <summary>
            Gets the relationship type.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.IdPartPair">
            <summary>
            Represents a (RelationshipId, OpenXmlPart) pair.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.IdPartPair.#ctor(System.String,DocumentFormat.OpenXml.Packaging.OpenXmlPart)">
            <summary>
            Initializes a new instance of the IdPartPair with the specified id and part.
            </summary>
            <param name="id">The relationship ID.</param>
            <param name="part">The OpenXmlPart.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IdPartPair.RelationshipId">
            <summary>
            Gets the relationship ID in the pair.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IdPartPair.OpenXmlPart">
            <summary>
            Gets the OpenXmlPart in the pair.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.IdPartPair.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.IdPartPair.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.IdPartPair.Equals(DocumentFormat.OpenXml.Packaging.IdPartPair)">
            <inheritdoc/>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.IPackage">
            <summary>
            An abstraction similar to <see cref="T:System.IO.Packaging.Package"/> that allows for pass through implementations
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackage.FileOpenAccess">
            <summary>
            Gets the file access of the package
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackage.PackageProperties">
            <summary>
            Gets the core properties of the package
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.IPackage.GetParts">
            <summary>
            Returns a collection of parts for the package
            </summary>
            <returns>A collection of parts.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.IPackage.GetPart(System.Uri)">
            <summary>
            Gets a part for the given <paramref name="uriTarget"/>.
            </summary>
            <param name="uriTarget">Uri of target</param>
            <returns>Part for given uri.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.IPackage.PartExists(System.Uri)">
            <summary>
            Indicates whether a part with a given URI is in the package
            </summary>
            <param name="partUri">The uri of the part.</param>
            <returns>true if a part with the specified <paramref name="partUri"/> exists in the package; otherwise, false.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.IPackage.Save">
            <summary>
            Saves the package
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.IPackage.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)">
            <summary>
            Creates a new part with a given URI, content type, and compression option.
            </summary>
            <param name="partUri">The URI of the new part.</param>
            <param name="contentType">The content type of the data stream.</param>
            <param name="compressionOption">The compression option for the data stream.</param>
            <returns>The new created part.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.IPackage.DeletePart(System.Uri)">
            <summary>
            Deletes a part with a given URI from the package.
            </summary>
            <param name="uri">The URI of the part to delete.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackage.Relationships">
            <summary>
            Gets the relationships of the package.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.IPackagePart">
            <summary>
            An abstraction for <see cref="T:System.IO.Packaging.PackagePart"/> that is easier to override.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackagePart.Package">
            <summary>
            Gets a reference to the containing package.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackagePart.Uri">
            <summary>
            Gets the URI for the current part.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackagePart.ContentType">
            <summary>
            Gets the MIME type of the content stream.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackagePart.Relationships">
            <summary>
            Gets a collection of relationships.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.IPackagePart.GetStream(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Gets the data stream for the part.
            </summary>
            <param name="open">Mode in which to open the stream.</param>
            <param name="write">Access mode in which to open the stream.</param>
            <returns>A stream for the data of the part.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.IPackageProperties">
            <summary>
            An abstraction of package properties, similar to <see cref="T:System.IO.Packaging.PackageProperties"/>.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackageProperties.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackageProperties.Subject">
            <summary>
            Gets or sets the topic of the contents.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackageProperties.Creator">
            <summary>
            Gets or sets the primary creator. The identification is environment-specific and
            can consist of a name, email address, employee ID, etc. It is
            recommended that this value be only as verbose as necessary to
            identify the individual.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackageProperties.Keywords">
            <summary>
            Gets or sets a delimited set of keywords to support searching and indexing. This
            is typically a list of terms that are not available elsewhere in the
            properties.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackageProperties.Description">
            <summary>
            Gets or sets the description or abstract of the contents.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackageProperties.LastModifiedBy">
            <summary>
            Gets or sets the user who performed the last modification. The identification is
            environment-specific and can consist of a name, email address,
            employee ID, etc. It is recommended that this value be only as
            verbose as necessary to identify the individual.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackageProperties.Revision">
            <summary>
            Gets or sets the revision number. This value indicates the number of saves or
            revisions. The application is responsible for updating this value
            after each revision.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackageProperties.LastPrinted">
            <summary>
            Gets or sets the date and time of the last printing.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackageProperties.Created">
            <summary>
            Gets or sets the creation date and time.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackageProperties.Modified">
            <summary>
            Gets or sets the date and time of the last modification.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackageProperties.Category">
            <summary>
            Gets or sets the category.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackageProperties.Identifier">
            <summary>
            Gets or sets a unique identifier.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackageProperties.ContentType">
            <summary>
            Gets or sets the type of content represented, generally defined by a specific
            use and intended audience. Example values include "Whitepaper",
            "Security Bulletin", and "Exam". (This property is distinct from
            MIME content types as defined in RFC 2045.)
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackageProperties.Language">
            <summary>
            Gets or sets the primary language of the package content. The language tag is
            composed of one or more parts: A primary language subtag and a
            (possibly empty) series of subsequent subtags, for example, "EN-US".
            These values MUST follow the convention specified in RFC 3066.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackageProperties.Version">
            <summary>
            Gets or sets the version number. This value is set by the user or by the application.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackageProperties.ContentStatus">
            <summary>
            Gets or sets the status of the content. Example values include "Draft", "Reviewed", and "Final".
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.IPackageRelationship">
            <summary>
            An interface that defines the relationship between a source and a target part. Similar to <see cref="T:System.IO.Packaging.PackageRelationship"/> but allows full overriding.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackageRelationship.Id">
            <summary>
            Gets a unique identifier across relationships for the given source.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackageRelationship.RelationshipType">
            <summary>
            Gets the type of the relationship used to uniquely define the role of the relationship.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackageRelationship.SourceUri">
            <summary>
            Gets a reference to the parent PackagePart to which this relationship belongs.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackageRelationship.TargetMode">
            <summary>
            Gets a value indicating the interpretations of the "base" of the target uri.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IPackageRelationship.TargetUri">
            <summary>
            Gets the uri of the part that this relationship points to.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.IRelationshipCollection">
            <summary>
            A collection of relationships for a <see cref="T:DocumentFormat.OpenXml.Packaging.IPackage"/> of <see cref="T:DocumentFormat.OpenXml.Packaging.IPackagePart"/>.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.IRelationshipCollection.Create(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)">
            <summary>
            Creates a relationship to a part with a given URI, target mode, relationship type, and (optional) identifier.
            </summary>
            <param name="targetUri">The URI of the target part</param>
            <param name="targetMode">Indicates if the target part is internal or external to the package.</param>
            <param name="relationshipType">A URI that uniquely defines the role of the relationship</param>
            <param name="id">A unique XML identifier</param>
            <returns>The relationship to the specified part.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.IRelationshipCollection.Remove(System.String)">
            <summary>
            Deletes the specified relationship.
            </summary>
            <param name="id">The id of the relationship.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IRelationshipCollection.Item(System.String)">
            <summary>
            Gets a relationship by id.
            </summary>
            <param name="id">Id of relationship</param>
            <returns>A package relationship</returns>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.IRelationshipCollection.Count">
            <summary>
            Gets a count of the registered relationships.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.IRelationshipCollection.Contains(System.String)">
            <summary>
            Indicates whether a relationship with a given ID is defined.
            </summary>
            <param name="id">The id of the relationship</param>
            <returns>true if a relationship exists; otherwise, no.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.ISupportedRelationship`1">
            <summary>
            Defines the interface for tagging a part that can add extensible parts.
            </summary>
            <typeparam name="TPart">Extensible part type that is supported by the implementing class.</typeparam>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.MarkupCompatibilityProcessMode">
            <summary>
            Specifies the mode in which to process the markup compatibility tags in the document.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.MarkupCompatibilityProcessMode.NoProcess">
            <summary>
            Do not process MarkupCompatibility tags.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.MarkupCompatibilityProcessMode.ProcessLoadedPartsOnly">
            <summary>
            Process the loaded parts.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.MarkupCompatibilityProcessMode.ProcessAllParts">
            <summary>
            Process all the parts in the package.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.MarkupCompatibilityProcessSettings">
            <summary>
            Represents markup compatibility processing settings.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.MarkupCompatibilityProcessSettings.ProcessMode">
            <summary>
            Gets the markup compatibility process mode.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.MarkupCompatibilityProcessSettings.TargetFileFormatVersions">
            <summary>
            Gets the target file format versions.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.MarkupCompatibilityProcessSettings.#ctor(DocumentFormat.OpenXml.Packaging.MarkupCompatibilityProcessMode,DocumentFormat.OpenXml.FileFormatVersions)">
            <summary>
            Creates a MarkupCompatibilityProcessSettings object using the supplied process mode and file format versions.
            </summary>
            <param name="processMode">The process mode.</param>
            <param name="targetFileFormatVersions">The file format versions. This parameter is ignored if the value is NoProcess.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.MediaDataPart">
            <summary>
            Represents a media (Audio, Video) data part in the document.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.MediaDataPart.TargetPath">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.MediaDataPart.TargetName">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.MediaDataPart.TargetFileExtension">
            <inheritdoc/>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.MediaDataPartType">
            <summary>
            Defines part media types.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.MediaDataPartType.Aiff">
            <summary>
            Audio Interchange File Format (.aiff)
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.MediaDataPartType.Midi">
            <summary>
            MIDI Audio (.mid)
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.MediaDataPartType.Mp3">
            <summary>
            MP3 (.mp3)
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.MediaDataPartType.MpegUrl">
            <summary>
            MP3 Playlist File (.m3u)
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.MediaDataPartType.Wav">
            <summary>
            WAV audio (.wav)
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.MediaDataPartType.Wma">
            <summary>
            Windows Media Audio File (.wma)
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.MediaDataPartType.MpegAudio">
            <summary>
            Mpeg audio (.mpeg)
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.MediaDataPartType.OggAudio">
            <summary>
            Ogg Vorbis (.ogg)
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.MediaDataPartType.Asx">
            <summary>
            Advanced Stream Redirector File (.asx)
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.MediaDataPartType.Avi">
            <summary>
            Audio Video Interleave File (.avi)
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.MediaDataPartType.Mpg">
            <summary>
            MPEG 1 System Stream (.mpg)
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.MediaDataPartType.MpegVideo">
            <summary>
            MPEG 1 System Stream (.mpeg)
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.MediaDataPartType.Wmv">
            <summary>
            Windows Media File (.wmv)
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.MediaDataPartType.Wmx">
            <summary>
            Windows Media Player A/V Shortcut (.wmx)
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.MediaDataPartType.Wvx">
            <summary>
            Windows Media Redirector (.wvx)
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.MediaDataPartType.Quicktime">
            <summary>
            QuickTime video (.mov)
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.MediaDataPartType.OggVideo">
            <summary>
             Ogg Stream (.ogg)
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.MediaDataPartType.VC1">
            <summary>
            VC-1 Stream (.wmv)
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.MediaReferenceRelationship">
            <summary>
            Represents an internal media reference relationship to a MediaDataPart element.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.MediaReferenceRelationship.RelationshipTypeConst">
            <summary>
            Represents the fixed value of the RelationshipType.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.MediaReferenceRelationship.MediaReferenceRelationshipType">
            <summary>
            Gets the source relationship type for a media reference.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.MediaReferenceRelationship.#ctor(DocumentFormat.OpenXml.Packaging.MediaDataPart,System.String)">
            <summary>
            Initializes a new instance of the MediaReferenceRelationship class using
            the supplied MediaDataPart and relationship ID.
            </summary>
            <param name="mediaDataPart">The target DataPart of the reference relationship.</param>
            <param name="id">The relationship ID.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.MediaReferenceRelationship.RelationshipType">
            <summary>
            Gets the relationship type for a media reference.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.OpenSettings">
            <summary>
            Represents the settings when opening a document.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.Packaging.OpenSettings"/> class.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenSettings.AutoSave">
            <summary>
            Gets or sets a value indicating whether to auto save document modifications.
            The default value is true.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenSettings.CompatibilityLevel">
            <summary>
            Gets or sets a version to keep compat to
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenSettings.MarkupCompatibilityProcessSettings">
            <summary>
            Gets or sets the value of the markup compatibility processing mode.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenSettings.MaxCharactersInPart">
            <summary>
            Gets or sets a value that indicates the maximum number of allowable characters in an Open XML part. A zero (0) value indicates that there are no limits on the size of the part. A non-zero value specifies the maximum size, in characters.
            </summary>
            <remarks>
            This property allows you to mitigate denial of service attacks where the attacker submits a package with an extremely large Open XML part. By limiting the size of the part, you can detect the attack and recover reliably.
            </remarks>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackage">
            <summary>
            Represents a base class for strong typed Open XML document classes.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.#ctor">
            <summary>
            Initializes a new instance of the OpenXmlPackage class.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.RootPart">
            <summary>
            Gets the root part for the package.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.StrictRelationshipFound">
            <summary>
            Gets a value indicating whether this package contains Transitional relationships converted from Strict.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.PackageProperties">
            <summary>
            Gets the package properties.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.FileOpenAccess">
            <summary>
            Gets the FileAccess setting for the document.
            The current I/O access settings are: Read, Write, or ReadWrite.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.CompressionOption">
            <summary>
            Gets or sets the compression level for the content of the new part
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.PartExtensions">
            <summary>
            Gets a <see cref="T:DocumentFormat.OpenXml.Features.IPartExtensionFeature"/> part which provides a mapping from content type to part extension.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.MaxCharactersInPart">
            <summary>
            Gets a value that indicates the maximum allowable number of characters in an Open XML part. A zero (0) value indicates that there are no limits on the size
            of the part. A non-zero value specifies the maximum size, in characters.
            </summary>
            <remarks>
            This property allows you to mitigate denial of service attacks where the attacker submits a package with an extremely large Open XML part. By limiting the size of a
            part, you can detect the attack and recover reliably.
            </remarks>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.CanSave">
            <summary>
            Gets a value indicating whether saving the package is supported by calling <see cref="M:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.Save"/>. Some platforms (such as .NET Core), have limited support for saving.
            If <c>false</c>, in order to save, the document and/or package needs to be fully closed and disposed and then reopened.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.DataParts">
            <summary>
            Gets all the <see cref="T:DocumentFormat.OpenXml.Packaging.DataPart"/> parts in the document package.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.AddPart``1(``0)">
            <summary>
            Adds the specified part to the document.
            Use the returned part to operate on the part added to the document.
            </summary>
            <typeparam name="T">A class that is derived from the OpenXmlPart class.</typeparam>
            <param name="part">The part to add to the document.</param>
            <returns>The added part in the document. Differs from the part that was passed as an argument.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the part is not allowed to be added.</exception>
            <exception cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackageException">Thrown when the part type already exists and multiple instances of the part type is not allowed.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.DeletePartsRecursivelyOfType``1">
            <summary>
            Deletes all the parts with the specified part type from the package recursively.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.CreateMediaDataPart(System.String)">
            <summary>
            Creates a new <see cref="T:DocumentFormat.OpenXml.Packaging.MediaDataPart"/> part in the document package.
            </summary>
            <param name="contentType">The content type of the new <see cref="T:DocumentFormat.OpenXml.Packaging.MediaDataPart"/> part.</param>
            <returns>The added <see cref="T:DocumentFormat.OpenXml.Packaging.MediaDataPart"/> part.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="contentType"/> is a null reference.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.CreateMediaDataPart(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:DocumentFormat.OpenXml.Packaging.MediaDataPart"/> part in the document package.
            </summary>
            <param name="contentType">The content type of the new <see cref="T:DocumentFormat.OpenXml.Packaging.MediaDataPart"/> part.</param>
            <param name="extension">The part name extension (.dat, etc.) of the new <see cref="T:DocumentFormat.OpenXml.Packaging.MediaDataPart"/> part.</param>
            <returns>The added <see cref="T:DocumentFormat.OpenXml.Packaging.MediaDataPart"/> part.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="contentType"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="extension"/> is a null reference.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.CreateMediaDataPart(DocumentFormat.OpenXml.Packaging.MediaDataPartType)">
            <summary>
            Creates a new <see cref="T:DocumentFormat.OpenXml.Packaging.MediaDataPart"/> part in the document package.
            </summary>
            <param name="mediaDataPartType">The content type of the new <see cref="T:DocumentFormat.OpenXml.Packaging.MediaDataPart"/> part.</param>
            <returns>The added <see cref="T:DocumentFormat.OpenXml.Packaging.MediaDataPart"/> part.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.DeletePart(DocumentFormat.OpenXml.Packaging.DataPart)">
            <summary>
            Deletes the specified <see cref="T:DocumentFormat.OpenXml.Packaging.DataPart"/> from the document package.
            </summary>
            <param name="dataPart">The <see cref="T:DocumentFormat.OpenXml.Packaging.DataPart"/> to be deleted.</param>
            <returns>Returns true if the part is successfully removed; otherwise returns false. This method also returns false if the part was not found or the parameter is null.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="dataPart"/> is referenced by another part in the document package.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.ThrowIfObjectDisposed">
            <summary>
            Thrown if an object is disposed.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.Dispose(System.Boolean)">
            <summary>
            Flushes and saves the content, closes the document, and releases all resources.
            </summary>
            <param name="disposing">Specify true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.Dispose">
            <summary>
            Flushes and saves the content, closes the document, and releases all resources.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.MarkupCompatibilityProcessSettings">
            <summary>
            Gets the markup compatibility settings applied at loading time.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.AutoSave">
            <summary>
            Gets a value indicating whether the parts should be saved when disposed.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.ChangeDocumentTypeInternal``1(``0)">
            <summary>
            Changes the type of the document.
            </summary>
            <typeparam name="T">The type of the document's main part.</typeparam>
            <remarks>The MainDocumentPart will be changed.</remarks>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.DeleteUnusedDataPartOnClose">
            <summary>
            Deletes all DataParts that are not referenced by any media, audio, or video reference relationships.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.Save">
            <summary>
            Saves the contents of all parts and relationships that are contained in the OpenXml package, if <see cref="P:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.FileOpenAccess"/> is <see cref="F:System.IO.FileAccess.ReadWrite"/>.
            Some platforms do not support saving due to limitations in <see cref="T:System.IO.Packaging.Package"/>, so please query <see cref="P:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.CanSave"/> at runtime to know if
            full saving will be supported without closing and disposing of the <see cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackage"/>.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPackage.Features">
            <inheritdoc/>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackageException">
            <summary>
            Represents an Open XML package exception class for errors.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPackageException.#ctor">
            <summary>
            Initializes a new instance of the OpenXmlPackageException class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPackageException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the OpenXmlPackageException class using the supplied error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPackageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the OpenXmlPackageException class using the supplied serialized data.
            </summary>
            <param name="info">The serialized object data about the exception being thrown.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPackageException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the OpenXmlPackageException class using the supplied error message and a reference to the inner exception that caused the current exception.
            </summary>
            <param name="message">The error message that indicates the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackageExtensions">
            <summary>
            Extensions for <see cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackage"/> type.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPackageExtensions.GetAllParts(DocumentFormat.OpenXml.Packaging.OpenXmlPackage)">
            <summary>
            Traverse parts in the <see cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackage"/> by breadth-first.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPackageValidationResult.Message">
            <summary>
            Gets or sets the message string of the event.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPackageValidationResult.RelationshipType">
            <summary>
            Gets or sets the class name of the part.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPackageValidationResult.SubPart">
            <summary>
            Gets or sets the part that caused the event.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPackageValidationResult.Part">
            <summary>
            Gets or sets the part in which to process the validation.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPackageValidationResult.DataPartReferenceRelationship">
            <summary>
            Gets or sets the DataPartReferenceRelationship that caused the event.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.OpenXmlPart">
            <summary>
            Represents an abstract base class for all OpenXml parts.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPart.#ctor">
            <summary>
            Create an instance of <see cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPart"/>
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPart.OpenXmlPackage">
            <summary>
            Gets the OpenXmlPackage which contains the current part.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPart.Uri">
            <summary>
            Gets the internal part path in the package.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPart.GetParentParts">
            <summary>
            Enumerates all parents that reference this part anywhere in the document.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPart.GetStream">
            <summary>
            Returns the part content data stream.
            </summary>
            <returns>The content data stream for the part. </returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPart.GetStream(System.IO.FileMode)">
            <summary>
            Returns the content stream that was opened using a specified I/O FileMode.
            </summary>
            <param name="mode">The I/O mode to be used to open the content stream.</param>
            <returns>The content stream of the part. </returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPart.GetStream(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Returns the part content stream that was opened using a specified FileMode and FileAccess.
            </summary>
            <param name="mode">The I/O mode to be used to open the content stream.</param>
            <param name="access">The access permissions to be used to open the content stream.</param>
            <returns>The content stream of the part. </returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPart.FeedData(System.IO.Stream)">
            <summary>
            Feeds data into the part stream.
            The stream of the part will be truncated at first.
            </summary>
            <param name="sourceStream">The source stream to be read from.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when "sourceStream" is a null reference.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPart.UnloadRootElement">
            <summary>
            Unloads the RootElement.
            </summary>
            <returns>The unloaded RootElement</returns>
            <remarks>
            Releases the DOM so the memory can be GC'ed.
            </remarks>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPart.ContentType">
            <summary>
            Gets the content type (MIME type) of the content data in the part.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPart.RelationshipType">
            <summary>
            Gets the relationship type of the part.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPart.RootElement">
            <summary>
            Gets the root element of the current part.
            Returns null when the current part is empty or is not an XML content type.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPart.PackagePart">
            <summary>
            Gets the internal metro PackagePart element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPart.MaxCharactersInPart">
            <summary>
            Gets a value that indicates the maximum allowable number of characters in an Open XML part. A zero (0) value specifies that the part can have an unlimited number of characters. A non-zero value specifies the maximum allowable number of characters in the part.
            </summary>
            <remarks>
            This property allows you to mitigate denial of service attacks where the attacker submits package with extremely large Open XML part. By limiting the size of a part, you can detect the attack and recover reliably.
            </remarks>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPart.IsContentTypeFixed">
            <summary>
            Gets a value indicating whether the ContentType for the current part is fixed.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPart.IsValidContentType(DocumentFormat.OpenXml.Packaging.IPackagePart)">
            <summary>
            Determines if the content type agrees with this part's constraints.
            </summary>
            <param name="part"></param>
            <returns>True if the content type is valid for this part. False otherwise.</returns>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPart.InternalRootElement">
            <summary>
            Gets or sets the root element field.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the part does not have root element defined.</exception>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPart.PartRootElement">
            <summary>
            Gets the root element of the current part.
            </summary>
            <remarks>Returns null if the part is not a defined XML part.</remarks>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPart.IsInVersion(DocumentFormat.OpenXml.FileFormatVersions)">
            <summary>
            Indicates whether the current part is available in a specific version of an Office Application.
            </summary>
            <param name="version">The Office file format version.</param>
            <returns>Returns true if the part is defined in the specified version.</returns>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPart.IsRootElementLoaded">
            <summary>
            Gets a value indicating whether the root element is loaded from the part or it has been set.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPart.LoadDomTree``1">
            <summary>
            Load the DOM tree. And associate the DOM tree with this part.
            Only used for generated part classes which derive from this OpenXmlBasePart.
            </summary>
            <typeparam name="T">The type of the part's root element.</typeparam>
            <remarks>
            The ._rootElement will be assigned if the DOM is loaded.
            </remarks>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPart.SetDomTree(DocumentFormat.OpenXml.OpenXmlPartRootElement)">
            <summary>
            Set the RootElement to be the given partRootElement.
            Only used for generated part classes which derive from this OpenXmlBasePart.
            </summary>
            <param name="partRootElement">The given partRootElement. Can be null.</param>
            <exception cref="T:System.ArgumentException">Thrown when the part's root element has already be associated with another OpenXmlPart.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPart.ThrowIfObjectDisposed">
            <summary>
            Indicates whether the object is already disposed.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPart.Features">
            <inheritdoc/>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.OpenXmlPart.UnloadingRootElementStream">
            <summary>
            A <see cref="T:System.IO.Stream"/> used by <see cref="M:DocumentFormat.OpenXml.Packaging.OpenXmlPart.GetStream(System.IO.FileMode,System.IO.FileAccess)" /> to unload the root if updated.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer">
            <summary>
            Defines the base class for OpenXmlPackage and OpenXmlPart.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.#ctor">
            <summary>
            Initializes OpenXmlPartContainer.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.ChildrenRelationshipParts">
            <summary>
            Gets the children parts IDictionary.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.DeleteReferenceRelationship(DocumentFormat.OpenXml.Packaging.ReferenceRelationship)">
            <summary>
            Deletes the specified reference relationship.
            </summary>
            <param name="referenceRelationship">The reference relationship to be deleted.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when "referenceRelationship" is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the reference relationship is not referenced by this part.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.DeleteReferenceRelationship(System.String)">
            <summary>
            Deletes the specified reference relationship.
            </summary>
            <param name="id">The relationship ID of the ReferenceRelationship.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the "id" parameter is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when there is no ReferenceRelationship with the specified relationship ID.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.GetReferenceRelationship(System.String)">
            <summary>
            Gets the specified ReferenceRelationship.
            </summary>
            <param name="id">The relationship ID of the ReferenceRelationship.</param>
            <returns>Returns the ReferenceRelationship which has the relationship ID. </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the "id" parameter is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when there is no ReferenceRelationship with the specified relationship ID.</exception>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.ExternalRelationships">
            <summary>
            Gets all external relationships.
            Hyperlink relationships are not included, use HyperlinkRelationship property to enumerate hyperlink relationships.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddExternalRelationship(System.String,System.Uri)">
            <summary>
            Adds an external relationship.
            Do not add hyperlink relationships through this method. Use AddHyperlinkRelationship() instead.
            </summary>
            <param name="relationshipType">The relationship type.</param>
            <param name="externalUri">The external URI.</param>
            <returns>An ExternalRelationship with the relationship ID. </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when "relationshipType" or the "externalUri" is null reference.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddExternalRelationship(System.String,System.Uri,System.String)">
            <summary>
            Adds an external relationship.
            Do not add hyperlink relationships through this method. Use AddHyperlinkRelationship() instead.
            </summary>
            <param name="relationshipType">The relationship type.</param>
            <param name="externalUri">The external URI.</param>
            <param name="id">The desired relationship ID. </param>
            <returns>An ExternalRelationship with the relationship ID. </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when "relationshipType" or the "externalUri" is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the relationship type is hyperlink relationship type (http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink). </exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.DeleteExternalRelationship(DocumentFormat.OpenXml.Packaging.ExternalRelationship)">
            <summary>
            Deletes the specified external relationship.
            </summary>
            <param name="externalRelationship">The external relationship to be deleted.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when "externalRelationship" is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the external relationship is not referenced by this part.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.DeleteExternalRelationship(System.String)">
            <summary>
            Deletes the specified ExternalRelationship.
            </summary>
            <param name="id">The relationship ID of the ExternalRelationship.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the "id" parameter is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when there is no ExternalRelationship with the specified relationship ID.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.GetExternalRelationship(System.String)">
            <summary>
            Gets the specified ExternalRelationship.
            </summary>
            <param name="id">The relationship ID of the ExternalRelationship.</param>
            <returns>Returns the ExternalRelationship which has the relationship ID. </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the "id" parameter is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when there is no ExternalRelationship with the specified relationship ID.</exception>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.HyperlinkRelationships">
            <summary>
            Gets all hyperlink relationships.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddHyperlinkRelationship(System.Uri,System.Boolean)">
            <summary>
            Adds a new hyperlink relationship.
            </summary>
            <param name="hyperlinkUri">The URI of the hyperlink.</param>
            <param name="isExternal">Is the hyperlink external to the <see cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackage"/>.</param>
            <returns>An HyperlinkRelationship with the relationship ID. </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when "hyperlinkUri" is null reference.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddHyperlinkRelationship(System.Uri,System.Boolean,System.String)">
            <summary>
            Adds a new hyperlink relationship.
            </summary>
            <param name="hyperlinkUri">The URI of the hyperlink.</param>
            <param name="isExternal">Is the hyperlink external to the <see cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackage"/>.</param>
            <param name="id">The desired relationship ID. </param>
            <returns>An HyperlinkRelationship with the relationship ID. </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when "hyperlinkUri" or "id" is null reference.</exception>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.DataPartReferenceRelationships">
            <summary>
            Gets all <see cref="T:DocumentFormat.OpenXml.Packaging.DataPartReferenceRelationship"/> relationships.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddDataPartReferenceRelationship``1(DocumentFormat.OpenXml.Packaging.MediaDataPart)">
            <summary>
            Adds a new <see cref="T:DocumentFormat.OpenXml.Packaging.DataPartReferenceRelationship"/> relationship to the specified <see cref="T:DocumentFormat.OpenXml.Packaging.MediaDataPart"/>.
            </summary>
            <param name="mediaDataPart">The target <see cref="T:DocumentFormat.OpenXml.Packaging.MediaDataPart"/> of the reference relationship.</param>
            <returns>An new <see cref="T:DocumentFormat.OpenXml.Packaging.DataPartReferenceRelationship"/>. </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="mediaDataPart"/> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the specified <paramref name="mediaDataPart"/> is not in this document.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddDataPartReferenceRelationship``1(DocumentFormat.OpenXml.Packaging.MediaDataPart,System.String)">
            <summary>
            Adds a new <see cref="T:DocumentFormat.OpenXml.Packaging.DataPartReferenceRelationship"/> relationship to the specified <see cref="T:DocumentFormat.OpenXml.Packaging.MediaDataPart"/>.
            </summary>
            <param name="mediaDataPart">The target <see cref="T:DocumentFormat.OpenXml.Packaging.MediaDataPart"/> of the reference relationship.</param>
            <param name="id">The desired relationship ID. </param>
            <returns>An new <see cref="T:DocumentFormat.OpenXml.Packaging.DataPartReferenceRelationship"/> with the relationship ID. </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="mediaDataPart"/> is null reference.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="id"/> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the specified <paramref name="mediaDataPart"/> is not in this document.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddDataPartReferenceRelationship(DocumentFormat.OpenXml.Packaging.DataPartReferenceRelationship)">
            <summary>
            Adds a new <see cref="T:DocumentFormat.OpenXml.Packaging.DataPartReferenceRelationship"/> relationship.
            </summary>
            <param name="dataPartReferenceRelationship">The <see cref="T:DocumentFormat.OpenXml.Packaging.DataPartReferenceRelationship"/>.</param>
            <returns>The same <see cref="T:DocumentFormat.OpenXml.Packaging.DataPartReferenceRelationship"/>. </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="dataPartReferenceRelationship"/> is null reference.</exception>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.Parts">
            <summary>
            Gets all parts which are relationship targets of this part.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.GetPartById(System.String)">
            <summary>
            Gets the child part through the relationship ID.
            </summary>
            <param name="id">The relationship ID of the part.</param>
            <returns>The part.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the part with the specified id does not exist.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.TryGetPartById(System.String,DocumentFormat.OpenXml.Packaging.OpenXmlPart@)">
            <summary>
            Try to get the child part by the relationship ID.
            </summary>
            <param name="id">The relationship ID of the part.</param>
            <param name="part">The part.</param>
            <returns>Return <c>true</c> when the part with the specified id exist, otherwise <c>false</c></returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.GetIdOfPart(DocumentFormat.OpenXml.Packaging.OpenXmlPart)">
            <summary>
            Gets the relationship ID of the part.
            </summary>
            <param name="part">The part.</param>
            <returns>The relationship ID of the part.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when "part" is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the part does not exist.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.ChangeIdOfPart(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.String)">
            <summary>
            Changes the relationship ID of the part.
            </summary>
            <param name="part">The target part.</param>
            <param name="newRelationshipId">The new relationship ID of the part.</param>
            <returns>The old relationship ID of the part.</returns>
            <exception cref="T:System.ArgumentNullException">Throw when "part" is null reference or the newRelationshipId is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the part does not exist under this part.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the specified relationship id is already used by another part.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddPart``1(``0)">
            <summary>
            Adds the part to the document.
            Must use the returned part to operate on the part added to the document.
            </summary>
            <typeparam name="T">Derived class from OpenXmlPart.</typeparam>
            <param name="part">The part to be added to the document.</param>
            <returns>The part added to the document. This is different from the passed in part.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when "part" is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the part is not allowed to be added.</exception>
            <exception cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackageException">Thrown when one instance of the same type part already exists and multiple instances of that type are not allowed.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddPart``1(``0,System.String)">
            <summary>
            Adds the part to the document with a given relationship identifier (ID).
            Must use the returned part to operate on the part added to the document
            </summary>
            <typeparam name="T">Derived class from OpenXmlPart.</typeparam>
            <param name="part">The part to be added to the document.</param>
            <param name="id">A unique relationship identifier.</param>
            <returns>The part added to the document. This is different from the passed in part.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when "part" or the "id" is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the part is not allowed to be added.</exception>
            <exception cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackageException">Thrown when one instance of same type part already exists and multiple instances of that type are not allowed.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.CreateRelationshipToPart(DocumentFormat.OpenXml.Packaging.OpenXmlPart)">
            <summary>
            Adds a relationship for the specified part to this part.
            </summary>
            <param name="targetPart">The part to add relationship for.</param>
            <returns>A unique relationship identifier.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when "part" or the "id" is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the part is no allowed to be added.</exception>
            <exception cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackageException">Thrown when one instance of same type part already exists and multiple instance of that type is not allowed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the <paramref name="targetPart"/> and this part are not in the same OpenXmlPackage.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.CreateRelationshipToPart(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.String)">
            <summary>
            Adds a relationship for the specified part to this part.
            </summary>
            <param name="targetPart">The part to add a relationship for.</param>
            <param name="id">A unique relationship identifier.</param>
            <returns>A unique relationship identifier.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when "part" or the "id" is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the part is no allowed to be added.</exception>
            <exception cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackageException">Thrown when one instance of same type part already exists and multiple instance of that type is not allowed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the <paramref name="targetPart"/> and this part are not in the same OpenXmlPackage.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddNewPart``1">
            <summary>
            Adds a new part of type T.
            </summary>
            <typeparam name="T">The class of the part.</typeparam>
            <returns>The added part.</returns>
            <exception cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackageException">When the part is not allowed to be referenced by this part.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddNewPart``1(System.String)">
            <summary>
            Adds a new part of type T.
            </summary>
            <typeparam name="T">The class of the part.</typeparam>
            <param name="id">The relationship id.</param>
            <returns>The added part.</returns>
            <exception cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackageException">When the part is not allowed to be referenced by this part.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddNewPart``1(System.String,System.String)">
            <summary>
            Adds a new part of type T.
            </summary>
            <typeparam name="T">The class of the part.</typeparam>
            <param name="contentType">The content type of the part. Must match the defined content type if the part is fixed content type.</param>
            <param name="id">The relationship id. The id will be automatically generated if this param is null.</param>
            <returns>The added part.</returns>
            <exception cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackageException">When the part is not allowed to be referenced by this part.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the part is fixed content type and the passed in contentType does not match the defined content type.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when "contentType" is null reference.</exception>
            <remarks>Mainly used for adding not-fixed content type part - ImagePart, etc</remarks>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddExtendedPart(System.String,System.String,System.String)">
            <summary>
            Adds an extended part ( Application specific part ).
            </summary>
            <param name="relationshipType">The relationship type of the part.</param>
            <param name="contentType">The content type of the part.</param>
            <param name="targetExt">The desired part name extension in the package.</param>
            <returns>The new ExtendedPart.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddExtendedPart(System.String,System.String,System.String,System.String)">
            <summary>
            Adds an extended part ( Application specific part ).
            </summary>
            <param name="relationshipType">The relationship type of the part.</param>
            <param name="contentType">The content type of the part.</param>
            <param name="targetExt">The desired part name extension in the package.</param>
            <param name="rId">The desired relationship ID.</param>
            <returns>The new ExtendedPart.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.DeletePart(System.String)">
            <summary>
            Deletes the specified child part from this part.
            </summary>
            <param name="id">The relationship ID of the part to be deleted.</param>
            <returns>True if the part is successfully removed; otherwise, false. This method also returns false if the part was not found.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when "id" is null reference.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.DeletePart(DocumentFormat.OpenXml.Packaging.OpenXmlPart)">
            <summary>
            Deletes a specified part in the package root layer.
            </summary>
            <param name="part">The part to be deleted.</param>
            <returns>True if the part is successfully removed; otherwise, false. This method also returns false if the part was not found or the parameter is null.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the part is not referenced by this part.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.DeleteParts``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Deletes all the parts which are in the passed in collection from the document.
            </summary>
            <param name="partsToBeDeleted">The parts to be deleted.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when "partsToBeDeleted" is null reference.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddAnnotation(System.Object)">
            <summary>
            Adds an object to the annotation list of this PartContainer.
            </summary>
            <param name="annotation">The annotation to add to this PartContainer.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.Annotation``1">
            <summary>
            Get the first annotation object of the specified type from this PartContainer.
            </summary>
            <typeparam name="T">The type of the annotation to retrieve.</typeparam>
            <returns>The first annotation object of the specified type.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.Annotation(System.Type)">
            <summary>
            Get the first annotation object of the specified type from this PartContainer.
            </summary>
            <param name="type">The type of the annotation to retrieve.</param>
            <returns>The first annotation object of the specified type.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.Annotations``1">
            <summary>
            Gets a collection of annotations of the specified type for this PartContainer.
            </summary>
            <typeparam name="T">The type of the annotations to retrieve.</typeparam>
            <returns>An IEnumerable(T) of object that contains the annotations for this PartContainer.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.Annotations(System.Type)">
            <summary>
            Gets a collection of annotations of the specified type for this PartContainer.
            </summary>
            <param name="type">The Type of the annotations to retrieve.</param>
            <returns>An IEnumerable(T) of object that contains the annotations for this PartContainer.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.RemoveAnnotations``1">
            <summary>
            Removes the annotations of the specified type from this PartContainer.
            </summary>
            <typeparam name="T">The Type of the annotations to remove.</typeparam>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.RemoveAnnotations(System.Type)">
            <summary>
            Removes the annotations of the specified type from this PartContainer.
            </summary>
            <param name="type">The Type of the annotations to remove.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.GetPartsOfType``1">
            <summary>
            Enumerates all the children parts of the specified type <typeparamref name="T"/> of this part.
            </summary>
            <typeparam name="T">Derived class from OpenXmlPart.</typeparam>
            <returns></returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddNewPartInternal``1">
            <summary>
            Adds a new part of type T.
            </summary>
            <typeparam name="T">The class of the part.</typeparam>
            <returns>The added part.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddNewPartInternal``1(System.String,System.String)">
            <summary>
            Adds a new part of type T
            </summary>
            <typeparam name="T">The class of the part.</typeparam>
            <param name="contentType">The content type of the part.</param>
            <param name="id">The part relationship id.</param>
            <returns>The added part.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.InitPart(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.String)">
            <summary>
            Initializes a new created part
            </summary>
            <param name="newPart">The part to be initialized.</param>
            <param name="contentType">The content type of the part.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.InitPart(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.String,System.String)">
            <summary>
            Initializes a new created part
            </summary>
            <param name="newPart">The part to be initialized.</param>
            <param name="contentType">The content type of the part.</param>
            <param name="id">The relationship id.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddPartFrom(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.String)">
            <summary>
            Adds a new part.
            </summary>
            <param name="subPart">The part to be added.</param>
            <param name="rId">A unique relationship identifier. null to create new id.</param>
            <returns>The added part. May diff with the passed in part.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when "subPart" is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the part is no allowed to be added.</exception>
            <exception cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackageException">Thrown when one instance of same type part already exists and multiple instance of that type is not allowed.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.SetSubPart(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.String)">
            <summary>
            Sets part which is only one in the parent
            </summary>
            <param name="part"></param>
            <param name="rId">A unique relationship identifier.</param>
            <returns>The part added to the parent. Different with the passed in part.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddSubPart(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.String)">
            <summary>
            Adds the part to the parent.
            </summary>
            <param name="part"></param>
            <param name="rId">A unique relationship identifier.</param>
            <returns>The part added to the parent. Different with the passed in part.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.DeletePartCore(System.String)">
            <summary>
            Deletes the specified part in the package root layer.
            </summary>
            <param name="id">The relationship ID of the part to be deleted.</param>
            <returns>true if the part is successfully removed; otherwise, false. This method also returns false if the part was not found.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.DeletePartsOfType``1">
            <summary>
            Deletes all the parts of the specified type.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.DeletePartsRecursivelyOfTypeBase``1">
            <summary>
            Deletes all the parts which is the specified part type from package recursively.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.DeleteAllParts(System.Collections.Generic.Dictionary{DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.Boolean},System.Collections.Generic.Dictionary{DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.Boolean})">
            <summary>
            Removes all child parts of this part.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.GetSubPart(System.String)">
            <summary>
            Gets the sub part which is the specified relationship type.
            </summary>
            <param name="relationshipType">The relationship type of the part.</param>
            <returns>return null if no one.</returns>
            <remarks>Only used for maxOccurence=1 part.</remarks>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.CreateOpenXmlPart(System.String)">
            <summary>
            Creates an strong typed OpenXmlPart instance based on the relationship type. For and only for loading.
            </summary>
            <param name="relationshipType">The relationship type of the new part.</param>
            <returns>The created new part.</returns>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.InternalOpenXmlPackage">
            <summary>
            Gets the internal OpenXmlPackage instance
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.ThrowIfObjectDisposed">
            <summary>
            Test whether the object is already disposed.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.Features">
            <summary>
            Gets the features associated with this part.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.PartExtensionProvider">
            <summary>
            Defines a provider which maintains a dictionary where the key is the content type and the value is a part extension.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.PartExtensionProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.Packaging.PartExtensionProvider"/> class that is empty.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.PartExtensionProvider.Register(System.String,System.String)">
            <summary>
            Check to make sure the content type and part extension is in the provider. If not, they will be added.
            </summary>
            <param name="contentType">The content type</param>
            <param name="extension">Part Extension (".xml") to be used for the part with the specified content type.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when either parameter is null.</exception>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.PartTypeInfo">
            <summary>
            Defines information used in creating a new part.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.PartTypeInfo.#ctor(System.String,System.String)">
            <summary>
            Ctor - assign content type and extention.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.PartTypeInfo.ContentType">
            <summary>
            Gets content type for the part.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.PartTypeInfo.Extension">
            <summary>
            Gets the file extension for the part.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.PartUriHelper._numberedContentTypes">
            <summary>
            List of contentTypes that need to have a '1' appended to the name for the first item in the package.
            Section numbers in comments refer to the ISO/IEC 29500 standard.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.ReferenceRelationship">
            <summary>
            Defines a reference relationship. A reference relationship can be internal or external.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.ReferenceRelationship.#ctor(System.IO.Packaging.PackageRelationship)">
            <summary>
            Initializes a new instance of the ReferenceRelationship.
            </summary>
            <param name="packageRelationship">The source PackageRelationship.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.ReferenceRelationship.#ctor(System.Uri,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the ReferenceRelationship.
            </summary>
            <param name="relationshipType">The relationship type of the relationship.</param>
            <param name="targetUri">The target uri of the relationship.</param>
            <param name="id">The relationship ID.</param>
            <param name="isExternal">A value that indicates whether the target of the relationship is Internal or External to the Package.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.ReferenceRelationship.Container">
            <summary>
            Gets the owner <see cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer"/> that holds the <see cref="T:DocumentFormat.OpenXml.Packaging.ReferenceRelationship"/>.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.ReferenceRelationship.RelationshipType">
            <summary>
            Gets the relationship type.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.ReferenceRelationship.IsExternal">
            <summary>
            Gets a value indicating whether the target of the relationship is Internal or External to the <see cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackage"/>.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.ReferenceRelationship.Id">
            <summary>
            Gets the relationship ID.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.ReferenceRelationship.Uri">
            <summary>
            Gets the target URI of the relationship.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Packaging.VideoReferenceRelationship">
            <summary>
            Represents an internal video reference relationship to a MediaDataPart element.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Packaging.VideoReferenceRelationship.RelationshipTypeConst">
            <summary>
            Represents the fixed value of the RelationshipType.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.VideoReferenceRelationship.VideoReferenceRelationshipType">
            <summary>
            Gets the source relationship type for an audio reference.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.VideoReferenceRelationship.#ctor(DocumentFormat.OpenXml.Packaging.MediaDataPart,System.String)">
            <summary>
            Initializes a new instance of the VideoReferenceRelationship class using the supplied
            MediaDataPart and relationship ID.
            </summary>
            <param name="mediaDataPart">The target DataPart of the reference relationship.</param>
            <param name="id">The relationship ID.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.Packaging.VideoReferenceRelationship.RelationshipType">
            <summary>
            Gets the relationship type for a video reference.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Packaging.WriteableStreamExtensions.EnableWriteableStream(DocumentFormat.OpenXml.Features.IFeatureCollection)">
            <summary>
            Attempts to replace the underlying stream so that we can modify it even in readonly situations via a copy
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.FileFormatVersionExtensions.Any(DocumentFormat.OpenXml.FileFormatVersions)">
            <summary>
            Determines whether the supplied version is within the known set of versions
            </summary>
            <param name="version">The version to check</param>
            <returns>True if a known version, otherwise false</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.FileFormatVersionExtensions.All(DocumentFormat.OpenXml.FileFormatVersions)">
            <summary>
            Determines if the supplied version is valid for all versions
            </summary>
            <param name="version">The version to check</param>
            <returns>True if the version is all of the known versions, otherwise false</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.FileFormatVersionExtensions.AndLater(DocumentFormat.OpenXml.FileFormatVersions)">
            <summary>
            Combines values for the given version and all versions that come after it
            </summary>
            <param name="version">Version to which all other versions are added</param>
            <returns>A version instance with <paramref name="version"/> and all later versions</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.FileFormatVersionExtensions.ThrowIfNotInVersion(DocumentFormat.OpenXml.FileFormatVersions,DocumentFormat.OpenXml.Packaging.OpenXmlPart)">
            <summary>
            Throws if the <see cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPart"/> is not supported in the given version
            </summary>
            <param name="version">Version to check</param>
            <param name="part">Part to validate</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.FileFormatVersionExtensions.ThrowIfNotInVersion(DocumentFormat.OpenXml.FileFormatVersions,DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Throws if the <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/> is not supported in the given version
            </summary>
            <param name="version">Version to check</param>
            <param name="element">Element to validate</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.FileFormatVersionExtensions.AtLeast(DocumentFormat.OpenXml.FileFormatVersions,DocumentFormat.OpenXml.FileFormatVersions)">
            <summary>
            Check if a given version is at least a specified version
            </summary>
            <param name="version">Version to check</param>
            <param name="minimum">Minimum version expected</param>
            <returns>True if supplied version is at least of the specified version, otherwise false</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.FileFormatVersionExtensions.Includes(DocumentFormat.OpenXml.FileFormatVersions,DocumentFormat.OpenXml.FileFormatVersions)">
            <summary>
            Determines whether the source FileFormatVersions includes the target FileFormatVersions.
            </summary>
            <param name="source">The source FileFormatVersions to be tested.</param>
            <param name="target">The target FileFormatVersions be tested against.</param>
            <returns>Returns true when (source &amp; target) == target.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.FileFormatVersionExtensions.ThrowExceptionIfFileFormatNotSupported(DocumentFormat.OpenXml.FileFormatVersions,System.String)">
            <summary>
            Throws an ArgumentOutOfRangeException if the specified FileFormatVersions is not supported.
            </summary>
            <param name="fileFormat">The specified FileFormatVersions.</param>
            <param name="parameterName">The name of the parameter for ArgumentOutOfRangeException.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.FileFormatVersions">
            <summary>
            Defines the Office Open XML file format version.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.FileFormatVersions.None">
            <summary>
            Represents an invalid value which will cause an exception.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.FileFormatVersions.Office2007">
            <summary>
            Represents Microsoft Office 2007.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.FileFormatVersions.Office2010">
            <summary>
            Represents Microsoft Office 2010.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.FileFormatVersions.Office2013">
            <summary>
            Represents Microsoft Office 2013.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.FileFormatVersions.Office2016">
            <summary>
            Represents Microsoft Office 2016.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.FileFormatVersions.Office2019">
            <summary>
            Represents Microsoft Office 2019.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.FileFormatVersions.Office2021">
            <summary>
            Represents Microsoft Office 2021.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.FileFormatVersions.Microsoft365">
            <summary>
            Represents Microsoft 365.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Framework.Metadata.ElementFactoryCollection">
            <summary>
            A lookup that identifies properties on an <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/> and caches the schema information
            from those elements.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Framework.OpenXmlNamespace">
            <summary>
            A structure that defines a namespace.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Framework.OpenXmlNamespace.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.Framework.OpenXmlNamespace"/> struct.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Framework.OpenXmlNamespace.Uri">
            <summary>
            Gets the URI of the namespace
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Framework.OpenXmlNamespace.IsEmpty">
            <summary>
            Gets a value indicating whether <see cref="P:DocumentFormat.OpenXml.Framework.OpenXmlNamespace.Uri"/> is empty or not.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Framework.OpenXmlNamespace.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.Framework.OpenXmlNamespace.Equals(DocumentFormat.OpenXml.Framework.OpenXmlNamespace)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.Framework.OpenXmlNamespace.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.Framework.OpenXmlNamespace.ToString">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.Framework.OpenXmlNamespace.CompareTo(DocumentFormat.OpenXml.Framework.OpenXmlNamespace)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.Framework.OpenXmlNamespace.op_Implicit(System.String)~DocumentFormat.OpenXml.Framework.OpenXmlNamespace">
            <summary>
            Implicitly convert a string to a namespace.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName">
            <summary>
            A structure that defines a fully qualified name with a namespace and name.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName.Namespace">
            <summary>
            Gets the namespace of the qualified name.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName.Name">
            <summary>
            Gets the name of the qualified name.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName.CompareTo(DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName.ToString">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName.Equals(DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.Framework.PartConstraintRule.RelationshipType">
            <summary>
            Gets the relationship type.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Framework.PartConstraintRule.ContentType">
            <summary>
            Gets the content type of the part. Some types with fixed content types have
            same relationship type but different content type.
            </summary>
            <remarks>This value is null for non-fixed content type.</remarks>
        </member>
        <member name="P:DocumentFormat.OpenXml.Framework.PartConstraintRule.MinOccursIsNonZero">
            <summary>
            Gets a value indicating whether the min occurs > 0, (i.e. is required).
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Framework.PartConstraintRule.MaxOccursGreatThanOne">
            <summary>
            Gets a value indicating whether max occurs > 1, (i.e. has multiple occurrences).
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Framework.PartConstraintRule.FileFormat">
            <summary>
            Gets the file format version information.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Framework.ReservedElementTypeIds.IsStrongTypedElement(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Test whether the element is a strong typed element - the class is generated by CodeGen.
            </summary>
            <param name="element">The specified element.</param>
            <returns>True if the class of the element is generated.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Framework.Schema.ParticleCollection">
            <summary>
            This struct represents a way to access elements in a structured way based on its compiled particle.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Framework.Schema.ParticleCollection.Clear">
            <summary>
            Clears any elements that compare as equal based on the schema particles. For example, equivalent choice
            items will be removed.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Framework.Schema.ParticleCollection.IsNil">
            <summary>
            Gets a value indicating whether the collection has value or not.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Framework.Schema.ParticleCollection.Add(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Adds an element into the collection at the appropriate location.
            </summary>
            <param name="value">Element to add.</param>
            <returns><c>true</c> if the element was added, and <c>false</c> if not.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Framework.Schema.ParticleCollection.Contains(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Gets whether the <paramref name="item"/> exists in the collection.
            </summary>
            <param name="item">The item to search for.</param>
            <returns><c>true</c> if the element was found, and <c>false</c> if not.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Framework.Schema.ParticlePath.Equals(DocumentFormat.OpenXml.Framework.Schema.ParticlePath)">
            <summary>
            Checks if two <see cref="T:DocumentFormat.OpenXml.Framework.Schema.ParticlePath"/> instances are the same. They may not have the exact same sequence, but if they are replaceable, then they are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Framework.ParticleExtensions">
            <summary>
            These extensions are set up so that it is easier to test a <see cref="T:DocumentFormat.OpenXml.Framework.CompiledParticle"/> against an <see cref="T:DocumentFormat.OpenXml.OpenXmlCompositeElement"/>.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Framework.OfficeVersionValidator.OfficeVersion">
            <summary>
            Gets the Office version of the available property.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Framework.OfficeVersionValidator.#ctor(DocumentFormat.OpenXml.FileFormatVersions)">
            <summary>
            Initializes a new instance of the OfficeAvailabilityAttribute class.
            </summary>
            <param name="officeVersion">The Office version where this class or property is available.
            If there is more than one version, use bitwise OR to specify multiple versions.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.Framework.RequiredValidator">
            <summary>
            Describes a required item.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Framework.HashCode">
            <summary>
            A helpful utility to generate hashcodes. This is in box in .NET Core 2.1 and .NET Standard 2.1 (and later versions)
            but this provides support for down-level. This does not implement as sophisticated an algorithm as that version does,
            but this should be sufficient for most use cases.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.InvalidMCContentException">
            <summary>
            The exception that is thrown for Markup Compatibility content errors.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.InvalidMCContentException.#ctor">
            <summary>
            Initializes a new instance of the InvalidMCContentException class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.InvalidMCContentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InvalidMCContentException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.InvalidMCContentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InvalidMCContentException class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.InvalidMCContentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InvalidMCContentException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.MarkupCompatibilityAttributes">
            <summary>
            Defines the Markup Compatibility Attributes.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.MarkupCompatibilityAttributes.Ignorable">
            <summary>
            Gets or sets a whitespace-delimited list of prefixes, where each
             prefix identifies an ignorable namespace.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.MarkupCompatibilityAttributes.ProcessContent">
            <summary>
            Gets or sets a whitespace-delimited list of element-qualified names
             that identify the expanded names of elements. The content of the
             elements shall be processed, even if the elements themselves are
             ignored.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.MarkupCompatibilityAttributes.PreserveElements">
            <summary>
            Gets or sets a whitespace-delimited list of element qualified names
             that identify the expanded names of elements. The elements are suggested
             by a markup producer for preservation by markup editors, even if
             the elements themselves are ignored.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.MarkupCompatibilityAttributes.PreserveAttributes">
            <summary>
            Gets or sets a whitespace-delimited list of attribute qualified names
             that identify expanded names of attributes. The attributes were
             suggested by a markup producer for preservation by markup editors.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.MarkupCompatibilityAttributes.MustUnderstand">
            <summary>
            Gets or sets a whitespace-delimited list of prefixes that identify
             a set of namespace names.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.MarkupCompatibilityAttributes.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.MarkupCompatibilityAttributes.Equals(DocumentFormat.OpenXml.MarkupCompatibilityAttributes)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.MarkupCompatibilityAttributes.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.MCContext.PushMCAttributes2(DocumentFormat.OpenXml.MarkupCompatibilityAttributes,DocumentFormat.OpenXml.MCContext.LookupNamespace)">
            <summary>
            This method is for MC validation use. Only push Ignorable and ProcessContent.
            </summary>
            <param name="attr"></param>
            <param name="lookupNamespaceDelegate"></param>
        </member>
        <member name="M:DocumentFormat.OpenXml.MCContext.PopMCAttributes2">
            <summary>
            This method is for MC validation use only.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.MCContext.OnInvalidValue">
            <summary>
            This method is called by ParseQNameList() and ParsePrefixList().
            </summary>
            <param name="value">The value of the attribute.</param>
            <returns>True to stop parsing; False to continue.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.MCContext.OnMcContextError(System.String)">
            <summary>
            This method is called by ParseIgnorable() and ParseProcessContent().
            </summary>
            <param name="value">The value of the attribute.</param>
            <returns>True to stop parsing; False to continue.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.NamespaceNotUnderstandException">
            <summary>
            The exception that is thrown for Markup Compatibility content errors.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.NamespaceNotUnderstandException.#ctor">
            <summary>
            Initializes a new instance of the InvalidMCContentException class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.NamespaceNotUnderstandException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InvalidMCContentException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.NamespaceNotUnderstandException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InvalidMCContentException class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.NamespaceNotUnderstandException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InvalidMCContentException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlAttribute">
            <summary>
            Represents an Open XML attribute.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the OpenXmlAttribute structure using the supplied qualified name, namespace URI, and text value.
            </summary>
            <param name="qualifiedName">The qualified attribute name.</param>
            <param name="namespaceUri">The namespace URI of the attribute.</param>
            <param name="value">The text value of the attribute.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the OpenXmlAttribute structure using the supplied namespace prefix, local name, namespace URI, and text value.
            </summary>
            <param name="prefix">The namespace prefix of the attribute. </param>
            <param name="localName">The local name of the attribute.</param>
            <param name="namespaceUri">The namespace URI of the attribute.</param>
            <param name="value">The text value of the attribute.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlAttribute.NamespaceUri">
            <summary>
            Gets the namespace URI of the current attribute.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlAttribute.LocalName">
            <summary>
            Gets the local name of the attribute.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlAttribute.Prefix">
            <summary>
            Gets the namespace prefix of the current attribute.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlAttribute.Value">
            <summary>
            Gets the text value of the attribute.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlAttribute.XmlQualifiedName">
            <summary>
            Gets the qualified name of the attribute.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlAttribute.XName">
            <summary>
            Gets the qualified name of the current attribute.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlAttribute.Equals(DocumentFormat.OpenXml.OpenXmlAttribute)">
            <summary>
            Determines if this instance of an OpenXmlAttribute structure is equal to the specified instance of an OpenXmlAttribute structure.
            </summary>
            <param name="other">An instance of an OpenXmlAttribute structure.</param>
            <returns>Returns true if instances are equal; otherwise, returns false.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlAttribute.op_Equality(DocumentFormat.OpenXml.OpenXmlAttribute,DocumentFormat.OpenXml.OpenXmlAttribute)">
            <summary>
            Determines if two instances of OpenXmlAttribute structures are equal.
            </summary>
            <param name="attribute1">The first instance of an OpenXmlAttribute structure.</param>
            <param name="attribute2">The second instance of an OpenXmlAttribute structure.</param>
            <returns>Returns true if all corresponding members are equal; otherwise, returns false.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlAttribute.op_Inequality(DocumentFormat.OpenXml.OpenXmlAttribute,DocumentFormat.OpenXml.OpenXmlAttribute)">
            <summary>
            Determines if two instances of OpenXmlAttribute structures are not equal.
            </summary>
            <param name="attribute1">The first instance of an OpenXmlAttribute structure.</param>
            <param name="attribute2">The second instance of an OpenXmlAttribute structure.</param>
            <returns>Returns true if some corresponding members are different; otherwise, returns false.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlAttribute.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is a OpenXmlAttribute structure and if so, indicates whether it is equal to this instance of an OpenXmlAttribute structure.
            </summary>
            <param name="obj">An Object.</param>
            <returns>Returns true if obj is an OpenXmlAttribute structure and it is equal to this instance of an OpenXmlAttribute structure; otherwise, returns false.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlAttribute.GetHashCode">
            <summary>
            Gets the hash code for this instance of an OpenXmlAttribute structure.
            </summary>
            <returns>The hash code for this instance of an OpenXmlAttribute structure.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlCompositeElement">
            <summary>
            Represents the base class for composite elements.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.#ctor">
            <summary>
            Initializes a new instance of the OpenXmlCompositeElement class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the OpenXmlCompositeElement class using the supplied outer XML.
            </summary>
            <param name="outerXml">The outer XML of the element.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.#ctor(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement})">
            <summary>
            Initializes a new instance of the OpenXmlCompositeElement class using the supplied collection of OpenXmlElement elements.
            </summary>
            <param name="childrenElements">A collection of OpenXmlElement elements.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.#ctor(DocumentFormat.OpenXml.OpenXmlElement[])">
            <summary>
            Initializes a new instance of the OpenXmlCompositeElement using the supplied array of OpenXmlElement elements.
            </summary>
            <param name="childrenElements">An array of OpenXmlElement elements.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlCompositeElement.FirstChild">
            <summary>
            Gets the first child of the current OpenXmlElement element.
            </summary>
            <remarks>
            Returns null (Nothing in Visual Basic) if there is no such OpenXmlElement element.
            </remarks>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlCompositeElement.LastChild">
            <summary>
            Gets the last child of the current OpenXmlElement element.
            Returns null (Nothing in Visual Basic) if there is no such OpenXmlElement element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlCompositeElement.HasChildren">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlCompositeElement.InnerText">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlCompositeElement.InnerXml">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.AddChild(DocumentFormat.OpenXml.OpenXmlElement,System.Boolean)">
            <summary>
            Adds the specified element to the element if it is a known child. This adds the element in the correct location according to the schema.
            </summary>
            <param name="newChild">The OpenXmlElement element to append.</param>
            <param name="throwOnError">A flag to indicate if the method should throw if the child could not be added.</param>
            <returns>Success if the element was added, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.AppendChild``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.InsertAfter``1(``0,DocumentFormat.OpenXml.OpenXmlElement)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.InsertBefore``1(``0,DocumentFormat.OpenXml.OpenXmlElement)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.InsertAt``1(``0,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.PrependChild``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.RemoveChild``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.RemoveAllChildren">
            <summary>
            Removes all of the current element's child elements.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.ReplaceChild``1(DocumentFormat.OpenXml.OpenXmlElement,``0)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.WriteContentTo(System.Xml.XmlWriter)">
            <summary>
            Saves all of the current node's children to the specified XmlWriter.
            </summary>
            <param name="w">The XmlWriter at which to save the child nodes. </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.ElementInsertingEvent(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Fires the ElementInserting event.
            </summary>
            <param name="element">The OpenXmlElement element to insert.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.ElementInsertedEvent(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Fires the ElementInserted event.
            </summary>
            <param name="element">The OpenXmlElement element to insert.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.ElementRemovingEvent(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Fires the ElementRemoving event.
            </summary>
            <param name="element">The OpenXmlElement element to remove.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.ElementRemovedEvent(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Fires the ElementRemoved event.
            </summary>
            <param name="element">The OpenXmlElement element to be removed.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.Populate(System.Xml.XmlReader,DocumentFormat.OpenXml.OpenXmlLoadMode)">
            <summary>
            Populates the XML into a strong typed DOM tree.
            </summary>
            <param name="xmlReader">The XmlReader to read the XML content.</param>
            <param name="loadMode">Specifies a load mode that is either lazy or full.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlDomReader">
            <summary>
            Represents the Open XML document reader class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlDomReader.#ctor(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Initializes a new instance of the OpenXmlDomReader class.
            </summary>
            <param name="openXmlElement">The OpenXmlElement to read.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlDomReader.#ctor(DocumentFormat.OpenXml.OpenXmlElement,System.Boolean)">
            <summary>
            Initializes a new instance of the OpenXmlDomReader class using the supplied OpenXmlElement and Boolean values.
            </summary>
            <param name="openXmlElement">The OpenXmlElement to read.</param>
            <param name="readMiscNodes">Specify false to indicate to the reader to skip all miscellaneous nodes. The default value is false.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlDomReader.Attributes">
            <summary>
            Gets the list of attributes of the current element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlDomReader.NamespaceDeclarations">
            <summary>
            Gets the namespace declarations of the current element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlDomReader.ElementType">
            <summary>
            Gets the type of the corresponding strong typed class of the current element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlDomReader.IsMiscNode">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlDomReader.IsStartElement">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlDomReader.IsEndElement">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlDomReader.Depth">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlDomReader.EOF">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlDomReader.LocalName">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlDomReader.NamespaceUri">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlDomReader.Prefix">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlDomReader.Read">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlDomReader.ReadFirstChild">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlDomReader.ReadNextSibling">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlDomReader.Skip">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlDomReader.MoveToNextElement">
            <summary>
            Move to next element
            </summary>
            <returns>true if the next element was read successfully; false if there are no more elements to read. </returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlDomReader.MoveToFirstChild">
            <summary>
            Move to first child
            </summary>
            <returns>true if the first child element was read successfully; false if there are no child elements to read. </returns>
            <remarks>Only can be called on element start. Current will move to the end tag if no child element.</remarks>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlDomReader.MoveToNextSibling">
            <summary>
            Move to  next sibling element
            </summary>
            <returns>true if the next sibling element was read successfully; false if there are no more sibling elements to read. </returns>
            <remarks>Current will move to the end tag of the parent if no more sibling element.</remarks>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlDomReader.InnerSkip">
            <summary>
            Skips the children of the current node.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlDomReader.LoadCurrentElement">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlDomReader.GetText">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlDomReader.Close">
            <inheritdoc/>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlElement">
            <summary>
            Represents a base class that all elements in an Office Open XML document derive from.
            </summary>
            <remarks>
            Annotations will not be cloned when calling <see cref="M:DocumentFormat.OpenXml.OpenXmlElement.Clone"/> and <see cref="M:DocumentFormat.OpenXml.OpenXmlElement.CloneNode(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.Features">
            <summary>
            Gets a <see cref="T:DocumentFormat.OpenXml.Features.IFeatureCollection"/> for the current element. This feature collection will be read-only, but will inherit features from its parent part and package if available.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.#ctor">
            <summary>
            Initializes a new instance of the OpenXmlElement class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the OpenXmlElement class using the supplied outer XML of the element.
            </summary>
            <param name="outerXml">The outer XML of the element.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.Next">
            <summary>
            Gets or sets the next element in the linked list.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.XmlParsed">
            <summary>
            Gets a value indicating whether the inner raw xml is parsed.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.RawOuterXml">
            <summary>
            Gets or sets the raw OuterXml.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.RawState">
            <summary>
            Gets an array of fixed attributes (attributes that are defined in the schema) without forcing any parsing of the element.
            If parsing is required, please use <see cref="P:DocumentFormat.OpenXml.OpenXmlElement.ParsedState"/>
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.ParsedState">
            <summary>
            Gets an array of fixed attributes which will be parsed out if they are not yet parsed. If parsing is not required, please
            use <see cref="P:DocumentFormat.OpenXml.OpenXmlElement.RawState"/>.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.OpenXmlElementContext">
            <summary>
            Gets the OpenXmlElementContext of the current element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.RootElementContext">
            <summary>
            Gets the OpenXmlElementContext from the root element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.FirstChild">
            <summary>
            Gets the first child of the OpenXmlElement element.
            Returns null (Nothing in Visual Basic) if there is no such OpenXmlElement element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.LastChild">
            <summary>
            Gets the last child of the OpenXmlElement element.
            Returns null (Nothing in Visual Basic) if there is no such OpenXmlElement element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.HasAttributes">
            <summary>
            Gets a value indicating whether the current element has any attributes.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.ExtendedAttributes">
            <summary>
            Gets all extended attributes (attributes not defined in the schema) of the current element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.HasChildren">
            <summary>
            Gets a value indicating whether the current element has any child elements.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.ChildElements">
            <summary>
            Gets all the child nodes of the current element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.Parent">
            <summary>
            Gets the parent element of the current element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.NamespaceUri">
            <summary>
            Gets the namespace URI of the current element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.LocalName">
            <summary>
            Gets the local name of the current element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.Prefix">
            <summary>
            Gets the namespace prefix of current element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.NamespaceDeclarations">
            <summary>
            Gets all the namespace declarations defined in the current element. Returns an empty enumerator if there is no namespace declaration.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.XmlQualifiedName">
            <summary>
            Gets the qualified name of the current element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.XName">
            <summary>
            Gets the qualified name of the current element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.InnerText">
            <summary>
            Gets or sets the concatenated values of the node and all of its children.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.InnerXml">
            <summary>
            Gets or sets the markup that represents only the child elements of the current element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.OuterXml">
            <summary>
            Gets the markup that represents the current element and all of its child elements.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.GetAttribute(System.String,System.String)">
            <summary>
            Gets an Open XML attribute with the specified tag name and namespace URI.
            </summary>
            <param name="localName">The tag name.</param>
            <param name="namespaceUri">The namespace URI.</param>
            <returns>Returns a clone of the OpenXmlAttribute with local name equal to "localName" and namespace URI equal to "namespaceUri".</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the "localName" is empty.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">When the element does not have the specified attribute.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.GetAttributes">
            <summary>
            Gets a list that contains a copy of all the attributes.
            </summary>
            <returns>A list of attributes. Return an empty list if there are no attributes.</returns>
            <remarks>The returned list is a non-live copy.</remarks>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.SetAttribute(DocumentFormat.OpenXml.OpenXmlAttribute)">
            <summary>
            Sets an attribute to the specified element.
            If the attribute is a known attribute, the value of the attribute is set.
            If the attribute is an extended attribute, the 'openxmlAttribute' is added to the extended attributes list.
            </summary>
            <param name="openXmlAttribute">The attribute to be set on the element.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the LocalName of the "openxmlAttribute" parameter is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when an attempt to set a namespace declaration is made.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.RemoveAttribute(System.String,System.String)">
            <summary>
            Removes the attribute from the current element.
            </summary>
            <param name="localName">The local name of the attribute.</param>
            <param name="namespaceUri">The namespace URI of the attribute.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the localName is empty.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.SetAttributes(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlAttribute})">
            <summary>
            Sets a number of attributes to the element.
            If an attribute is a known attribute, the value of the attribute is set.
            If an attribute is an extended attribute, the 'openxmlAttribute' is added to the extended attributes list.
            </summary>
            <param name="openXmlAttributes">The attributes to be set on the element.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.ClearAllAttributes">
            <summary>
            Clears all of the attributes, including both known attributes and extended attributes.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.AddNamespaceDeclaration(System.String,System.String)">
            <summary>
            Adds a namespace declaration to the current node.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="uri">The uri.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the prefix is already used in the current node.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.RemoveNamespaceDeclaration(System.String)">
            <summary>
            Removes the namespace declaration for the specified prefix. Removes nothing if there is no prefix.
            </summary>
            <param name="prefix"></param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.GetFirstChild``1">
            <summary>
            Finds the first child element in type T.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <returns></returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.PreviousSibling">
            <summary>
            Gets the OpenXmlElement element that immediately precedes the current OpenXmlElement element.
            Returns null (Nothing in Visual Basic ) if there is no preceding OpenXmlElement element.
            </summary>
            <returns>The OpenXmlElement element that immediately precedes the current OpenXmlElement element.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.PreviousSibling``1">
            <summary>
            Gets the OpenXmlElement element with the specified type that precedes the current OpenXmlElement.
            Returns null (Nothing in Visual Basic) if there is no preceding OpenXmlElement element.
            </summary>
            <returns>The OpenXmlElement element with the specified type that precedes the current OpenXmlElement element.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.NextSibling">
            <summary>
            Gets the OpenXmlElement element that immediately follows the current OpenXmlElement element.
            Returns null (Nothing in Visual Basic) if there is no next OpenXmlElement element.
            </summary>
            <returns>The OpenXmlElement element that immediately follows the current OpenXmlElement element.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.NextSibling``1">
            <summary>
            Gets the OpenXmlElement element with the specified type that follows the current OpenXmlElement element.
            Returns null (Nothing in Visual Basic) if there is no next OpenXmlElement.
            </summary>
            <returns>The OpenXmlElement element with the specified type that follows the current OpenXmlElement element.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.Ancestors">
            <summary>
            Enumerates all of the current element's ancestors.
            </summary>
            <returns>An IEnumerable object that contains a list of the current OpenXmlElement element's ancestors.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.Ancestors``1">
            <summary>
            Enumerates only the current element's ancestors that have the specified type.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <returns>An IEnumerable object that contains a list of the current OpenXmlElement element's ancestors.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.Elements``1">
            <summary>
            Enumerates only the current element's children that have the specified type.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.Elements">
            <summary>
            Enumerates all of the current element's children.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.Descendants``1">
            <summary>
            Enumerate all of the current element's descendants of type T.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.Descendants">
            <summary>
            Enumerates all of the current element's descendants.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.ElementsBefore">
            <summary>
            Enumerates all of the sibling elements that precede the current element and have the same parent as the current element.
            </summary>
            <returns>An IEnumerable object that contains a list of OpenXmlElement elements.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.ElementsAfter">
            <summary>
            Enumerates all of the sibling elements that follow the current element and have the same parent as the current element.
            </summary>
            <returns>An IEnumerable object that contains a list of OpenXmlElement elements.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.CloneNode(System.Boolean)">
            <summary>
            When overridden in a derived class, creates a duplicate of the node.
            </summary>
            <param name="deep">True to recursively clone the subtree under the specified node; false to clone only the node itself. </param>
            <returns>The cloned node. </returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Saves the current node to the specified XmlWriter.
            </summary>
            <param name="xmlWriter">The XmlWriter to which to save the current node. </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.Append(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement})">
            <summary>
            Appends each element from a list of elements to the end of the current element's list of child elements.
            </summary>
            <param name="newChildren">The list that contains the OpenXmlElement elements to be appended.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.Append(DocumentFormat.OpenXml.OpenXmlElement[])">
            <summary>
            Appends each element from an array of elements to the end of the current element's list of child elements.
            </summary>
            <param name="newChildren">The array of <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/> elements to be appended.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.AppendChild``1(``0)">
            <summary>
            Appends the specified element to the end of the current element's list of child nodes.
            </summary>
            <param name="newChild">The <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/> element to append.</param>
            <returns>The <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/> element that was appended. </returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.InsertAfter``1(``0,DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Inserts the specified element immediately after the specified reference element.
            </summary>
            <param name="newChild">The <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/> element to insert.</param>
            <param name="referenceChild">The reference <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/> element. <paramref name="newChild"/> is placed after <paramref name="referenceChild"/>. </param>
            <returns>The <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/> element that was inserted.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.InsertBefore``1(``0,DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Inserts the specified element immediately before the specified reference element.
            </summary>
            <param name="newChild">The <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/> element to insert.</param>
            <param name="referenceChild">The reference <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/> element. <paramref name="newChild"/> is placed before <paramref name="referenceChild"/>.</param>
            <returns>The <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/> element that was inserted.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.InsertAfterSelf``1(``0)">
            <summary>
            Inserts the specified element immediately after the current element.
            </summary>
            <param name="newElement">The new element to insert.</param>
            <returns>The inserted element.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="newElement"/> parameter is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the parent is a null reference.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.InsertBeforeSelf``1(``0)">
            <summary>
            Inserts the specified element immediately before the current element.
            </summary>
            <param name="newElement">The new element to insert.</param>
            <returns>The inserted element.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="newElement"/> parameter is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the parent is a null reference.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.InsertAt``1(``0,System.Int32)">
            <summary>
            Inserts the specified element at the specified index in the current element's list of child elements.
            </summary>
            <param name="newChild">The <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/> element to insert.</param>
            <param name="index">The zero-based index where the element is to be inserted.</param>
            <returns>The <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/> element that was inserted.</returns>
            <remarks>Returns <c>null</c>if <paramref name="newChild"/> equals <c>null</c>.</remarks>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.PrependChild``1(``0)">
            <summary>
            Inserts the specified element at the beginning of the current element's list of child elements.
            </summary>
            <param name="newChild">The <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/> element to add.</param>
            <returns>The <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/> element that was added.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.RemoveChild``1(``0)">
            <summary>
            Removes the specified child element from the current element's list of child elements.
            </summary>
            <param name="oldChild">The child element to remove. </param>
            <returns>The element that was removed. </returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.ReplaceChild``1(DocumentFormat.OpenXml.OpenXmlElement,``0)">
            <summary>
            Replaces a child element with another child element in the current element's list of child elements.
            </summary>
            <param name="newChild">The new child element to put in the list.</param>
            <param name="oldChild">The child element to replace in the list.</param>
            <returns>The <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/> element that was replaced.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.RemoveAllChildren">
            <summary>
            Removes all of the current element's child elements.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.RemoveAllChildren``1">
            <summary>
            Remove all of the current element's child elements that are of type T.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.Remove">
            <summary>
            Removes the current element from its parent.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the parent is a null reference.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.IsAfter(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Determines if the current element appears after a specified element in document order.
            </summary>
            <param name="element">The element to compare for order.</param>
            <returns>Returns true if the current element appears after the specified element in document order; otherwise returns false.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.IsBefore(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Determines if the current element appears before a specified element in document order.
            </summary>
            <param name="element">The element to compare for order.</param>
            <returns>Returns true if the current element appears before the specified element in document order; otherwise returns false.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.GetOrder(DocumentFormat.OpenXml.OpenXmlElement,DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Gets the order of the two specified elements in document order.
            </summary>
            <param name="element1">The first element to compare for order.</param>
            <param name="element2">The second element to compare for order.</param>
            <returns></returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.WriteContentTo(System.Xml.XmlWriter)">
            <summary>
            Saves all of the children of the current node to the specified XmlWriter.
            </summary>
            <param name="w">The XmlWriter at which to save the child nodes. </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.TrySetFixedAttribute(DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName@,System.String,System.Boolean)">
            <summary>
            Attempts to set the attribute to a known attribute.
            </summary>
            <param name="qname"></param>
            <param name="value"></param>
            <param name="strictRelationshipFound"></param>
            <returns>true if the attribute is a known attribute.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.PushMcContext(System.Xml.XmlReader)">
            <summary>
            Reads MC attributes from the xmlReader and than pushes MC Context on needed.
            This xmlReader will keeps on the element start after this method.
            </summary>
            <param name="xmlReader">This method screen all attribute from xmlReader, and then set the xmlReader back to the element start.</param>
            <returns>Returns true if a MCAttributes is pushed.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.CheckMustUnderstandAttr(System.Xml.XmlReader,DocumentFormat.OpenXml.MarkupCompatibilityAttributes,DocumentFormat.OpenXml.Packaging.MarkupCompatibilityProcessSettings)">
            <summary>
            If this is a normal node, check <c>mustunderstand</c> attribute at load time
            </summary>
            <param name="reader">The XmlReader.</param>
            <param name="mcAttributes">The MarkupCompatibilityAttributes.</param>
            <param name="mcSettings">The MarkupCompatibilityProcessSettings.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.CheckMustUnderstandAttr">
            <summary>
            If this is a node in ACB, check <c>mustunderstand</c> after load
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.InitialVersion">
            <summary>
            Gets a value that indicates the version in which the current element was introduced.
            For strong typed element, the return value will be generated according to the schema.
            For <see cref="T:DocumentFormat.OpenXml.OpenXmlUnknownElement"/>, always returns <c>false</c>
            For <see cref="T:DocumentFormat.OpenXml.OpenXmlMiscNode"/>, always returns <c>true</c>
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.AddAnnotation(System.Object)">
            <summary>
            Adds an object to the current OpenXmlElement element's list of annotations.
            </summary>
            <param name="annotation">The annotation to add to the current OpenXmlElement element.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.Annotation``1">
            <summary>
            Get the first annotation object of the specified type from the current OpenXmlElement element.
            </summary>
            <typeparam name="T">The type of the annotation to retrieve.</typeparam>
            <returns>The first annotation object of the specified type.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.Annotation(System.Type)">
            <summary>
            Get the first annotation object of the specified type from the current OpenXmlElement element.
            </summary>
            <param name="type">The type of the annotation to retrieve.</param>
            <returns>The first annotation object with the specified type.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.Annotations``1">
            <summary>
            Gets a collection of annotations with the specified type for the current OpenXmlElement element.
            </summary>
            <typeparam name="T">The type of the annotations to retrieve.</typeparam>
            <returns>An IEnumerable(T) object that contains the annotations for current OpenXmlElement element.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.Annotations(System.Type)">
            <summary>
            Gets a collection of annotations with the specified type for the current OpenXmlElement element.
            </summary>
            <param name="type">The type of the annotations to retrieve.</param>
            <returns>An IEnumerable(T) object that contains the annotations for the current OpenXmlElement element.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.RemoveAnnotations``1">
            <summary>
            Removes the annotations with the specified type from the current OpenXmlElement element.
            </summary>
            <typeparam name="T">The type of the annotations to remove.</typeparam>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.RemoveAnnotations(System.Type)">
            <summary>
            Removes the annotations of the specified type from the current OpenXmlElement element.
            </summary>
            <param name="type">The type of the annotations to remove.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.System#Collections#Generic#IEnumerable{DocumentFormat#OpenXml#OpenXmlElement}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the child collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the child collection. </returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.Clone">
            <summary>
            Creates a duplicate of the current node.
            </summary>
            <remarks>
            Cloning an OpenXmlNode copies all attributes and their values, including those generated by the XML processor to represent defaulted attributes. This method recursively clones the node and the subtree underneath it.
            Cloning is equivalent to calling CloneNode(true).
            </remarks>
            <returns>The cloned node.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.IsXmlnsUri(System.String)">
            <summary>
            Indicates whether the specified namespace uri equals @"http://www.w3.org/2000/xmlns/".
            </summary>
            <param name="nsUri">The namespace uri.</param>
            <returns>True if nsUri == @"http://www.w3.org/2000/xmlns/".</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.IsKnownElement(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Returns true when the specified element is not an OpenXmlUnknownElement and it is not an OpenXmlMiscNode.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElement.MCAttributes">
            <summary>
            Gets or sets the markup compatibility attributes. Returns null if no markup compatibility attributes are defined for the current element.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.LoadMCAttribute(System.Xml.XmlReader)">
            <summary>
            Loads the MC attributes from the xmlReader.
            This xmlReader will keeps on the element start after this method.
            </summary>
            <param name="xmlReader">This method screen all attribute from xmlReader, and then set the xmlReader back to the element start.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.AddMCAttributes(System.Collections.Generic.List{DocumentFormat.OpenXml.OpenXmlAttribute})">
            <summary>
            Adds the MC attributes to the "attributes" collection.
            </summary>
            <param name="attributes"></param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.GetMCAttribute(System.String)">
            <summary>
            Finds the corresponding MC attribute from the attribute name.
            </summary>
            <param name="localName"></param>
            <returns></returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.LookupNamespace(System.String)">
            <summary>
            Resolves the namespace prefix in the context of the current node.
            </summary>
            <param name="prefix">The prefix to resolve.</param>
            <returns>The resolved namespace. Returns null (Nothing in Visual Basic) if the prefix cannot be resolved.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.LookupPrefix(System.String)">
            <summary>
            Finds the corresponding prefix for a namespace uri in the current element scope.
            </summary>
            <param name="namespaceUri">The namespace uri.</param>
            <returns>The corresponding prefix. Returns null (Nothing in Visual Basic) if no prefix is found.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.GetNextNonMiscElementSibling">
            <summary>
            Returns the next sibling element that is not an OpenXmlMiscNode element.
            </summary>
            <returns>The next sibling element that is not an OpenXmlMiscNode element.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.GetFirstNonMiscElementChild">
            <summary>
            Returns the first child element that is not an OpenXmlMiscNode element.
            </summary>
            <returns>The first child element that is not an OpenXmlMiscNode element.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElement.GetPartRootElement">
            <summary>
            Gets the root element of the current OpenXmlElement element.
            </summary>
            <returns>
            Returns the root element if it is an OpenXmlPartRootElement element. Returns the current element if it is an OpenXmlPartRootElement element.
            Returns null (Nothing in Visual Basic) if the current element has no parent or the root element is not an OpenXmlPartRootElement element.
            </returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlElementContext">
            <summary>
            Represents the OpenXml loading context.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElementContext.XmlReaderSettings">
            <summary>
            Gets the XmlReaderSettings to be used by internal XmlReader
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElementContext.LoadMode">
            <summary>
            Gets or sets load mode
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElementContext.LazySteps">
            <summary>
            Gets layers to be full populated, only effective when LoadMode==Lazy.
            Start from 0 (populate only the children layer). The magic number of 3
            is currently used, but could potentially be made into a public property
            so a user can control this
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElementContext.IsXmlnsUri(System.String)">
            <summary>
            Determines whether the namespace uri equals @"http://www.w3.org/2000/xmlns/".
            </summary>
            <param name="nsUri">The namespace uri.</param>
            <returns>Returns true if nsUri equals @"http://www.w3.org/2000/xmlns/".</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElementContext.ElementInsertingEvent(DocumentFormat.OpenXml.OpenXmlElement,DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Fires the ElementInserting event.
            </summary>
            <param name="element">The OpenXmlElement element to insert.</param>
            <param name="parent">The parent element.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElementContext.ElementInsertedEvent(DocumentFormat.OpenXml.OpenXmlElement,DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Fires the ElementInserted event.
            </summary>
            <param name="element">The inserted OpenXmlElement element.</param>
            <param name="parent">The parent element.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElementContext.ElementRemovingEvent(DocumentFormat.OpenXml.OpenXmlElement,DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Fires the ElementRemoving event.
            </summary>
            <param name="element">The OpenXmlElement element to remove.</param>
            <param name="parent">The parent element.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElementContext.ElementRemovedEvent(DocumentFormat.OpenXml.OpenXmlElement,DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Fires the ElementRemoved event.
            </summary>
            <param name="element">The removed OpenXmlElement element.</param>
            <param name="parent">The parent element.</param>
        </member>
        <member name="E:DocumentFormat.OpenXml.OpenXmlElementContext.ElementInserting">
            <summary>
            Occurs when an element is about to be inserted into the element hierarchy.
            </summary>
        </member>
        <member name="E:DocumentFormat.OpenXml.OpenXmlElementContext.ElementInserted">
            <summary>
            Occurs when an element has been inserted into the element hierarchy.
            </summary>
        </member>
        <member name="E:DocumentFormat.OpenXml.OpenXmlElementContext.ElementRemoving">
            <summary>
            Occurs when an element is being removed from the element hierarchy.
            </summary>
        </member>
        <member name="E:DocumentFormat.OpenXml.OpenXmlElementContext.ElementRemoved">
            <summary>
            Occurs when an element has been removed from the element hierarchy.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlElementExtensionMethods">
            <summary>
            Static class to hold extension methods for OpenXmlElement.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElementExtensionMethods.GetXPathIndex(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Get position index in same type in the ChildElements of it's parent element.
            </summary>
            <param name="element">The OpenxmlElement.</param>
            <returns>The position index in same type element in parent.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElementExtensionMethods.GetPart(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Get the part in which the element is in.
            </summary>
            <param name="element">The element.</param>
            <returns>The part in which the element is in. Returns null if not in a part.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElementExtensionMethods.GetPartUri(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Gets the URI of the part the element is in.
            </summary>
            <param name="element">The element.</param>
            <returns>The URI of the part the element is in. Returns null if not in a part.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElementExtensionMethods.GetAttributeValueEx(DocumentFormat.OpenXml.OpenXmlElement,System.String,System.String)">
            <summary>
            Get attribute value of the specified attribute.
            </summary>
            <param name="element"></param>
            <param name="localName"></param>
            <param name="namespaceUri"></param>
            <returns></returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElementExtensionMethods.TryCreateValidChild(DocumentFormat.OpenXml.OpenXmlElement,DocumentFormat.OpenXml.FileFormatVersions,System.String,System.String)">
            <summary>
            Tries to create an OpenXmlElement from the specified namespace URI and local name.
            </summary>
            <param name="parent">The parent element.</param>
            <param name="fileFormat">The specified file format version.</param>
            <param name="namespaceUri">The namespace URI of the requested child element.</param>
            <param name="localName">The local name of the requested child element.</param>
            <returns>A new OpenXmlElement if the parent element can contains a child with the specified namespace and local name. Otherwise, returns null.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlElementFunctionalExtensions">
            <summary>
            Provides extension methods for pure functional transformations.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElementFunctionalExtensions.With``1(``0,System.Object[])">
            <summary>
            Adds child elements or attributes to the given element.
            </summary>
            <typeparam name="TElement">The element type.</typeparam>
            <param name="element">The element.</param>
            <param name="content">The content to be added to the element.</param>
            <returns>The element with the content added to it.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElementFunctionalExtensions.With``1(``0,System.Object)">
            <summary>
            Adds child elements or attributes to the given element.
            </summary>
            <typeparam name="TElement">The element type.</typeparam>
            <param name="element">The element.</param>
            <param name="content">The content to be added to the element.</param>
            <returns>The element with the content added to it.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlElementList">
            <summary>
            A struct that helps enumerate the child elements of an <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/>
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElementList.#ctor(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Creates an instance of <see cref="T:DocumentFormat.OpenXml.OpenXmlElementList"/>.
            </summary>
            <param name="container"></param>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElementList.Item(System.Int32)">
            <summary>
            Gets a node at the specified index.
            </summary>
            <param name="index">Index to retrieve the element.</param>
            <returns>The element if found.</returns>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElementList.Count">
            <summary>
            Gets the number of children the element has.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElementList.GetEnumerator">
            <summary>
            Gets an <see cref="T:DocumentFormat.OpenXml.OpenXmlElementList.Enumerator"/> for the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElementList.First``1">
            <summary>
            Gets the first item of type <typeparamref name="T"/> in the children.
            </summary>
            <typeparam name="T">Type to search for.</typeparam>
            <returns>First instance if found.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElementList.Equals(DocumentFormat.OpenXml.OpenXmlElementList)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElementList.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlElementList.Enumerator">
            <summary>
            An enumerator used for <see cref="T:DocumentFormat.OpenXml.OpenXmlElementList"/>.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlElementList.Enumerator.Current">
            <summary>
            Gets the current <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/> for the enumerator.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlElementList.Enumerator.MoveNext">
            <summary>
            Moves the enumerator forward.
            </summary>
            <returns><c>true</c> if it was moved, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlLeafElement">
            <summary>
            Represents the base class from which leaf elements are derived.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlLeafElement.ShadowElement">
            <summary>
            Gets or sets represents a shadow element to hold child elements if there are any.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlLeafElement.#ctor">
            <summary>
            Initializes a new instance of the OpenXmlLeafElement class.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlLeafElement.HasChildren">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlLeafElement.InnerXml">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlLeafElement.WriteContentTo(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlLeafElement.RemoveAllChildren">
            <inheritdoc/>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlLeafTextElement">
            <summary>
            Represents the base class from which leaf elements that have text are derived.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlLeafTextElement.#ctor">
            <summary>
            Initializes a new instance of the OpenXmlLeafTextElement class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlLeafTextElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the OpenXmlLeafTextElement class using the supplied text.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlLeafTextElement.InnerTextToValue(System.String)">
            <summary>
            Convert the text into value (depends on the type defined in the schema).
            </summary>
            <param name="text">The text to convert.</param>
            <returns>An OpenXmlSimpleType value.</returns>
            <remarks>All generated classes that are derived from this class will generate this method.</remarks>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlLeafTextElement.HasChildren">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlLeafTextElement.InnerText">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlLeafTextElement.InnerXml">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlLeafTextElement.Text">
            <summary>
            Gets or sets the text of the current element.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlLeafTextElement.WriteContentTo(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlLeafTextElement.RemoveAllChildren">
            <inheritdoc/>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlLoadMode">
            <summary>
            OpenXmlLoadMode - load mode, default is Lazy
                Full - load all the OpenXmlElements recursively
                Lazy (default) - load N layer descendant elements from the current element, lazy load (cache OuterXml) for others
                        default is populate 3 layers
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.OpenXmlLoadMode.Full">
            <summary>
            Load all the OpenXmlElements recursively
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.OpenXmlLoadMode.Lazy">
            <summary>
            Load only one layer element, cache OuterXml
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlMiscNode">
            <summary>
            Represents an Open XML non element node (i.e. PT, Comments, Entity, Notation, XmlDeclaration).
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlMiscNode.#ctor(System.Xml.XmlNodeType)">
            <summary>
            Initializes a new instance of the OpenXmlMiscNode class using the
            supplied XmlNodeType value.
            </summary>
            <param name="nodeType">
            The XmlNodeType value.
            </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlMiscNode.#ctor(System.Xml.XmlNodeType,System.String)">
            <summary>
            Initializes a new instance of the OpenXmlMiscNode class using the
            supplied XmlNodeType and outer XML values.
            </summary>
            <param name="nodeType">The XmlNodeType value.</param>
            <param name="outerXml">The outer XML of the element.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlMiscNode.XmlNodeType">
            <summary>
            Gets the type of XML node.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlMiscNode.HasChildren">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlMiscNode.LocalName">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlMiscNode.NamespaceUri">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlMiscNode.Prefix">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlMiscNode.XmlQualifiedName">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlMiscNode.InnerXml">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlMiscNode.CloneNode(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlMiscNode.RemoveAllChildren">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlMiscNode.WriteContentTo(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlMiscNode.WriteTo(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlMiscNode.LazyLoad(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlMiscNode.ParseXml">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlMiscNode.LoadOuterXml(System.Xml.XmlReader)">
            <summary>
            Load the out xml from the XmlReader.
            </summary>
            <param name="xmlReader"></param>
            <remarks>The XmlReader not be moved.</remarks>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlMiscNode.LoadAttributes(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlMiscNode.Populate(System.Xml.XmlReader,DocumentFormat.OpenXml.OpenXmlLoadMode)">
            <inheritdoc/>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlPartReader">
            <summary>
            Represents the Open XML part reader class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartReader.#ctor(DocumentFormat.OpenXml.Packaging.OpenXmlPart)">
            <summary>
            Initializes a new instance of the OpenXmlPartReader class using the supplied OpenXmlPart class.
            </summary>
            <param name="openXmlPart">The OpenXmlPart to read.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartReader.#ctor(DocumentFormat.OpenXml.Packaging.OpenXmlPart,DocumentFormat.OpenXml.OpenXmlPartReaderOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.OpenXmlPartReader"/> class.
            </summary>
            <param name="openXmlPart">The <see cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPart"/> to read.</param>
            <param name="options">Options on how to read the part.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartReader.#ctor(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.Boolean)">
            <summary>
            Initializes a new instance of the OpenXmlPartReader class using the supplied OpenXmlPart and Boolean values.
            </summary>
            <param name="openXmlPart">The OpenXmlPart to read.</param>
            <param name="readMiscNodes">Specify false to indicate to the reader to skip all miscellaneous nodes. The default value is false.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartReader.#ctor(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OpenXmlPartReader class using the supplied OpenXmlPart and Boolean values.
            </summary>
            <param name="openXmlPart">The OpenXmlPart to read.</param>
            <param name="readMiscNodes">Specify false to indicate to the reader to skip all miscellaneous nodes.</param>
            <param name="ignoreWhitespace">Specify true to indicate to the reader to ignore insignificant white space.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartReader.#ctor(System.IO.Stream,DocumentFormat.OpenXml.Features.IFeatureCollection,DocumentFormat.OpenXml.OpenXmlPartReaderOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.OpenXmlPartReader"/> class.
            </summary>
            <param name="partStream">The stream for the part data.</param>
            <param name="features">A feature collection used to identify what parts and elements to create.</param>
            <param name="options">Options for how to read the <paramref name="partStream"/>.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlPartReader.Encoding">
            <summary>
            Gets the encoding of the XML file.
            </summary>
            <remarks>
            Returns null if encoding is not specified in the XML file.
            </remarks>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlPartReader.StandaloneXml">
            <summary>
            Gets the standalone property of the XML file. Returns false if there is no "standalone" in the XML declaration stream.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlPartReader.Attributes">
            <summary>
            Gets the list of attributes of the current element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlPartReader.NamespaceDeclarations">
            <summary>
            Gets the namespace declarations of the current element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlPartReader.ElementType">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlPartReader.IsMiscNode">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlPartReader.IsStartElement">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlPartReader.IsEndElement">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlPartReader.Depth">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlPartReader.EOF">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlPartReader.LocalName">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlPartReader.NamespaceUri">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlPartReader.Prefix">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartReader.Read">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartReader.ReadFirstChild">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartReader.ReadNextSibling">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartReader.Skip">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartReader.GetLineInfo">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartReader.MoveToNextElement">
            <summary>
            Moves to next element
            </summary>
            <returns>true if the next element was read successfully; false if there are no more elements to read. </returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartReader.MoveToFirstChild">
            <summary>
            Move to first child
            </summary>
            <returns>true if the first child element was read successfully; false if there are no child elements to read. </returns>
            <remarks>Only can be called on element start. Current will move to the end tag if no child element.</remarks>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartReader.MoveToNextSibling">
            <summary>
            Move to  next sibling element
            </summary>
            <returns>true if the next sibling element was read successfully; false if there are no more sibling elements to read. </returns>
            <remarks>Current will move to the end tag of the parent if no more sibling element.</remarks>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartReader.InnerSkip">
            <summary>
            Skips the children of the current node.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartReader.LoadCurrentElement">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartReader.GetText">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartReader.Close">
            <inheritdoc/>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlPartReaderOptions">
            <summary>
            A collection of options for reading part information.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlPartReaderOptions.ReadMiscellaneousNodes">
            <summary>
            Gets or sets a value indicating  whether miscellaneous nodes are read.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlPartReaderOptions.MaxCharactersInPart">
            <summary>
            Gets or sets the maximum characters allowed in a part.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlPartReaderOptions.IgnoreWhitespace">
            <summary>
            Gets or sets a value indicating whether whitespace will be ignored.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlPartReaderOptions.CloseStream">
            <summary>
            Gets or sets a value indicating whether the stream should be closed on the part reader being closed.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlPartRootElement">
            <summary>
            Represents a base class for all root elements.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartRootElement.#ctor">
            <summary>
            Initializes a new instance of the OpenXmlPartRootElement class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartRootElement.#ctor(DocumentFormat.OpenXml.Packaging.OpenXmlPart)">
            <summary>
            Initializes a new instance of the OpenXmlPartRootElement class using the supplied OpenXmlPart.
            </summary>
            <param name="openXmlPart">The OpenXmlPart class.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartRootElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the OpenXmlPartRootElement class using the supplied outer XML.
            </summary>
            <param name="outerXml">The outer XML of the element.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartRootElement.#ctor(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement})">
            <summary>
            Initializes a new instance of the OpenXmlPartRootElement class using the supplied list of child elements.
            </summary>
            <param name="childElements">All child elements.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartRootElement.#ctor(DocumentFormat.OpenXml.OpenXmlElement[])">
            <summary>
            Initializes a new instance of the OpenXmlPartRootElement class using the supplied array of child elements.
            </summary>
            <param name="childElements">All child elements</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlPartRootElement.RootElementContext">
            <summary>
            Gets the OpenXmlElementContext.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartRootElement.LoadFromPart(DocumentFormat.OpenXml.Packaging.OpenXmlPart)">
            <summary>
            Load the DOM tree from the Open XML part.
            </summary>
            <param name="openXmlPart">The part this root element to be loaded from.</param>
            <exception cref="T:System.IO.InvalidDataException">Thrown when the part contains an incorrect root element.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartRootElement.LoadFromPart(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.IO.Stream,System.Boolean)">
            <summary>
            Load the DOM tree from the Open XML part.
            </summary>
            <param name="openXmlPart">The part this root element to be loaded from.</param>
            <param name="partStream">The stream of the part.</param>
            <param name="strictRelationshipFound">Whether a strict relationship was found.</param>
            <returns>
            Returns true when the part stream is loaded successfully into this root element.
            Returns false when the part stream does not contain any xml element.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Thrown when the part stream contains an incorrect root element.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartRootElement.SaveToPart(DocumentFormat.OpenXml.Packaging.OpenXmlPart)">
            <summary>
            Save the DOM into the OpenXML part.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartRootElement.Save(System.IO.Stream)">
            <summary>
            Saves the DOM tree to the specified stream.
            </summary>
            <param name="stream">
            The stream to which to save the XML.
            </param>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlPartRootElement.OpenXmlPart">
            <summary>
            Gets the part that is associated with the DOM tree.
            It returns null when the DOM tree is not associated with a part.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartRootElement.Save">
            <summary>
            Saves the data in the DOM tree back to the part. This method can
            be called multiple times and each time it is called, the stream
            will be flushed.
            </summary>
            <remarks>
            Call this method explicitly to save the changes in the DOM tree.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the tree is not associated with a part.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartRootElement.Reload">
            <summary>
            Reloads the part content into an Open XML DOM tree. This method can
            be called multiple times and each time it is called, the tree will
            be reloaded and previous changes on the tree are abandoned.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the tree is not associated with a part.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartRootElement.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Saves the current node to the specified XmlWriter.
            </summary>
            <param name="xmlWriter">
            The XmlWriter to which to save the current node.
            </param>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlPartRootElement.WriteAllNamespaceOnRoot">
            <summary>
            Gets a value indicating whether the Save method will try write all namespace declaration on the root element.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlPartWriter">
            <summary>
            Defines the OpenXmlPartWriter.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartWriter.#ctor(DocumentFormat.OpenXml.Packaging.OpenXmlPart)">
            <summary>
            Initializes a new instance of the OpenXmlPartWriter.
            </summary>
            <param name="openXmlPart">The OpenXmlPart to be written to.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartWriter.#ctor(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the OpenXmlPartWriter.
            </summary>
            <param name="openXmlPart">The OpenXmlPart to be written to.</param>
            <param name="encoding">The encoding for the XML stream.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the OpenXmlPartWriter.
            </summary>
            <param name="partStream">The given part stream.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the OpenXmlPartWriter.
            </summary>
            <param name="partStream">The given part stream.</param>
            <param name="encoding">The encoding for the XML stream.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartWriter.WriteStartDocument">
            <summary>
            Writes the XML declaration with the version "1.0".
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartWriter.WriteStartDocument(System.Boolean)">
            <summary>
            Writes the XML declaration with the version "1.0" and the standalone attribute.
            </summary>
            <param name="standalone">If true, it writes "standalone=yes"; if false, it writes "standalone=no". </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartWriter.WriteStartElement(DocumentFormat.OpenXml.OpenXmlReader)">
            <summary>
            Writes out a start element tag of the current element of the OpenXmlReader. And write all the attributes of the element.
            </summary>
            <param name="elementReader">The OpenXmlReader to read from. </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartWriter.WriteStartElement(DocumentFormat.OpenXml.OpenXmlReader,System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlAttribute})">
            <summary>
            Writes out a start element tag of the current element of the OpenXmlReader. And write the attributes in attributes.
            </summary>
            <param name="elementReader">The OpenXmlReader to read from. </param>
            <param name="attributes">The attributes to be written, can be null if no attributes.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartWriter.WriteStartElement(DocumentFormat.OpenXml.OpenXmlReader,System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlAttribute},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Writes out a start element tag of the current element of the OpenXmlReader. And write the attributes in attributes.
            </summary>
            <param name="elementReader">The OpenXmlReader to read from. </param>
            <param name="attributes">The attributes to be written, can be null if no attributes.</param>
            <param name="namespaceDeclarations">The namespace declarations to be written, can be null if no namespace declarations.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartWriter.WriteStartElement(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Writes out a start tag of the element and all the attributes of the element.
            </summary>
            <param name="elementObject">The OpenXmlElement object to be written.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartWriter.WriteStartElement(DocumentFormat.OpenXml.OpenXmlElement,System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlAttribute})">
            <summary>
            Writes out a start tag of the element. And write the attributes in attributes. The attributes of the element will be omitted.
            </summary>
            <param name="elementObject">The OpenXmlElement object to be written.</param>
            <param name="attributes">The attributes to be written.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartWriter.WriteStartElement(DocumentFormat.OpenXml.OpenXmlElement,System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlAttribute},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Writes out a start tag of the element. And write the attributes in attributes. The attributes of the element will be omitted.
            </summary>
            <param name="elementObject">The OpenXmlElement object to be written.</param>
            <param name="attributes">The attributes to be written.</param>
            <param name="namespaceDeclarations">The namespace declarations to be written, can be null if no namespace declarations.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartWriter.WriteEndElement">
            <summary>
            Closes one element.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartWriter.WriteString(System.String)">
            <summary>
            Writes the given text content.
            </summary>
            <param name="text">The text to be written. </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartWriter.WriteElement(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Write the OpenXmlElement to the writer.
            </summary>
            <param name="elementObject">The OpenXmlElement object to be written.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlPartWriter.Close">
            <summary>
            Close the writer.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlReader">
            <summary>
            Represents the Open XML reader class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlReader.#ctor">
            <summary>
            Initializes a new instance of the OpenXmlReader class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlReader.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OpenXmlReader class using the supplied Boolean value.
            </summary>
            <param name="readMiscNodes">Specify false to indicate to the reader to skip all miscellaneous nodes. The default value is false.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlReader.Create(DocumentFormat.OpenXml.Packaging.OpenXmlPart)">
            <summary>
            Creates an OpenXmlReader from the specified OpenXmlPart.
            </summary>
            <param name="openXmlPart">The OpenXmlPart to read.</param>
            <returns>The newly created OpenXmlReader.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlReader.Create(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.Boolean)">
            <summary>
            Creates an OpenXmlReader from the specified OpenXmlPart and Boolean values.
            </summary>
            <param name="openXmlPart">The OpenXmlPart to read.</param>
            <param name="readMiscNodes">Specify false to indicate to the reader to skip all miscellaneous nodes. The default value is false.</param>
            <returns>The newly created OpenXmlReader.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlReader.Create(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.Boolean,System.Boolean)">
            <summary>
            Creates an OpenXmlReader from the specified OpenXmlPart and Boolean values.
            </summary>
            <param name="openXmlPart">The OpenXmlPart to read.</param>
            <param name="readMiscNodes">Specify false to indicate to the reader to skip all miscellaneous nodes. The default value is false.</param>
            <param name="ignoreWhitespace">Specify true to indicate to the reader to ignore insignificant white space. The default value is true.</param>
            <returns>The newly created OpenXmlReader.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlReader.Create(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Creates an OpenXmlReader from the OpenXmlElement (travel the DOM tree).
            </summary>
            <param name="openXmlElement">The OpenXmlElement to read.</param>
            <returns>The newly created OpenXmlReader.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlReader.Create(DocumentFormat.OpenXml.OpenXmlElement,System.Boolean)">
            <summary>
            Creates an OpenXmlReader from the OpenXmlElement (travel the DOM tree).
            </summary>
            <param name="openXmlElement">The OpenXmlElement to read.</param>
            <param name="readMiscNodes">Specify false to indicate to the reader to skip all miscellaneous nodes. The default value is false.</param>
            <returns>The newly created OpenXmlReader.</returns>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlReader.ReadMiscNodes">
            <summary>
            Gets a value indicating whether the OpenXmlReader will read or skip all miscellaneous nodes.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlReader.Encoding">
            <summary>
            Gets the encoding of the XML file.
            </summary>
            <remarks>
            Returns null if the encoding is not specified in the XML file.
            </remarks>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlReader.StandaloneXml">
            <summary>
            Gets the standalone property in the XML declaration of the XML stream. The default value is null.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlReader.HasAttributes">
            <summary>
            Gets a value indicating whether the current node has any attributes.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlReader.Attributes">
            <summary>
            Gets the list of attributes of the current element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlReader.NamespaceDeclarations">
            <summary>
            Gets the namespace declarations of the current element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlReader.ElementType">
            <summary>
            Gets the type of the corresponding strongly typed class of the current element.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlReader.IsMiscNode">
            <summary>
            Gets a value indicating whether the current node is a miscellaneous XML node (non element).
            </summary>
            <remarks><see cref="P:DocumentFormat.OpenXml.OpenXmlReader.IsStartElement"/> and <see cref="P:DocumentFormat.OpenXml.OpenXmlReader.IsEndElement"/> will be false when <see cref="P:DocumentFormat.OpenXml.OpenXmlReader.IsMiscNode"/> is true.</remarks>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlReader.IsStartElement">
            <summary>
            Gets a value indicating whether the current node is an element start.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlReader.IsEndElement">
            <summary>
            Gets a value indicating whether the current node is an element end.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlReader.Depth">
            <summary>
            Gets the depth of the current node in the XML document. The depth of the root element is 0.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlReader.EOF">
            <summary>
            Gets a value indicating whether the reader is positioned at the end of the stream.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlReader.LocalName">
            <summary>
            Gets the local name of the current node.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlReader.NamespaceUri">
            <summary>
            Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlReader.Prefix">
            <summary>
            Gets the namespace prefix associated with the current node.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlReader.GetLineInfo">
            <summary>
            Gets an instance of <see cref="T:System.Xml.IXmlLineInfo"/> if available for the current reader.
            </summary>
            <returns>An object for obtaining information about line info</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlReader.Read">
            <summary>
            Moves to read the next element.
            </summary>
            <returns>Returns true if the next element was read successfully; false if there are no more elements to read. </returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlReader.ReadFirstChild">
            <summary>
            Moves to read the first child element.
            </summary>
            <returns>Returns true if the first child element was read successfully; false if there are no child elements to read. </returns>
            <remarks>This method can only be called on element start. At the current node, the reader will move to the end tag if there is no child element.</remarks>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlReader.ReadNextSibling">
            <summary>
            Moves to read the next sibling element.
            </summary>
            <returns>Returns true if the next sibling element was read successfully; false if there are no more sibling elements to read. </returns>
            <remarks>At the current node, the reader will move to the end tag of the parent node if there are no more sibling elements.</remarks>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlReader.Skip">
            <summary>
            Skips the child elements of the current node.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlReader.LoadCurrentElement">
            <summary>
            Loads the element at current cursor.
            </summary>
            <returns>The OpenXmlElement that was loaded.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the current is the end element.</exception>
            <remarks>The new current element is the end of the element after LoadCurrentElement().</remarks>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlReader.GetText">
            <summary>
            Gets the text of the element if the element is an OpenXmlLeafTextElement. Returns String.Empty for other elements.
            </summary>
            <returns>
            The text of the element if the element is an OpenXmlLeafTextElement. Returns String.Empty for other elements.
            </returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlReader.Close">
            <summary>
            Closes the reader.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlReader.ThrowIfObjectDisposed">
            <summary>
            Thrown if the object is disposed.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlReader.Dispose(System.Boolean)">
            <summary>
            Closes the reader, and releases all resources.
            </summary>
            <param name="disposing">Specify true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlReader.Dispose">
            <summary>
            Closes the reader, and releases all resources.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlUnknownElement">
            <summary>
            Represents elements that are not defined in the Office Open XML ECMA standard.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlUnknownElement.#ctor">
            <summary>
            OpenXmlUnknownElement constructor
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlUnknownElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the OpenXmlUnknownElement class using
            the supplied element name.
            </summary>
            <param name="name">
            The element name.
            </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlUnknownElement.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the OpenXmlUnknownElement class using
            the supplied qualified element name and namespace URI.
            </summary>
            <param name="qualifiedName">The qualified element name.</param>
            <param name="namespaceUri">The namespace URI of the element.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlUnknownElement.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the OpenXmlUnknownElement class using
            the supplied prefix, local name, and namespace URI.
            </summary>
            <param name="prefix">The namespace prefix of the element.</param>
            <param name="localName">The local name of the element.</param>
            <param name="namespaceUri">The namespace URI of the element.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlUnknownElement.LocalName">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlUnknownElement.NamespaceUri">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlUnknownElement.Prefix">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlUnknownElement.XmlQualifiedName">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlUnknownElement.InnerText">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlUnknownElement.Text">
            <summary>
            Gets the text of the unknown element, only if the unknown element
            has only one child that is a text node.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlUnknownElement.CloneNode(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlUnknownElement.WriteContentTo(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlUnknownElement.WriteTo(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlUnknownElement.LazyLoad(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlUnknownElement.Populate(System.Xml.XmlReader,DocumentFormat.OpenXml.OpenXmlLoadMode)">
            <inheritdoc/>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlUnknownElementExtensions">
            <summary>
            Extension methods for managing unknown elements
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlUnknownElementExtensions.CreateUnknownElement(DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer,System.String)">
            <summary>
            Creates a new OpenXmlUnknownElement class by using the outer XML.
            </summary>
            <param name="container">Container to create unknown element from.</param>
            <param name="outerXml">The outer XML of the element.</param>
            <returns>A new OpenXmlUnknownElement class.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlWriter">
            <summary>
            Defines the OpenXmlWriter.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlWriter.#ctor">
            <summary>
            Initializes a new instance of the OpenXmlWriter.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlWriter.Create(DocumentFormat.OpenXml.Packaging.OpenXmlPart)">
            <summary>
            Create an OpenXmlWriter from the OpenXmlPart.
            </summary>
            <param name="openXmlPart">The OpenXmlPart to be written.</param>
            <returns>The created OpenXmlWriter instance.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlWriter.Create(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.Text.Encoding)">
            <summary>
            Create an OpenXmlWriter from the OpenXmlPart.
            </summary>
            <param name="openXmlPart">The OpenXmlPart to be written.</param>
            <param name="encoding">The encoding for the XML stream.</param>
            <returns>The created OpenXmlWriter instance.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlWriter.Create(System.IO.Stream)">
            <summary>
            Create an OpenXmlWriter on a given stream.
            </summary>
            <param name="partStream">The target stream.</param>
            <returns>The created OpenXmlWriter instance.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlWriter.Create(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Create an OpenXmlWriter on given stream
            </summary>
            <param name="partStream">The target stream.</param>
            <param name="encoding">The encoding for the XML stream.</param>
            <returns>The created OpenXmlWriter instance.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlWriter.WriteStartDocument">
            <summary>
            Writes the XML declaration with the version "1.0".
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlWriter.WriteStartDocument(System.Boolean)">
            <summary>
            Writes the XML declaration with the version "1.0" and the standalone attribute.
            </summary>
            <param name="standalone">If true, it writes "standalone=yes"; if false, it writes "standalone=no". </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlWriter.WriteStartElement(DocumentFormat.OpenXml.OpenXmlReader)">
            <summary>
            Writes out a start element tag of the current element of the OpenXmlReader. And write all the attributes of the element.
            </summary>
            <param name="elementReader">The OpenXmlReader to read from. </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlWriter.WriteStartElement(DocumentFormat.OpenXml.OpenXmlReader,System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlAttribute})">
            <summary>
            Writes out a start element tag of the current element of the OpenXmlReader. And write the attributes in attributes.
            </summary>
            <param name="elementReader">The OpenXmlReader to read from. </param>
            <param name="attributes">The attributes to be written, can be null if no attributes.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlWriter.WriteStartElement(DocumentFormat.OpenXml.OpenXmlReader,System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlAttribute},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Writes out a start element tag of the current element of the OpenXmlReader. And write the attributes in attributes.
            </summary>
            <param name="elementReader">The OpenXmlReader to read from. </param>
            <param name="attributes">The attributes to be written, can be null if no attributes.</param>
            <param name="namespaceDeclarations">The namespace declarations to be written, can be null if no namespace declarations.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlWriter.WriteStartElement(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Writes out a start tag of the element and all the attributes of the element.
            </summary>
            <param name="elementObject">The OpenXmlElement object to be written.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlWriter.WriteStartElement(DocumentFormat.OpenXml.OpenXmlElement,System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlAttribute})">
            <summary>
            Writes out a start tag of the element. And write the attributes in attributes. The attributes of the element will be omitted.
            </summary>
            <param name="elementObject">The OpenXmlElement object to be written.</param>
            <param name="attributes">The attributes to be written.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlWriter.WriteStartElement(DocumentFormat.OpenXml.OpenXmlElement,System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlAttribute},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Writes out a start tag of the element. And write the attributes in attributes. The attributes of the element will be omitted.
            </summary>
            <param name="elementObject">The OpenXmlElement object to be written.</param>
            <param name="attributes">The attributes to be written.</param>
            <param name="namespaceDeclarations">The namespace declarations to be written, can be null if no namespace declarations.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlWriter.WriteEndElement">
            <summary>
            Closes one element.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlWriter.WriteElement(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Write the OpenXmlElement to the writer.
            </summary>
            <param name="elementObject">The OpenXmlElement object to be written.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlWriter.WriteString(System.String)">
            <summary>
            When overridden in a derived class, writes the given text content.
            </summary>
            <param name="text">The text to write. </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlWriter.Close">
            <summary>
            Close the writer.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlWriter.ThrowIfObjectDisposed">
            <summary>
            Throw if object is disposed.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlWriter.Dispose(System.Boolean)">
            <summary>
            Closes the reader, and releases all resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlWriter.Dispose">
            <summary>
            Closes the writer, and releases all resources.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Experimental.PackageExtensions">
            <summary>
            Extensions to retrieve package details.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Experimental.PackageExtensions.GetPackage(DocumentFormat.OpenXml.Packaging.OpenXmlPackage)">
            <summary>
            Gets the current <see cref="T:DocumentFormat.OpenXml.Packaging.IPackage"/> for the <paramref name="package"/>.
            </summary>
            <param name="package">Current package.</param>
            <returns>The underlying <see cref="T:DocumentFormat.OpenXml.Packaging.IPackage"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="package"/> is <c>null</c>.</exception>
        </member>
        <member name="T:DocumentFormat.OpenXml.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.AddedPartIsNotAllowed">
            <summary>
              Looks up a localized string similar to The part cannot be added here..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.AnyParticleTypeNotSupported">
            <summary>
              Looks up a localized string similar to Schemas with ParticleType.Any is not supported.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.CannotChangeDocumentType">
            <summary>
              Looks up a localized string similar to Cannot change the document type..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.CannotChangeDocumentTypeSerious">
            <summary>
              Looks up a localized string similar to Cannot change the document type. The document may be corrupt..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.CannotFindAttribute">
            <summary>
              Looks up a localized string similar to The element does not allow the specified attribute..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.CannotLoadRootElement">
            <summary>
              Looks up a localized string similar to Cannot load the root element from the part. The part contains invalid data..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.CannotReloadDomTreeWithoutAssociatedPart">
            <summary>
              Looks up a localized string similar to Cannot reload the DOM tree since this element is not associated with an OpenXmlPart..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.CannotSaveDomTreeWithoutAssociatedPart">
            <summary>
              Looks up a localized string similar to Cannot save DOM tree since this element is not associated with an OpenXmlPart..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.CannotSetAttribute">
            <summary>
              Looks up a localized string similar to Cannot set XML namespace declaration here. Use AddNamespaceDeclaration method instead..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.CannotValidateAcbElement">
            <summary>
              Looks up a localized string similar to The OpenXmlValidator cannot validate against AlternateContent, AlternateContentChoice and AlternateContentFallback..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.CannotValidateMiscNode">
            <summary>
              Looks up a localized string similar to The OpenXmlValidator cannot validate against OpenXmlMiscNode..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.CannotValidateUnknownElement">
            <summary>
              Looks up a localized string similar to The OpenXmlValidator cannot validate against OpenXmlUnknownElement..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.CycleReference">
            <summary>
              Looks up a localized string similar to A circular reference has been detected..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.DataPartIsInUse">
            <summary>
              Looks up a localized string similar to The specified DataPart is referenced by other parts..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.DataPartReferenceIsNotAllowed">
            <summary>
              Looks up a localized string similar to The specified DataPartReferenceRelationship is not allowed with this parent..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.DocumentFileFormatVersionMismatch">
            <summary>
              Looks up a localized string similar to You should not validate document preprocessed based on FileFormatVersions.{0} against FileFormatVersions.{1} constraints. The preprocessing file format version is set in OpenSettings. Also check the file format version setting in the OpenXmlValidator..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.DocumentTooBig">
            <summary>
              Looks up a localized string similar to The document has exceeded the size limit. Its type cannot be changed..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.DuplicatedPrefix">
            <summary>
              Looks up a localized string similar to The prefix &quot;{0}&quot; is already defined in current node..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.ElementIsNotChild">
            <summary>
              Looks up a localized string similar to The specified argument is not a child of this element..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.ElementIsNotInOfficeVersion">
            <summary>
              Looks up a localized string similar to The validator is set to validate content based on Microsoft Office {0} rules. The passed in element is not defined in Microsoft Office {0}..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.ElementIsPartOfTree">
            <summary>
              Looks up a localized string similar to Cannot insert the OpenXmlElement &quot;newChild&quot; because it is part of a tree. .
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.EmptyCollection">
            <summary>
              Looks up a localized string similar to Empty collection..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.ErrorContentType">
            <summary>
              Looks up a localized string similar to The contentType parameter has incorrect value..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.ExtendedPartIsOpenXmlPart">
            <summary>
              Looks up a localized string similar to An ExtendedPart was encountered with a relationship type that starts with &quot;http://schemas.openxmlformats.org&quot;. Expected a defined part instead based on the relationship type..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.ExtendedPartNotAllowed">
            <summary>
              Looks up a localized string similar to ExtendedPart must be added by AddExtendedPart( )..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.ExternalRelationshipIsNotReferenced">
            <summary>
              Looks up a localized string similar to The specified ExternalRelationship is not referenced by this part..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.FailedToOpenPackage">
            <summary>
              Looks up a localized string similar to Package could not be opened for stream. See inner exception for details and be aware that there are behavior differences in stream support between .NET Framework and Core..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.FeatureNotRegistered">
            <summary>
              Looks up a localized string similar to Feature {0} is not available in this collection..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.FileFormatNotSupported">
            <summary>
              Looks up a localized string similar to The specified FileFormatVersions parameter has an invalid value: {0}.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.FileNotFound">
            <summary>
              Looks up a localized string similar to Could not find document.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.Fmt_PartRootIsInvalid">
            <summary>
              Looks up a localized string similar to The root XML element &quot;{0}&quot; in the part is incorrect. The expected root XML element is: &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.ForeignDataPart">
            <summary>
              Looks up a localized string similar to The specified DataPart is not in this document..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.ForeignMediaDataPart">
            <summary>
              Looks up a localized string similar to The specified MediaDataPart is not in this document..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.ForeignOpenXmlPart">
            <summary>
              Looks up a localized string similar to The specified OpenXmlPart is not referenced by this part..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.HyperlinkRelationshipIsNotReferenced">
            <summary>
              Looks up a localized string similar to The specified ExternalRelationship is not referenced by this part..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.ImplicitConversionExceptionOnNull">
            <summary>
              Looks up a localized string similar to Error in implicit conversion. Cannot convert null object..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.InnerXmlCannotBeSet">
            <summary>
              Looks up a localized string similar to This OpenXmlElement&apos;s InnerXml cannot be set..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.InvalidContentTypePart">
            <summary>
              Looks up a localized string similar to The content type of the part is invalid. The expected content type is: {0}..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.InvalidEnumValue">
            <summary>
              Looks up a localized string similar to The specified value is not valid according to the specified enum type..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.InvalidMainPartContentType">
            <summary>
              Looks up a localized string similar to Cannot set the MainPartContentType property to this value because it is not valid for this type of document..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.InvalidMCMode">
            <summary>
              Looks up a localized string similar to The specified MarkupCompatibilityProcessSettings.TargetFileFormatVersions is invalid to process the extensibility markup..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.InvalidOuterXml">
            <summary>
              Looks up a localized string similar to The XML has invalid content and cannot be constructed as an element..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.InvalidOuterXmlForMiscNode">
            <summary>
              Looks up a localized string similar to The XML has invalid content and cannot be constructed as an element..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.InvalidPackageType">
            <summary>
              Looks up a localized string similar to The specified package is not valid..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.InvalidPartContentType">
             <summary>
               Looks up a localized string similar to The document cannot be opened because there is an invalid part with an unexpected content type. 
            [Part Uri={0}], 
            [Content Type={1}], 
            [Expected Content Type={2}]..
             </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.InvalidWriteStringCall">
            <summary>
              Looks up a localized string similar to Text string can only be written out in OpenXmlLeafTextElement..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.InvalidXmlIDStringException">
            <summary>
              Looks up a localized string similar to An invalid XML ID string.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.LeafElementInnerXmlCannotBeSet">
            <summary>
              Looks up a localized string similar to This OpenXmlLeafElement&apos;s InnerXml can only be set to null or to an empty string..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.LocalNameIsNull">
            <summary>
              Looks up a localized string similar to LocalName is null or empty..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.MainPartIsDifferent">
            <summary>
              Looks up a localized string similar to The part cannot be added to this package because its content type is not allowed in this type of document..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.MalformedUri">
            <summary>
              Looks up a localized string similar to The package contains malformed URI relationships. Please ensure the package is opened with a stream (that is seekable) or a file path to have the SDK automatically handle these scenarios..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.MediaDataPartShouldNotReferenceOtherParts">
            <summary>
              Looks up a localized string similar to An Audio / Video part shall not have implicit or explicit relationships to other parts defined by Open XML Standard..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.MultipleRelationshipsToSamePart">
            <summary>
              Looks up a localized string similar to There are more than one relationship references that target the specified part..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.NamespaceIdNotAvailable">
            <summary>
              Looks up a localized string similar to Namespace ids are only available for namespaces for Office 2021 and before. Please use prefixes or URLs instead..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.NonCompositeNoChild">
            <summary>
              Looks up a localized string similar to Non-composite elements do not have child elements..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.NonImplemented">
            <summary>
              Looks up a localized string similar to The method or operation has not been implemented..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.NoSpecifiedExternalRelationship">
            <summary>
              Looks up a localized string similar to No external relationship with the specified ID was found..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.NoSpecifiedHyperlinkRelationship">
            <summary>
              Looks up a localized string similar to No hyperlink relationship with the specified ID was found..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.NoSpecifiedReferenceRelationship">
            <summary>
              Looks up a localized string similar to No ReferenceRelationship with the specified ID was found..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.NsNotUnderStand">
            <summary>
              Looks up a localized string similar to Current Markup Compatibility mode does not understand namespace prefix &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.OnlyOnePartAllowed">
            <summary>
              Looks up a localized string similar to Only one instance of the type is allowed for this parent..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.PackageAccessModeIsReadonly">
            <summary>
              Looks up a localized string similar to This operation requires that the document be opened with ReadWrite (or Write) access..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.PackageMustCanBeRead">
            <summary>
              Looks up a localized string similar to This operation requires that the package be opened with Read access..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.PackageRelatedArgumentNullException">
            <summary>
              Looks up a localized string similar to Arguments openXmlPackage and its parent cannot be null at same time..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.ParentIsNull">
            <summary>
              Looks up a localized string similar to The parent of this element is null..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.PartExistsWithDifferentRelationshipId">
            <summary>
              Looks up a localized string similar to The specified part is already referenced as a target part by a relationship with a different ID..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.PartIsDestroyed">
            <summary>
              Looks up a localized string similar to The part has been destroyed..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.PartIsEmpty">
            <summary>
              Looks up a localized string similar to The XML content is empty..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.PartIsNotAllowed">
            <summary>
              Looks up a localized string similar to The specified part is not allowed with this parent..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.PartIsNotInOfficeVersion">
            <summary>
              Looks up a localized string similar to The validator is set to validate content based on Microsoft Office {0} rules. The passed in part is not defined in Microsoft Office {0}..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.PartNotInSamePackage">
            <summary>
              Looks up a localized string similar to A relationship can only be created between two parts in a package..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.PartRootAlreadyHasAssociation">
            <summary>
              Looks up a localized string similar to Cannot set the given root element to this part. The given part root element has already been associated with another OpenXmlPart..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.PartUnknown">
            <summary>
              Looks up a localized string similar to The XML content is unknown. Cannot create an OpenXmlReader on that content..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.PropertyMutualExclusive">
            <summary>
              Looks up a localized string similar to The {0} property cannot be set when the {1} property is not null..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.ReaderInEndState">
            <summary>
              Looks up a localized string similar to The reader is now positioned at the end element tag..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.ReaderInEofState">
            <summary>
              Looks up a localized string similar to The reader is now positioned at EOF..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.ReaderInNullState">
            <summary>
              Looks up a localized string similar to The reader is now positioned before the first element. Call OpenXmlReader.Read() before this operation..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.ReferenceRelationshipIsNotReferenced">
            <summary>
              Looks up a localized string similar to The specified ReferenceRelationship is not referenced by this part..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.RelationshipIdConflict">
            <summary>
              Looks up a localized string similar to Id conflicts with the Id of an existing relationship..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.RequiredPartDoNotExist">
            <summary>
              Looks up a localized string similar to A required part is missing. The class name is stored in the PartClassName property..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.RootElementIsNull">
            <summary>
              Looks up a localized string similar to Root element is null..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.SamePartWithDifferentRelationshipType">
            <summary>
              Looks up a localized string similar to A shared part is referenced by multiple source parts with a different relationship type..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.StreamAccessModeShouldBeWrite">
            <summary>
              Looks up a localized string similar to The stream was not opened for writing..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.StreamAccessModeShouldRead">
            <summary>
              Looks up a localized string similar to The stream was not opened for reading..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.StrictReadOnly">
            <summary>
              Looks up a localized string similar to ISO 29500 Strict formatted document can&apos;t be opened while edit operation is enabled..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.StringArgumentEmptyException">
            <summary>
              Looks up a localized string similar to The string argument cannot be empty..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.StringIsEmpty">
            <summary>
              Looks up a localized string similar to The specified string is empty..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.TextIsInvalidEnumValue">
            <summary>
              Looks up a localized string similar to The text value is not a valid enumeration value..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.TextIsInvalidOnOffValue">
            <summary>
              Looks up a localized string similar to The text value is invalid. It can be only &apos;true&apos;, &apos;false&apos;, &apos;on&apos;, &apos;off&apos;, &apos;0&apos;, &apos;1&apos;..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.TextIsInvalidTrueFalseBlankValue">
            <summary>
              Looks up a localized string similar to The text value is invalid. It can be only &apos;true&apos;, &apos;false&apos;, &apos;t&apos;, &apos;f&apos;, &apos;&apos;..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.TextIsInvalidTrueFalseValue">
            <summary>
              Looks up a localized string similar to The text value is invalid. It can be only &apos;true&apos;, &apos;false&apos;, &apos;t&apos;, &apos;f&apos;..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.UnexpectedReentrancy">
            <summary>
              Looks up a localized string similar to Encountered unexpected reentrancy while accessing part root. Please check if part root is loaded first by calling OpenXmlPart.IsRootElementLoaded.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.UnknowMCContent">
            <summary>
              Looks up a localized string similar to There is invalid extensibility markup in &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.UnknownError">
            <summary>
              Looks up a localized string similar to An unknown error occurred. Original message: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.UnknownPackage">
            <summary>
              Looks up a localized string similar to The specified package is unknown..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.UseAddHyperlinkRelationship">
            <summary>
              Looks up a localized string similar to Do not add hyperlink relationships through the AddExternalRelationship() method. Use AddHyperlinkRelationship() instead..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.ExceptionMessages.ValidationException">
            <summary>
              Looks up a localized string similar to The OpenXmlPackage.Validate method found an error in the document..
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Base64BinaryValue">
            <summary>
            Represents the xsd:base64Binary value for attributes.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Base64BinaryValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.Base64BinaryValue"/> class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Base64BinaryValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.Base64BinaryValue"/> class by deep copying
            the supplied <see cref="T:System.String"/> value.
            </summary>
            <param name="base64Binary">
            The <see cref="T:System.String"/> value.
            </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Base64BinaryValue.#ctor(DocumentFormat.OpenXml.Base64BinaryValue)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.Base64BinaryValue"/> class by deep copying
            the supplied <see cref="T:DocumentFormat.OpenXml.Base64BinaryValue"/> class.
            </summary>
            <param name="source">
            The source <see cref="T:DocumentFormat.OpenXml.Base64BinaryValue"/> class.
            </param>
        </member>
        <member name="P:DocumentFormat.OpenXml.Base64BinaryValue.Value">
            <summary>
            Gets or sets the Base64 binary string value.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Base64BinaryValue.IsValid">
            <remarks>
            The lexical forms of base64Binary values are limited to the 65 characters of the Base64 Alphabet defined in [RFC 2045], i.e., a-z, A-Z, 0-9, the plus sign (+), the forward slash (/) and the equal sign (=), together with the characters defined in [XML 1.0 (Second Edition)] as white space. No other characters are allowed.
            </remarks>
        </member>
        <member name="M:DocumentFormat.OpenXml.Base64BinaryValue.op_Implicit(DocumentFormat.OpenXml.Base64BinaryValue)~System.String">
            <summary>
            Implicitly converts the specified value to a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:DocumentFormat.OpenXml.Base64BinaryValue"/> object to convert.</param>
            <returns>The base64Binary string. Returns null when <paramref name="value"/> is <c>null</c>.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Base64BinaryValue.op_Implicit(System.String)~DocumentFormat.OpenXml.Base64BinaryValue">
            <summary>
            Initializes a new instance of a <see cref="T:DocumentFormat.OpenXml.Base64BinaryValue"/> class using the
            supplied string.
            </summary>
            <param name="value">The specified base64Binary value.</param>
            <returns>A new <see cref="T:DocumentFormat.OpenXml.Base64BinaryValue"/> instance with the value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Base64BinaryValue.FromString(System.String)">
            <summary>
            Returns a new <see cref="T:DocumentFormat.OpenXml.Base64BinaryValue"/> object that was created from a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">A <see cref="T:System.String"/> value to use to create a new <see cref="T:DocumentFormat.OpenXml.Base64BinaryValue"/> object.</param>
            <returns>A <see cref="T:DocumentFormat.OpenXml.Base64BinaryValue"/> that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Base64BinaryValue.ToString(DocumentFormat.OpenXml.Base64BinaryValue)">
            <summary>
            Returns the <see cref="T:System.String"/>  value representation of a <see cref="T:DocumentFormat.OpenXml.Base64BinaryValue"/> object.
            </summary>
            <param name="value">
            A <see cref="T:DocumentFormat.OpenXml.Base64BinaryValue"/> object used to retrieve a <see cref="T:System.String"/> value representation.
            </param>
            <returns>A <see cref="T:System.String"/> value that represents a <see cref="T:DocumentFormat.OpenXml.Base64BinaryValue"/> object.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.BooleanValue">
            <summary>
            Represents the <see cref="T:System.Boolean"/> value for attributes.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.BooleanValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.BooleanValue"/> class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.BooleanValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.BooleanValue"/> class using the supplied <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.BooleanValue.#ctor(DocumentFormat.OpenXml.BooleanValue)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.BooleanValue"/> class by deep copying
            the supplied <see cref="T:DocumentFormat.OpenXml.BooleanValue"/> class.
            </summary>
            <param name="source">
            The source <see cref="T:DocumentFormat.OpenXml.BooleanValue"/> class.
            </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.BooleanValue.op_Implicit(DocumentFormat.OpenXml.BooleanValue)~System.Boolean">
            <summary>
            Implicitly converts the specified value to a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:DocumentFormat.OpenXml.BooleanValue"/> to convert.</param>
            <returns>The converted <see cref="T:System.Boolean"/> value.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.BooleanValue.op_Implicit(System.Boolean)~DocumentFormat.OpenXml.BooleanValue">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.BooleanValue"/> class by implicitly
            converting the supplied <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value.</param>
            <returns>A new <see cref="T:DocumentFormat.OpenXml.BooleanValue"/> instance with the value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.BooleanValue.FromBoolean(System.Boolean)">
            <summary>
            Returns a new <see cref="T:DocumentFormat.OpenXml.BooleanValue"/> object that was created by using the supplied <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">A <see cref="T:System.Boolean"/> value to use to create a new <see cref="T:DocumentFormat.OpenXml.BooleanValue"/> object.</param>
            <returns>A <see cref="T:DocumentFormat.OpenXml.BooleanValue"/> that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.BooleanValue.ToBoolean(DocumentFormat.OpenXml.BooleanValue)">
            <summary>
            Returns the <see cref="T:System.Boolean"/> representation of a <see cref="T:DocumentFormat.OpenXml.BooleanValue"/> object.
            </summary>
            <param name="value">
            A <see cref="T:DocumentFormat.OpenXml.BooleanValue"/> object to retrieve a <see cref="T:System.Boolean"/> representation.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value that represents a <see cref="T:DocumentFormat.OpenXml.BooleanValue"/> object.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.ByteValue">
            <summary>
            Represents the byte value for attributes.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.ByteValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.ByteValue"/> class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.ByteValue.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.ByteValue"/> class using the supplied
            <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.ByteValue.#ctor(DocumentFormat.OpenXml.ByteValue)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.ByteValue"/> class by deep copying
            the supplied <see cref="T:DocumentFormat.OpenXml.ByteValue"/> class.
            </summary>
            <param name="source">
            The source <see cref="T:DocumentFormat.OpenXml.ByteValue"/> class.
            </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.ByteValue.op_Implicit(DocumentFormat.OpenXml.ByteValue)~System.Byte">
            <summary>
            Implicitly converts the specified value to a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">
            The <see cref="T:DocumentFormat.OpenXml.ByteValue"/> to convert.
            </param>
            <returns>
            The converted <see cref="T:System.Byte"/> value.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.ByteValue.op_Implicit(System.Byte)~DocumentFormat.OpenXml.ByteValue">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.ByteValue"/> class by implicitly converting
            the supplied <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">
            The <see cref="T:System.Byte"/> value.
            </param>
            <returns>A new <see cref="T:DocumentFormat.OpenXml.ByteValue"/> instance with the value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.ByteValue.FromByte(System.Byte)">
            <summary>
            Returns a new <see cref="T:DocumentFormat.OpenXml.ByteValue"/> object created from a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">A <see cref="T:System.Byte"/> value to create a new <see cref="T:DocumentFormat.OpenXml.ByteValue"/> object from.</param>
            <returns>A <see cref="T:DocumentFormat.OpenXml.ByteValue"/> that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.ByteValue.ToByte(DocumentFormat.OpenXml.ByteValue)">
            <summary>
            Returns the <see cref="T:System.Byte"/> value representation of a <see cref="T:DocumentFormat.OpenXml.ByteValue"/> object.
            </summary>
            <param name="value">
            A <see cref="T:DocumentFormat.OpenXml.ByteValue"/> object to retrieve a <see cref="T:System.Byte"/> value representation.
            </param>
            <returns>A <see cref="T:System.Byte"/> value that represents a <see cref="T:DocumentFormat.OpenXml.ByteValue"/> object.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.DateTimeValue">
            <summary>
            Represents the <see cref="T:System.DateTime"/> value for attributes.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.DateTimeValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.DateTimeValue"/> class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.DateTimeValue.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.DateTimeValue"/> class using the supplied
            <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.DateTimeValue.#ctor(DocumentFormat.OpenXml.DateTimeValue)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.DateTimeValue"/> class by deep copying the
            supplied <see cref="T:DocumentFormat.OpenXml.DateTimeValue"/> class.
            </summary>
            <param name="source">
            The source <see cref="T:DocumentFormat.OpenXml.DateTimeValue"/> class.
            </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.DateTimeValue.Parse(System.String)">
            <summary>
            Convert the text to meaningful value.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.DateTimeValue.op_Implicit(DocumentFormat.OpenXml.DateTimeValue)~System.DateTime">
            <summary>
            Implicitly converts the specified value to a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">
            The <see cref="T:DocumentFormat.OpenXml.DateTimeValue"/> object to convert.
            </param>
            <returns>
            The converted <see cref="T:System.DateTime"/> value.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.DateTimeValue.op_Implicit(System.DateTime)~DocumentFormat.OpenXml.DateTimeValue">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.DateTimeValue"/> class by implicitly
            converting the supplied <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">
            The <see cref="T:System.DateTime"/> value.
            </param>
            <returns>A new <see cref="T:DocumentFormat.OpenXml.DateTimeValue"/> instance with the value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.DateTimeValue.FromDateTime(System.DateTime)">
            <summary>
            Returns a new <see cref="T:DocumentFormat.OpenXml.DateTimeValue"/> object that was created from a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">A <see cref="T:System.DateTime"/> value to use to create a new <see cref="T:DocumentFormat.OpenXml.DateTimeValue"/> object.</param>
            <returns>A <see cref="T:DocumentFormat.OpenXml.DateTimeValue"/> object that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.DateTimeValue.ToDateTime(DocumentFormat.OpenXml.DateTimeValue)">
            <summary>
            Returns the <see cref="T:System.DateTime"/> value representation of a <see cref="T:DocumentFormat.OpenXml.DateTimeValue"/> object.
            </summary>
            <param name="value">
            A <see cref="T:DocumentFormat.OpenXml.DateTimeValue"/> object used to retrieve a <see cref="T:System.DateTime"/> value representation.
            </param>
            <returns>A <see cref="T:System.DateTime"/> value that represents a <see cref="T:DocumentFormat.OpenXml.DateTimeValue"/> object.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.DecimalValue">
            <summary>
            Represents the decimal value for attributes.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.DecimalValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.DecimalValue"/> class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.DecimalValue.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.DecimalValue"/> class using the supplied
            <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.DecimalValue.#ctor(DocumentFormat.OpenXml.DecimalValue)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.DecimalValue"/> class by deep copying
            the supplied <see cref="T:DocumentFormat.OpenXml.DecimalValue"/> class.
            </summary>
            <param name="source">
            The source <see cref="T:DocumentFormat.OpenXml.DecimalValue"/> class.
            </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.DecimalValue.op_Implicit(DocumentFormat.OpenXml.DecimalValue)~System.Decimal">
            <summary>
            Implicitly converts the specified value to a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">
            The <see cref="T:DocumentFormat.OpenXml.DecimalValue"/> to convert.
            </param>
            <returns>
            The converted <see cref="T:System.Decimal"/> value.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.DecimalValue.op_Implicit(System.Decimal)~DocumentFormat.OpenXml.DecimalValue">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.DecimalValue"/> class by implicitly
            converting the supplied <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">
            The <see cref="T:System.Decimal"/> value.
            </param>
            <returns>A new <see cref="T:DocumentFormat.OpenXml.DecimalValue"/> instance with the value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.DecimalValue.FromDecimal(System.Decimal)">
            <summary>
            Returns a new <see cref="T:DocumentFormat.OpenXml.DecimalValue"/> object that was created from a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">A <see cref="T:System.Decimal"/> value to use to create a new <see cref="T:DocumentFormat.OpenXml.DecimalValue"/> object.</param>
            <returns>A <see cref="T:DocumentFormat.OpenXml.DecimalValue"/> object that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.DecimalValue.ToDecimal(DocumentFormat.OpenXml.DecimalValue)">
            <summary>
            Returns the <see cref="T:System.Decimal"/> representation of a <see cref="T:DocumentFormat.OpenXml.DecimalValue"/> object.
            </summary>
            <param name="value">
            A <see cref="T:DocumentFormat.OpenXml.DecimalValue"/> object to use to retrieve a <see cref="T:System.Decimal"/> representation.
            </param>
            <returns>A <see cref="T:System.Decimal"/> value that represents a <see cref="T:DocumentFormat.OpenXml.DecimalValue"/> object.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.DoubleValue">
            <summary>
            Represents the double value for attributes.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.DoubleValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.DoubleValue"/> class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.DoubleValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.DoubleValue"/> class using the supplied
            <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.DoubleValue.#ctor(DocumentFormat.OpenXml.DoubleValue)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.DoubleValue"/> by deep copying the
            supplied <see cref="T:DocumentFormat.OpenXml.DoubleValue"/> value.
            </summary>
            <param name="source">
            The source <see cref="T:DocumentFormat.OpenXml.DoubleValue"/> class.
            </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.DoubleValue.op_Implicit(DocumentFormat.OpenXml.DoubleValue)~System.Double">
            <summary>
            Implicitly converts the specified value to a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">
            The <see cref="T:DocumentFormat.OpenXml.DoubleValue"/> object to convert.
            </param>
            <returns>
            The converted <see cref="T:System.Double"/> value.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.DoubleValue.op_Implicit(System.Double)~DocumentFormat.OpenXml.DoubleValue">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.DoubleValue"/> class by implicitly
            converting the supplied <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">
            The <see cref="T:System.Double"/> value.
            </param>
            <returns>A new <see cref="T:DocumentFormat.OpenXml.DoubleValue"/> instance with the value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.DoubleValue.FromDouble(System.Double)">
            <summary>
            Returns a new <see cref="T:DocumentFormat.OpenXml.DoubleValue"/> object created from a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> value to use to create a new <see cref="T:DocumentFormat.OpenXml.DoubleValue"/> object.</param>
            <returns>A <see cref="T:DocumentFormat.OpenXml.DoubleValue"/> object that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.DoubleValue.ToDouble(DocumentFormat.OpenXml.DoubleValue)">
            <summary>
            Returns the <see cref="T:System.Double"/> value representation of a <see cref="T:DocumentFormat.OpenXml.DoubleValue"/> object.
            </summary>
            <param name="value">
            A <see cref="T:DocumentFormat.OpenXml.DoubleValue"/> object used to retrieve a <see cref="T:System.Double"/> value representation.
            </param>
            <returns>A <see cref="T:System.Double"/> value that represents a <see cref="T:DocumentFormat.OpenXml.DoubleValue"/> object.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.EnumValue`1">
            <summary>
            Represents the enum value for attributes.
            </summary>
            <typeparam name="T">Type of enum.</typeparam>
        </member>
        <member name="M:DocumentFormat.OpenXml.EnumValue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.EnumValue`1"/> class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.EnumValue`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.EnumValue`1"/> class using the supplied
            value of type T.
            </summary>
            <param name="value">
            The value of type T.
            </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.EnumValue`1.#ctor(DocumentFormat.OpenXml.EnumValue{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.EnumValue`1"/> by deep copying the supplied
            <see cref="T:DocumentFormat.OpenXml.EnumValue`1"/> class.
            </summary>
            <param name="source">
            The source <see cref="T:DocumentFormat.OpenXml.EnumValue`1"/> class.
            </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.EnumValue`1.op_Implicit(DocumentFormat.OpenXml.EnumValue{`0})~`0">
            <summary>
            Implicitly converts the specified value to an enum.
            </summary>
            <param name="value">The <see cref="T:DocumentFormat.OpenXml.EnumValue`1"/> to convert.</param>
            <returns>
            The converted enum value.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.EnumValue`1.op_Implicit(`0)~DocumentFormat.OpenXml.EnumValue{`0}">
            <summary>
            Initializes a new <see cref="T:DocumentFormat.OpenXml.EnumValue`1"/> class by converting the supplied enum
            value.
            </summary>
            <param name="value">The specified value.</param>
            <returns>A new <see cref="T:DocumentFormat.OpenXml.EnumValue`1"/> instance corresponding to the value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.EnumValue`1.op_Implicit(DocumentFormat.OpenXml.EnumValue{`0})~System.String">
            <summary>
            Implicitly converts the specified value to a String value.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.EnumValue`1.IsInVersion(DocumentFormat.OpenXml.FileFormatVersions)">
            <inheritdoc />
        </member>
        <member name="T:DocumentFormat.OpenXml.HexBinaryValue">
            <summary>
            Represent the xsd:hexBinary value for attributes.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.HexBinaryValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.HexBinaryValue"/> class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.HexBinaryValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.HexBinaryValue"/> class using the supplied string.
            </summary>
            <param name="hexBinary">The <see cref="T:System.String"/> value.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.HexBinaryValue.#ctor(DocumentFormat.OpenXml.HexBinaryValue)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.HexBinaryValue"/> class by deep copying the supplied <see cref="T:DocumentFormat.OpenXml.HexBinaryValue"/> class.
            </summary>
            <param name="source">The source <see cref="T:DocumentFormat.OpenXml.HexBinaryValue"/> class.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.HexBinaryValue.IsValid">
            <remarks>
            hexBinary has a lexical representation where each binary octet is encoded as a character tuple,
            consisting of two hexadecimal digits ([0-9a-fA-F]) representing the octet code.
            For example, "0FB7" is a hex encoding for the 16-bit integer 4023 (whose binary representation is 111110110111).
            </remarks>
        </member>
        <member name="P:DocumentFormat.OpenXml.HexBinaryValue.Value">
            <summary>
            Gets or sets the hex binary value
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.HexBinaryValue.TryGetBytes(System.Byte[]@)">
            <summary>
            Attempts to retrieve the bytes associated with this <see cref="T:DocumentFormat.OpenXml.HexBinaryValue"/> if available.
            </summary>
            <param name="bytes">The bytes if successfully written.</param>
            <returns>Whether bytes where successfully written.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.HexBinaryValue.TryWriteBytes(DocumentFormat.OpenXml.Span{System.Byte})">
            <summary>
            Attempts to write the bytes associated with this <see cref="T:DocumentFormat.OpenXml.HexBinaryValue"/> if available.
            </summary>
            <param name="bytes">A buffer to write to</param>
            <returns>Whether bytes where successfully written.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.HexBinaryValue.Create(DocumentFormat.OpenXml.ReadOnlySpan{System.Byte})">
            <summary>
            Returns a new <see cref="T:DocumentFormat.OpenXml.HexBinaryValue"/> object that was created from <paramref name="bytes"/>.
            </summary>
            <param name="bytes">A byte array to use to create a new <see cref="T:DocumentFormat.OpenXml.HexBinaryValue"/> object.</param>
            <returns>A <see cref="T:DocumentFormat.OpenXml.HexBinaryValue"/> object that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.HexBinaryValue.Create(System.Byte[])">
            <summary>
            Returns a new <see cref="T:DocumentFormat.OpenXml.HexBinaryValue"/> object that was created from <paramref name="bytes"/>.
            </summary>
            <param name="bytes">A byte array to use to create a new <see cref="T:DocumentFormat.OpenXml.HexBinaryValue"/> object.</param>
            <returns>A <see cref="T:DocumentFormat.OpenXml.HexBinaryValue"/> object that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.HexBinaryValue.op_Implicit(DocumentFormat.OpenXml.HexBinaryValue)~System.String">
            <summary>
            Implicitly converts the specified value to a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:DocumentFormat.OpenXml.HexBinaryValue"/> object to convert.</param>
            <returns>The converted HexBinary string. Returns null when <paramref name="value"/> is <c>null</c>.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.HexBinaryValue.op_Implicit(System.String)~DocumentFormat.OpenXml.HexBinaryValue">
            <summary>
            Implicitly converts the specified <see cref="T:System.String"/> value to a <see cref="T:DocumentFormat.OpenXml.HexBinaryValue"/> object.
            </summary>
            <param name="value">The specified hexBinary value.</param>
            <returns>A new <see cref="T:DocumentFormat.OpenXml.HexBinaryValue"/> instance with the value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.HexBinaryValue.FromString(System.String)">
            <summary>
            Returns a new <see cref="T:DocumentFormat.OpenXml.HexBinaryValue"/> object that was created from a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">A <see cref="T:System.String"/> value to use to create a new <see cref="T:DocumentFormat.OpenXml.HexBinaryValue"/> object.</param>
            <returns>A <see cref="T:DocumentFormat.OpenXml.HexBinaryValue"/> object that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.HexBinaryValue.ToString(DocumentFormat.OpenXml.HexBinaryValue)">
            <summary>
            Returns the <see cref="T:System.String"/> value representation of a <see cref="T:DocumentFormat.OpenXml.HexBinaryValue"/> object.
            </summary>
            <param name="value">
            A <see cref="T:DocumentFormat.OpenXml.HexBinaryValue"/> object used to retrieve a <see cref="T:System.String"/> value representation.
            </param>
            <returns>A <see cref="T:System.String"/> value that represents a <see cref="T:DocumentFormat.OpenXml.HexBinaryValue"/> object.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.HexStringFactory">
            <summary>
            A factory of hex strings.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.HexStringFactory.Create(DocumentFormat.OpenXml.ReadOnlySpan{System.Byte})">
            <summary>
            Returns a new hex string that was created from <paramref name="bytes"/>.
            </summary>
            <param name="bytes">A byte array to use to create a new hex string.</param>
            <returns>A hex string that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.HexStringFactory.Create(System.Byte[])">
            <summary>
            Returns a new hex string that was created from <paramref name="bytes"/>.
            </summary>
            <param name="bytes">A byte array to use to create a new hex string.</param>
            <returns>A hex string that corresponds to the value parameter.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.IEnumValue">
            <summary>
            A definition of an OpenXml enum value
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.IEnumValue.IsValid">
            <summary>
            Gets a value indicating whether the current value is valid.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.IEnumValue.Version">
            <summary>
            Gets the version this type was introduced in.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.IEnumValue.Value">
            <summary>
            Gets the value of the enum.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.IEnumValueFactory`1">
            <summary>
            Factory to create a new enum value of the specified type.
            </summary>
            <typeparam name="T">Type to create enum.</typeparam>
        </member>
        <member name="M:DocumentFormat.OpenXml.IEnumValueFactory`1.Create(System.String)">
            <summary>
            Creates an enum value with the supplied value.
            </summary>
            <param name="value">Value of enum</param>
            <returns>Constructed enum.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Int16Value">
            <summary>
            Represents the <see cref="T:System.Int16"/> value for attributes.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Int16Value.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.Int16Value"/> class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Int16Value.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.Int16Value"/> class using the supplied <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Int16Value.#ctor(DocumentFormat.OpenXml.Int16Value)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.Int16Value"/> by deep copying the supplied IntValue class.
            </summary>
            <param name="source">The source <see cref="T:DocumentFormat.OpenXml.Int16Value"/> class.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Int16Value.op_Implicit(DocumentFormat.OpenXml.Int16Value)~System.Int16">
            <summary>
            Implicitly converts the specified value to an <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:DocumentFormat.OpenXml.Int16Value"/> to convert.</param>
            <returns>The converted <see cref="T:System.Int16"/> value.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Int16Value.op_Implicit(System.Int16)~DocumentFormat.OpenXml.Int16Value">
            <summary>
            Implicitly converts an <see cref="T:System.Int16"/> value to a <see cref="T:DocumentFormat.OpenXml.Int16Value"/> instance.
            </summary>
            <param name="value">The specified value.</param>
            <returns>A new <see cref="T:DocumentFormat.OpenXml.Int16Value"/> instance with the value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Int16Value.FromInt16(System.Int16)">
            <summary>
            Returns a new <see cref="T:DocumentFormat.OpenXml.Int16Value"/> object that was created from an <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">An <see cref="T:System.Int16"/> value to use to create a new <see cref="T:DocumentFormat.OpenXml.Int16Value"/> object.</param>
            <returns>An <see cref="T:DocumentFormat.OpenXml.Int16Value"/> that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Int16Value.ToInt16(DocumentFormat.OpenXml.Int16Value)">
            <summary>
            Returns an <see cref="T:System.Int16"/> representation of an <see cref="T:DocumentFormat.OpenXml.Int16Value"/> object.
            </summary>
            <param name="value">
            An <see cref="T:DocumentFormat.OpenXml.Int16Value"/> object to retrieve an <see cref="T:System.Int16"/> representation.
            </param>
            <returns>An <see cref="T:System.Int16"/> value that represents an <see cref="T:DocumentFormat.OpenXml.Int16Value"/> object.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Int32Value">
            <summary>
            Represents the <see cref="T:System.Int32"/> value for attributes.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Int32Value.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.Int32Value"/> class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Int32Value.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.Int32Value"/> class using the supplied <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Int32Value.#ctor(DocumentFormat.OpenXml.Int32Value)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.Int32Value"/> by deep copying the supplied <see cref="T:DocumentFormat.OpenXml.Int32Value"/> class.
            </summary>
            <param name="source">The source <see cref="T:DocumentFormat.OpenXml.Int32Value"/> class.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Int32Value.op_Implicit(DocumentFormat.OpenXml.Int32Value)~System.Int32">
            <summary>
            Implicitly converts the specified value to an <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:DocumentFormat.OpenXml.Int32Value"/> to convert.</param>
            <returns>
            The converted <see cref="T:System.Int32"/> value.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Int32Value.op_Implicit(System.Int32)~DocumentFormat.OpenXml.Int32Value">
            <summary>
            Implicitly converts an <see cref="T:System.Int32"/> value to a specified <see cref="T:DocumentFormat.OpenXml.Int32Value"/> instance.
            </summary>
            <param name="value">The specified <see cref="T:System.Int32"/> value.</param>
            <returns>A new <see cref="T:DocumentFormat.OpenXml.Int32Value"/> instance with the value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Int32Value.FromInt32(System.Int32)">
            <summary>
            Returns a new <see cref="T:DocumentFormat.OpenXml.Int32Value"/> object that was created from an <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">An <see cref="T:System.Int32"/> value to use to create a new <see cref="T:DocumentFormat.OpenXml.Int32Value"/> object.</param>
            <returns>An <see cref="T:DocumentFormat.OpenXml.Int32Value"/> that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Int32Value.ToInt32(DocumentFormat.OpenXml.Int32Value)">
            <summary>
            Returns the <see cref="T:System.Int32"/> representation of an <see cref="T:DocumentFormat.OpenXml.Int32Value"/> object.
            </summary>
            <param name="value">
            An <see cref="T:DocumentFormat.OpenXml.Int32Value"/> object to use to retrieve an <see cref="T:System.Int32"/> representation.
            </param>
            <returns>An <see cref="T:System.Int32"/> value that represents an <see cref="T:DocumentFormat.OpenXml.Int32Value"/> object.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Int64Value">
            <summary>
            Represents the <see cref="T:System.Int64"/> value for attributes.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Int64Value.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.Int64Value"/> class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Int64Value.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.Int64Value"/> class using the supplied <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Int64Value.#ctor(DocumentFormat.OpenXml.Int64Value)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.Int64Value"/> by deep copying the supplied <see cref="T:DocumentFormat.OpenXml.Int64Value"/> class.
            </summary>
            <param name="source">The source <see cref="T:DocumentFormat.OpenXml.Int64Value"/> class.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Int64Value.op_Implicit(DocumentFormat.OpenXml.Int64Value)~System.Int64">
            <summary>
            Implicitly converts the specified <see cref="T:DocumentFormat.OpenXml.Int64Value"/> to an <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:DocumentFormat.OpenXml.Int64Value"/> to convert.</param>
            <returns>The converted <see cref="T:System.Int64"/> value.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Int64Value.op_Implicit(System.Int64)~DocumentFormat.OpenXml.Int64Value">
            <summary>
            Implicitly converts an <see cref="T:System.Int64"/> value to an <see cref="T:DocumentFormat.OpenXml.Int64Value"/> value.
            </summary>
            <param name="value">The specified value.</param>
            <returns>A new <see cref="T:DocumentFormat.OpenXml.Int64Value"/> instance with the value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Int64Value.FromInt64(System.Int64)">
            <summary>
            Returns a new <see cref="T:DocumentFormat.OpenXml.Int64Value"/> object that was created from an <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">An <see cref="T:System.Int64"/> value to use to create a new <see cref="T:DocumentFormat.OpenXml.Int64Value"/> object.</param>
            <returns>An <see cref="T:DocumentFormat.OpenXml.Int64Value"/> that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Int64Value.ToInt64(DocumentFormat.OpenXml.Int64Value)">
            <summary>
            Returns the <see cref="T:System.Int64"/> representation of an <see cref="T:DocumentFormat.OpenXml.Int64Value"/> object.
            </summary>
            <param name="value">
            An <see cref="T:DocumentFormat.OpenXml.Int64Value"/> object used to retrieve an <see cref="T:System.Int64"/> representation.
            </param>
            <returns>An <see cref="T:System.Int64"/> value that represents an <see cref="T:DocumentFormat.OpenXml.Int64Value"/> object.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.IntegerValue">
            <summary>
            Represents the xsd:integer value for attributes.
            </summary>
            <remarks>
            Integer is derived from decimal by fixing the value of fractionDigits to be 0 and disallowing the trailing decimal point.
            The value space of integer is the infinite set {...,-2,-1,0,1,2,...}. The base type of integer is decimal.
            </remarks>
        </member>
        <member name="M:DocumentFormat.OpenXml.IntegerValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.IntegerValue"/> class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.IntegerValue.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.IntegerValue"/> class using the supplied <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.IntegerValue.#ctor(DocumentFormat.OpenXml.IntegerValue)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.IntegerValue"/> class by deep copying the supplied <see cref="T:DocumentFormat.OpenXml.IntegerValue"/> class.
            </summary>
            <param name="source">The source <see cref="T:DocumentFormat.OpenXml.IntegerValue"/> class.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.IntegerValue.op_Implicit(DocumentFormat.OpenXml.IntegerValue)~System.Int64">
            <summary>
            Implicitly converts the specified <see cref="T:DocumentFormat.OpenXml.IntegerValue"/> to an <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:DocumentFormat.OpenXml.IntegerValue"/> to convert.</param>
            <returns>
            The converted <see cref="T:System.Int64"/> value.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.IntegerValue.op_Implicit(System.Int64)~DocumentFormat.OpenXml.IntegerValue">
            <summary>
            Implicitly converts the specified <see cref="T:System.Int64"/> value to an <see cref="T:DocumentFormat.OpenXml.IntegerValue"/> class.
            </summary>
            <param name="value">The specified value.</param>
            <returns>A new <see cref="T:DocumentFormat.OpenXml.IntegerValue"/> instance with the value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.IntegerValue.FromInt64(System.Int64)">
            <summary>
            Returns a new <see cref="T:DocumentFormat.OpenXml.IntegerValue"/> object created from an <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">An <see cref="T:System.Int64"/> value to use to create a new <see cref="T:DocumentFormat.OpenXml.IntegerValue"/> object.</param>
            <returns>An <see cref="T:DocumentFormat.OpenXml.IntegerValue"/> that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.IntegerValue.ToInt64(DocumentFormat.OpenXml.IntegerValue)">
            <summary>
            Returns the <see cref="T:System.Int64"/> representation of an <see cref="T:DocumentFormat.OpenXml.IntegerValue"/> object.
            </summary>
            <param name="value">
            An <see cref="T:DocumentFormat.OpenXml.IntegerValue"/> object used to retrieve an <see cref="T:System.Int64"/> representation.
            </param>
            <returns>An <see cref="T:System.Int64"/> value that represents an <see cref="T:DocumentFormat.OpenXml.IntegerValue"/> object.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.ListValue`1">
            <summary>
            Represents the list value attributes (xsd:list).
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.ListValue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.ListValue`1"/> class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.ListValue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.ListValue`1"/> class using the supplied list of values.
            </summary>
            <param name="list">The list of the values.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.ListValue`1.#ctor(DocumentFormat.OpenXml.ListValue{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.ListValue`1"/> class by deep copying the supplied <see cref="T:DocumentFormat.OpenXml.ListValue`1"/> class.
            </summary>
            <param name="list">The source <see cref="T:DocumentFormat.OpenXml.ListValue`1"/> class.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.ListValue`1.HasValue">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.ListValue`1.Items">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.ListValue`1.Parse">
            <summary>
            Convert the text to meaningful value.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.ListValue`1.TryParse">
            <summary>
            Convert the text to meaningful value.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DocumentFormat.OpenXml.ListValue`1.InnerText">
            <summary>
            Gets or sets the inner XML text.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.ListValue`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:DocumentFormat.OpenXml.OnOffValue">
            <summary>
            Defines an <see cref="T:DocumentFormat.OpenXml.OnOffValue"/> data type for attributes that have enum values that are <see cref="T:System.Boolean"/> values that represent: 'true' or 'false', 'on' or 'off', or '0' or '1'.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OnOffValue.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:DocumentFormat.OpenXml.OnOffValue"/> class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OnOffValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:DocumentFormat.OpenXml.OnOffValue"/> class using the supplied <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OnOffValue.#ctor(DocumentFormat.OpenXml.OnOffValue)">
            <summary>
            Initializes a new instance of <see cref="T:DocumentFormat.OpenXml.OnOffValue"/> class using the supplied <see cref="T:DocumentFormat.OpenXml.OnOffValue"/> class.
            </summary>
            <param name="source">The source <see cref="T:DocumentFormat.OpenXml.OnOffValue"/> class.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OnOffValue.Parse(System.String)">
            <summary>
            Gets the real text value of the text value.
            </summary>
            <param name="textValue">The text value which could be 'true', 'false', 'on', 'off', '0', or '1'.</param>
            <returns>True for 'true', 'on', '0', or '1'.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OnOffValue.GetText(System.Boolean)">
            <summary>
            Gets the default text value.
            </summary>
            <param name="boolValue">The boolean value.</param>
            <returns>"1" for <c>true</c>, "0" for <c>false</c>.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OnOffValue.op_Implicit(DocumentFormat.OpenXml.OnOffValue)~System.Boolean">
            <summary>
            Implicitly converts the specified <see cref="T:DocumentFormat.OpenXml.OnOffValue"/> object to a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:DocumentFormat.OpenXml.OnOffValue"/> object to convert.</param>
            <returns>The converted <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OnOffValue.op_Implicit(System.Boolean)~DocumentFormat.OpenXml.OnOffValue">
            <summary>
            Implicitly converts a <see cref="T:System.Boolean"/> value to an <see cref="T:DocumentFormat.OpenXml.OnOffValue"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to convert.</param>
            <returns>The converted <see cref="T:DocumentFormat.OpenXml.OnOffValue"/>.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OnOffValue.FromBoolean(System.Boolean)">
            <summary>
            Returns a new <see cref="T:DocumentFormat.OpenXml.OnOffValue"/> object created from a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">A <see cref="T:System.Boolean"/> value that is used to create a new <see cref="T:DocumentFormat.OpenXml.OnOffValue"/> object.</param>
            <returns>A <see cref="T:DocumentFormat.OpenXml.OnOffValue"/> that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OnOffValue.ToBoolean(DocumentFormat.OpenXml.OnOffValue)">
            <summary>
            Returns the internal <see cref="T:System.Boolean"/> representation of a <see cref="T:DocumentFormat.OpenXml.OnOffValue"/> object.
            </summary>
            <param name="value">A <see cref="T:DocumentFormat.OpenXml.OnOffValue"/> object to retrieve an internal <see cref="T:System.Boolean"/> representation.</param>
            <returns>A <see cref="T:System.Boolean"/> value that represents a <see cref="T:DocumentFormat.OpenXml.OnOffValue"/> object.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlComparableSimpleReference`1">
            <summary>
            Represents a comparable and equatable reference.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleReference`1.#ctor">
            <summary>
            Creates a new instance of <see cref="T:DocumentFormat.OpenXml.OpenXmlComparableSimpleReference`1"/>.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleReference`1.#ctor(DocumentFormat.OpenXml.OpenXmlComparableSimpleReference{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.OpenXmlComparableSimpleReference`1"/>
            class by deep copying the supplied <see cref="T:DocumentFormat.OpenXml.OpenXmlComparableSimpleReference`1"/>
            value.
            </summary>
            <param name="source">The source <see cref="T:DocumentFormat.OpenXml.OpenXmlComparableSimpleReference`1"/> instance.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlComparableSimpleReference`1.Value">
            <summary>
            Gets or sets the value of this instance.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleReference`1.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleReference`1.CompareTo(DocumentFormat.OpenXml.OpenXmlComparableSimpleReference{`0})">
            <inheritdoc />
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleReference`1.Equals(DocumentFormat.OpenXml.OpenXmlComparableSimpleReference{`0})">
            <inheritdoc />
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleReference`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleReference`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleReference`1.op_Equality(DocumentFormat.OpenXml.OpenXmlComparableSimpleReference{`0},DocumentFormat.OpenXml.OpenXmlComparableSimpleReference{`0})">
            <summary>
            Determines whether the specified operands are equal.
            </summary>
            <param name="left">The left operand, or null.</param>
            <param name="right">The right operand, or null.</param>
            <returns>True if the operands are equal; otherwise, false.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleReference`1.op_Inequality(DocumentFormat.OpenXml.OpenXmlComparableSimpleReference{`0},DocumentFormat.OpenXml.OpenXmlComparableSimpleReference{`0})">
            <summary>
            Determines whether the specified operands are not equal.
            </summary>
            <param name="left">The left operand, or null.</param>
            <param name="right">The right operand, or null.</param>
            <returns>True if the operands are not equal; otherwise, false.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleReference`1.op_LessThan(DocumentFormat.OpenXml.OpenXmlComparableSimpleReference{`0},DocumentFormat.OpenXml.OpenXmlComparableSimpleReference{`0})">
            <summary>
            Determines whether the left operand is less than the right operand.
            </summary>
            <param name="left">The left operand, or null.</param>
            <param name="right">The right operand, or null.</param>
            <returns>True if the left operand is less than the right operand; otherwise, false.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleReference`1.op_LessThanOrEqual(DocumentFormat.OpenXml.OpenXmlComparableSimpleReference{`0},DocumentFormat.OpenXml.OpenXmlComparableSimpleReference{`0})">
            <summary>
            Determines whether the left operand is less than or equal to the right operand.
            </summary>
            <param name="left">The left operand, or null.</param>
            <param name="right">The right operand, or null.</param>
            <returns>True if the left operand is less than or equal to the right operand; otherwise, false.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleReference`1.op_GreaterThan(DocumentFormat.OpenXml.OpenXmlComparableSimpleReference{`0},DocumentFormat.OpenXml.OpenXmlComparableSimpleReference{`0})">
            <summary>
            Determines whether the left operand is greater than the right operand.
            </summary>
            <param name="left">The left operand, or null.</param>
            <param name="right">The right operand, or null.</param>
            <returns>True if the left operand is greater than the right operand; otherwise, false.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleReference`1.op_GreaterThanOrEqual(DocumentFormat.OpenXml.OpenXmlComparableSimpleReference{`0},DocumentFormat.OpenXml.OpenXmlComparableSimpleReference{`0})">
            <summary>
            Determines whether the left operand is greater than or equal to the right operand.
            </summary>
            <param name="left">The left operand, or null.</param>
            <param name="right">The right operand, or null.</param>
            <returns>True if the left operand is greater than or equal to the right operand; otherwise, false.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlComparableSimpleValue`1">
            <summary>
            Represents a comparable and equatable value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleValue`1.#ctor">
            <summary>
            Creates a new instance of <see cref="T:DocumentFormat.OpenXml.OpenXmlComparableSimpleValue`1"/>.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleValue`1.#ctor(`0)">
            <summary>
            Creates a new instance of <see cref="T:DocumentFormat.OpenXml.OpenXmlComparableSimpleValue`1"/>.
            </summary>
            <param name="value">The value in type T.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleValue`1.#ctor(DocumentFormat.OpenXml.OpenXmlComparableSimpleValue{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.OpenXmlComparableSimpleValue`1"/>
            class by deep copying the supplied <see cref="T:DocumentFormat.OpenXml.OpenXmlComparableSimpleValue`1"/>
            value.
            </summary>
            <param name="source">The source <see cref="T:DocumentFormat.OpenXml.OpenXmlComparableSimpleValue`1"/> instance.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleValue`1.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleValue`1.CompareTo(`0)">
            <inheritdoc />
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleValue`1.CompareTo(DocumentFormat.OpenXml.OpenXmlComparableSimpleValue{`0})">
            <inheritdoc />
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleValue`1.Equals(`0)">
            <inheritdoc />
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleValue`1.Equals(DocumentFormat.OpenXml.OpenXmlComparableSimpleValue{`0})">
            <inheritdoc />
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleValue`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleValue`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleValue`1.op_Equality(DocumentFormat.OpenXml.OpenXmlComparableSimpleValue{`0},DocumentFormat.OpenXml.OpenXmlComparableSimpleValue{`0})">
            <summary>
            Determines whether the specified operands are equal.
            </summary>
            <param name="left">The left operand, or null.</param>
            <param name="right">The right operand, or null.</param>
            <returns>True if the operands are equal; otherwise, false.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleValue`1.op_Inequality(DocumentFormat.OpenXml.OpenXmlComparableSimpleValue{`0},DocumentFormat.OpenXml.OpenXmlComparableSimpleValue{`0})">
            <summary>
            Determines whether the specified operands are not equal.
            </summary>
            <param name="left">The left operand, or null.</param>
            <param name="right">The right operand, or null.</param>
            <returns>True if the operands are not equal; otherwise, false.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleValue`1.op_LessThan(DocumentFormat.OpenXml.OpenXmlComparableSimpleValue{`0},DocumentFormat.OpenXml.OpenXmlComparableSimpleValue{`0})">
            <summary>
            Determines whether the left operand is less than the right operand.
            </summary>
            <param name="left">The left operand, or null.</param>
            <param name="right">The right operand, or null.</param>
            <returns>True if the left operand is less than the right operand; otherwise, false.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleValue`1.op_LessThanOrEqual(DocumentFormat.OpenXml.OpenXmlComparableSimpleValue{`0},DocumentFormat.OpenXml.OpenXmlComparableSimpleValue{`0})">
            <summary>
            Determines whether the left operand is less than or equal to the right operand.
            </summary>
            <param name="left">The left operand, or null.</param>
            <param name="right">The right operand, or null.</param>
            <returns>True if the left operand is less than or equal to the right operand; otherwise, false.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleValue`1.op_GreaterThan(DocumentFormat.OpenXml.OpenXmlComparableSimpleValue{`0},DocumentFormat.OpenXml.OpenXmlComparableSimpleValue{`0})">
            <summary>
            Determines whether the left operand is greater than the right operand.
            </summary>
            <param name="left">The left operand, or null.</param>
            <param name="right">The right operand, or null.</param>
            <returns>True if the left operand is greater than the right operand; otherwise, false.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlComparableSimpleValue`1.op_GreaterThanOrEqual(DocumentFormat.OpenXml.OpenXmlComparableSimpleValue{`0},DocumentFormat.OpenXml.OpenXmlComparableSimpleValue{`0})">
            <summary>
            Determines whether the left operand is greater than or equal to the right operand.
            </summary>
            <param name="left">The left operand, or null.</param>
            <param name="right">The right operand, or null.</param>
            <returns>True if the left operand is greater than or equal to the right operand; otherwise, false.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlSimpleType">
            <summary>
            Represents the abstract base class for all simple types that are used in attributes.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlSimpleType.#ctor">
            <summary>
            Initializes a new instance of the OpenXmlSimpleType class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlSimpleType.#ctor(DocumentFormat.OpenXml.OpenXmlSimpleType)">
            <summary>
            Initializes a new instance of the OpenXmlSimpleType class.
            </summary>
            <param name="source">The source OpenXmlSimpleType.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlSimpleType.TextValue">
            <summary>
            Gets or sets the internal raw text value.
            DO NOT use this property. Only for OpenXmlSimpleType.cs internal use.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlSimpleType.HasValue">
            <summary>
            Gets a value indicating whether the underneath text value is a valid value.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlSimpleType.InnerText">
            <summary>
            Gets or sets the inner XML text.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlSimpleType.ToString">
            <summary>
            Returns a String that represents the current value.
            </summary>
            <returns>A String that represents the current value. </returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlSimpleType.Clone">
            <summary>
            Creates a duplicate of the current value.
            </summary>
            <remarks>
            This method is a deep copy clone.
            </remarks>
            <returns>The cloned value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlSimpleType.op_Implicit(DocumentFormat.OpenXml.OpenXmlSimpleType)~System.String">
            <summary>
            Implicitly converts a specified attribute value to a String value.
            </summary>
            <param name="xmlAttribute">The OpenXmlSimpleType instance.</param>
            <returns>The converted string value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlSimpleType.IsInVersion(DocumentFormat.OpenXml.FileFormatVersions)">
            <summary>
            Test whether the value is allowed in the specified file format version. Only for EnumValue.
            </summary>
            <param name="fileFormat">The file format version.</param>
            <returns>True if the value is defined in the specified file format version.</returns>
            <remarks>
            Method to support enum validation in schema validation.
            </remarks>
        </member>
        <member name="T:DocumentFormat.OpenXml.OpenXmlSimpleValue`1">
            <summary>
            Represents a generic value for simple value types (such as <see cref="T:System.Int32"/> , <see cref="T:System.UInt32"/>, <see cref="T:System.Byte"/>, etc).
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlSimpleValue`1.#ctor">
            <summary>
            Initializes a new instance of the OpenXmlSimpleValue class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlSimpleValue`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the OpenXmlSimpleValue class.
            </summary>
            <param name="value">The value in type T.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlSimpleValue`1.#ctor(DocumentFormat.OpenXml.OpenXmlSimpleValue{`0})">
            <summary>
            Initializes a new instance of the OpenXmlSimpleValue class by deep copying the supplied OpenXmlSimpleValue class.
            </summary>
            <param name="source">The source OpenXmlSimleValue class.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlSimpleValue`1.HasValue">
            <inheritdoc />
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlSimpleValue`1.Value">
            <summary>
            Gets or sets the value of the simple value.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.OpenXmlSimpleValue`1.InnerText">
            <inheritdoc />
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlSimpleValue`1.Parse(System.String)">
            <summary>
            Convert the text to meaningful value.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlSimpleValue`1.TryParse(System.String,`0@)">
            <summary>
            Convert the text to meaningful value with no exceptions
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlSimpleValue`1.op_Implicit(DocumentFormat.OpenXml.OpenXmlSimpleValue{`0})~`0">
            <summary>
            Implicitly converts the specified value to T.
            </summary>
            <param name="xmlAttribute">The OpenXmlSimpleValue instance.</param>
            <returns>The internal value in the OpenXmlSimpleValue class.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when xmlAttribute is null.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlSimpleValue`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DocumentFormat.OpenXml.OpenXmlSimpleValue`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:DocumentFormat.OpenXml.SByteValue">
            <summary>
            Represents the <see cref="T:System.SByte"/> value for attributes.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.SByteValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.SByteValue"/> class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.SByteValue.#ctor(System.SByte)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.SByteValue"/> class using the supplied <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.SByteValue.#ctor(DocumentFormat.OpenXml.SByteValue)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.SByteValue"/> by deep copying the supplied <see cref="T:DocumentFormat.OpenXml.SByteValue"/> class.
            </summary>
            <param name="source">The source <see cref="T:DocumentFormat.OpenXml.SByteValue"/> class.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.SByteValue.op_Implicit(DocumentFormat.OpenXml.SByteValue)~System.SByte">
            <summary>
            Implicitly converts the specified <see cref="T:DocumentFormat.OpenXml.SByteValue"/> to an <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:DocumentFormat.OpenXml.SByteValue"/> to convert.</param>
            <returns>The converted <see cref="T:System.SByte"/> value.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.SByteValue.op_Implicit(System.SByte)~DocumentFormat.OpenXml.SByteValue">
            <summary>
            Implicitly converts the specified <see cref="T:System.SByte"/> value to an <see cref="T:DocumentFormat.OpenXml.SByteValue"/> instance.
            </summary>
            <param name="value">The specified <see cref="T:System.SByte"/> value.</param>
            <returns>A new <see cref="T:DocumentFormat.OpenXml.SByteValue"/> instance with the value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.SByteValue.FromSByte(System.SByte)">
            <summary>
            Returns a new <see cref="T:DocumentFormat.OpenXml.SByteValue"/> object created from a Byte value.
            </summary>
            <param name="value">An <see cref="T:System.SByte"/> value to use to create a new <see cref="T:DocumentFormat.OpenXml.SByteValue"/> object.</param>
            <returns>An <see cref="T:DocumentFormat.OpenXml.SByteValue"/> that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.SByteValue.ToSByte(DocumentFormat.OpenXml.SByteValue)">
            <summary>
            Returns the <see cref="T:System.SByte"/> representation of an <see cref="T:DocumentFormat.OpenXml.SByteValue"/> object.
            </summary>
            <param name="value">
            An <see cref="T:DocumentFormat.OpenXml.SByteValue"/> object to retrieve an <see cref="T:System.SByte"/> representation.
            </param>
            <returns>An <see cref="T:System.SByte"/> value that represents an <see cref="T:DocumentFormat.OpenXml.SByteValue"/> object.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.SingleValue">
            <summary>
            Represents the <see cref="T:System.Single"/> value for attributes.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.SingleValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.SingleValue"/> class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.SingleValue.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.SingleValue"/> class using the supplied <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.SingleValue.#ctor(DocumentFormat.OpenXml.SingleValue)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.SingleValue"/> class by deep copying the supplied <see cref="T:DocumentFormat.OpenXml.SingleValue"/> class.
            </summary>
            <param name="source">The source <see cref="T:DocumentFormat.OpenXml.SingleValue"/> class.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.SingleValue.op_Implicit(DocumentFormat.OpenXml.SingleValue)~System.Single">
            <summary>
            Implicitly converts the specified <see cref="T:DocumentFormat.OpenXml.SingleValue"/> object to a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:DocumentFormat.OpenXml.SingleValue"/> to convert.</param>
            <returns>
            The converted <see cref="T:System.Single"/> value.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.SingleValue.op_Implicit(System.Single)~DocumentFormat.OpenXml.SingleValue">
            <summary>
            Implicitly converts the specified <see cref="T:System.Single"/> value to a <see cref="T:DocumentFormat.OpenXml.SingleValue"/> object.
            </summary>
            <param name="value">The specified value.</param>
            <returns>A new <see cref="T:DocumentFormat.OpenXml.SingleValue"/> instance with the value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.SingleValue.FromSingle(System.Single)">
            <summary>
            Returns a new <see cref="T:DocumentFormat.OpenXml.SingleValue"/> object that was created from a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">A <see cref="T:System.Single"/> value to use to create a new <see cref="T:DocumentFormat.OpenXml.SingleValue"/> object.</param>
            <returns>A <see cref="T:DocumentFormat.OpenXml.SingleValue"/> object that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.SingleValue.ToSingle(DocumentFormat.OpenXml.SingleValue)">
            <summary>
            Returns the <see cref="T:System.Single"/> value representation of a <see cref="T:DocumentFormat.OpenXml.SingleValue"/> object.
            </summary>
            <param name="value">
            A <see cref="T:DocumentFormat.OpenXml.SingleValue"/> object used to retrieve a <see cref="T:System.Single"/> value representation.
            </param>
            <returns>A <see cref="T:System.Single"/> value that represents a <see cref="T:DocumentFormat.OpenXml.SingleValue"/> object.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.StringValue">
            <summary>
            Represents the string value for attributes.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.StringValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.StringValue"/> class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.StringValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.StringValue"/> class using the supplied string.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.StringValue.#ctor(DocumentFormat.OpenXml.StringValue)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.StringValue"/> class by deep copying the supplied <see cref="T:DocumentFormat.OpenXml.StringValue"/> class.
            </summary>
            <param name="source">The source <see cref="T:DocumentFormat.OpenXml.StringValue"/> class.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.StringValue.Value">
            <summary>
            Gets or sets the string value.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.StringValue.op_Implicit(DocumentFormat.OpenXml.StringValue)~System.String">
            <summary>
            Implicitly converts the specified value to a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:DocumentFormat.OpenXml.StringValue"/> to convert.</param>
            <returns>
            The converted value. Returns <c>null</c>when <paramref name="value"/> is <c>null</c>.
            </returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.StringValue.op_Implicit(System.String)~DocumentFormat.OpenXml.StringValue">
            <summary>
            Implicitly converts the specified <see cref="T:System.String"/> value to a <see cref="T:DocumentFormat.OpenXml.StringValue"/> object.
            </summary>
            <param name="value">The specified value.</param>
            <returns>A new <see cref="T:DocumentFormat.OpenXml.StringValue"/> instance with the value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.StringValue.FromString(System.String)">
            <summary>
            Returns a new <see cref="T:DocumentFormat.OpenXml.StringValue"/> object that was created from a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">A <see cref="T:System.String"/> value to use to create a new <see cref="T:DocumentFormat.OpenXml.StringValue"/> object.</param>
            <returns>A <see cref="T:DocumentFormat.OpenXml.StringValue"/> that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.StringValue.ToString(DocumentFormat.OpenXml.StringValue)">
            <summary>
            Returns the <see cref="T:System.String"/> value representation of a <see cref="T:DocumentFormat.OpenXml.StringValue"/> object.
            </summary>
            <param name="value">
            A <see cref="T:DocumentFormat.OpenXml.StringValue"/> object used to retrieve a <see cref="T:System.String"/> value representation.
            </param>
            <returns>A <see cref="T:System.String"/> value that represents a <see cref="T:DocumentFormat.OpenXml.StringValue"/> object.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.TrueFalseBlankValue">
            <summary>
            Represents the data type for attributes that have enum values that are <see cref="T:System.Boolean"/> values that represent 't' or 'f', or 'true' or 'false'.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.TrueFalseBlankValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.TrueFalseBlankValue"/> class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.TrueFalseBlankValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.TrueFalseBlankValue"/> class using the supplied <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.TrueFalseBlankValue.#ctor(DocumentFormat.OpenXml.TrueFalseBlankValue)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.TrueFalseBlankValue"/> class using the supplied <see cref="T:DocumentFormat.OpenXml.TrueFalseBlankValue"/> class.
            </summary>
            <param name="source">The source <see cref="T:DocumentFormat.OpenXml.TrueFalseBlankValue"/> class.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.TrueFalseBlankValue.op_Implicit(DocumentFormat.OpenXml.TrueFalseBlankValue)~System.Boolean">
            <summary>
            Implicitly converts a <see cref="T:DocumentFormat.OpenXml.TrueFalseBlankValue"/> object to a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The source <see cref="T:DocumentFormat.OpenXml.TrueFalseBlankValue"/> to convert.</param>
            <returns>The converted <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.TrueFalseBlankValue.op_Implicit(System.Boolean)~DocumentFormat.OpenXml.TrueFalseBlankValue">
            <summary>
            Implicitly converts a <see cref="T:System.Boolean"/> value to a TrueFalsBlankValue value.
            </summary>
            <param name="value">The source <see cref="T:System.Boolean"/> value to convert.</param>
            <returns>The converted <see cref="T:DocumentFormat.OpenXml.TrueFalseBlankValue"/> value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.TrueFalseBlankValue.FromBoolean(System.Boolean)">
            <summary>
            Returns a new <see cref="T:DocumentFormat.OpenXml.TrueFalseBlankValue"/> object created from a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">A <see cref="T:System.Boolean"/> value to create a new <see cref="T:DocumentFormat.OpenXml.TrueFalseBlankValue"/> object from.</param>
            <returns>A <see cref="T:DocumentFormat.OpenXml.TrueFalseBlankValue"/> that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.TrueFalseBlankValue.ToBoolean(DocumentFormat.OpenXml.TrueFalseBlankValue)">
            <summary>
            Returns the internal <see cref="T:System.Boolean"/> representation of a <see cref="T:DocumentFormat.OpenXml.TrueFalseBlankValue"/> object.
            </summary>
            <param name="value">A <see cref="T:DocumentFormat.OpenXml.TrueFalseBlankValue"/> object to retrieve an internal <see cref="T:System.Boolean"/> representation.</param>
            <returns>A <see cref="T:System.Boolean"/> value that represents a <see cref="T:DocumentFormat.OpenXml.TrueFalseBlankValue"/> object.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.TrueFalseBlankValue.Parse(System.String)">
            <summary>
            Gets the real boolean value of the text value.
            </summary>
            <param name="textValue">The text value which could be 't', 'f', 'true', 'false', ''.</param>
            <returns>True on text value is 't', 'true'; False on text value is 'f', 'false', '' </returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.TrueFalseBlankValue.GetText(System.Boolean)">
            <summary>
            Gets the text value.
            </summary>
            <param name="boolValue">The boolean value.</param>
            <returns>"t" for True, "f" for false.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.TrueFalseValue">
            <summary>
            Represents the data type for attributes that have enum values that are <see cref="T:System.Boolean"/> values that represent 't' or 'f', or 'true' or 'false'.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.TrueFalseValue.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:DocumentFormat.OpenXml.TrueFalseValue"/> class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.TrueFalseValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:DocumentFormat.OpenXml.TrueFalseValue"/> class using the supplied <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.TrueFalseValue.#ctor(DocumentFormat.OpenXml.TrueFalseValue)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.TrueFalseValue"/> class using the supplied <see cref="T:DocumentFormat.OpenXml.TrueFalseValue"/> class.
            </summary>
            <param name="source">The source <see cref="T:DocumentFormat.OpenXml.TrueFalseValue"/> class.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.TrueFalseValue.op_Implicit(DocumentFormat.OpenXml.TrueFalseValue)~System.Boolean">
            <summary>
            Implicitly converts a <see cref="T:DocumentFormat.OpenXml.TrueFalseValue"/> class to a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:DocumentFormat.OpenXml.TrueFalseValue"/> to convert.</param>
            <returns>The converted <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.TrueFalseValue.op_Implicit(System.Boolean)~DocumentFormat.OpenXml.TrueFalseValue">
            <summary>
            Implicitly converts a <see cref="T:System.Boolean"/> value to a <see cref="T:DocumentFormat.OpenXml.TrueFalseValue"/> instance.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to convert.</param>
            <returns>The converted <see cref="T:DocumentFormat.OpenXml.TrueFalseValue"/> value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.TrueFalseValue.FromBoolean(System.Boolean)">
            <summary>
            Returns a new <see cref="T:DocumentFormat.OpenXml.TrueFalseValue"/> object that was created from a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">A <see cref="T:System.Boolean"/> value to use to create a new <see cref="T:DocumentFormat.OpenXml.TrueFalseValue"/> object.</param>
            <returns>A <see cref="T:DocumentFormat.OpenXml.TrueFalseValue"/> that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.TrueFalseValue.ToBoolean(DocumentFormat.OpenXml.TrueFalseValue)">
            <summary>
            Returns the internal <see cref="T:System.Boolean"/> representation of a <see cref="T:DocumentFormat.OpenXml.TrueFalseValue"/> object.
            </summary>
            <param name="value">A <see cref="T:DocumentFormat.OpenXml.TrueFalseValue"/> object to retrieve an internal <see cref="T:System.Boolean"/> representation.</param>
            <returns>A <see cref="T:System.Boolean"/> value that represents a <see cref="T:DocumentFormat.OpenXml.TrueFalseValue"/> object.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.TrueFalseValue.Parse(System.String)">
            <summary>
            Gets the real boolean value of the text value.
            </summary>
            <param name="textValue">The text value which could be 't', 'f', 'true', 'false'.</param>
            <returns>True on text value is 't', 'true'; False on text value is 'f', 'false'.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.TrueFalseValue.GetText(System.Boolean)">
            <summary>
            Gets the default text value.
            </summary>
            <param name="boolValue">The boolean value.</param>
            <returns>"t" false true, "f" for false.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.UInt16Value">
            <summary>
            Represents the <see cref="T:System.UInt16"/> value for attributes.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.UInt16Value.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.UInt16Value"/> class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.UInt16Value.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.UInt16Value"/> class using the supplied <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.UInt16Value.#ctor(DocumentFormat.OpenXml.UInt16Value)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.UInt16Value"/> class by deep copying the supplied <see cref="T:DocumentFormat.OpenXml.UInt16Value"/> class.
            </summary>
            <param name="source">The source <see cref="T:DocumentFormat.OpenXml.UInt16Value"/> class.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.UInt16Value.op_Implicit(DocumentFormat.OpenXml.UInt16Value)~System.UInt16">
            <summary>
            Implicitly converts the specified <see cref="T:DocumentFormat.OpenXml.UInt16Value"/> object to a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:DocumentFormat.OpenXml.UInt16Value"/> to convert.</param>
            <returns>The converted <see cref="T:System.UInt16"/> value.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.UInt16Value.op_Implicit(System.UInt16)~DocumentFormat.OpenXml.UInt16Value">
            <summary>
            Implicitly converts a <see cref="T:System.UInt16"/> value to a <see cref="T:DocumentFormat.OpenXml.UInt16Value"/> class.
            </summary>
            <param name="value">The specified value.</param>
            <returns>A new <see cref="T:DocumentFormat.OpenXml.UInt16Value"/> instance with the value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.UInt16Value.FromUInt16(System.UInt16)">
            <summary>
            Returns a new <see cref="T:DocumentFormat.OpenXml.UInt16Value"/> object created from a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">A <see cref="T:System.UInt16"/> value to use to create a new <see cref="T:DocumentFormat.OpenXml.UInt16Value"/> object.</param>
            <returns>A <see cref="T:DocumentFormat.OpenXml.UInt16Value"/> that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.UInt16Value.ToUInt16(DocumentFormat.OpenXml.UInt16Value)">
            <summary>
            Returns the <see cref="T:System.UInt16"/> representation of a <see cref="T:DocumentFormat.OpenXml.UInt16Value"/> object.
            </summary>
            <param name="value">
            A <see cref="T:DocumentFormat.OpenXml.UInt16Value"/> object to retrieve a <see cref="T:System.UInt16"/> representation.
            </param>
            <returns>A <see cref="T:System.UInt16"/> value that represents a <see cref="T:DocumentFormat.OpenXml.UInt16Value"/> object.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.UInt32Value">
            <summary>
            Represents the <see cref="T:System.UInt32"/> value for attributes.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.UInt32Value.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.UInt32Value"/> class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.UInt32Value.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.UInt32Value"/> class using the supplied <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.UInt32Value.#ctor(DocumentFormat.OpenXml.UInt32Value)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.UInt32Value"/> class by deep copying the supplied <see cref="T:DocumentFormat.OpenXml.UInt32Value"/> class.
            </summary>
            <param name="source">The source <see cref="T:DocumentFormat.OpenXml.UInt32Value"/> class.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.UInt32Value.op_Implicit(DocumentFormat.OpenXml.UInt32Value)~System.UInt32">
            <summary>
            Implicitly converts the specified <see cref="T:DocumentFormat.OpenXml.UInt32Value"/> class to a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:DocumentFormat.OpenXml.UInt32Value"/> class to convert.</param>
            <returns>The converted <see cref="T:System.UInt32"/> value.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.UInt32Value.op_Implicit(System.UInt32)~DocumentFormat.OpenXml.UInt32Value">
            <summary>
            Implicitly converts a specified <see cref="T:System.UInt32"/> value to a <see cref="T:DocumentFormat.OpenXml.UInt32Value"/> class.
            </summary>
            <param name="value">The specified value.</param>
            <returns>A new <see cref="T:DocumentFormat.OpenXml.UInt32Value"/> instance with the value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.UInt32Value.FromUInt32(System.UInt32)">
            <summary>
            Returns a new <see cref="T:DocumentFormat.OpenXml.UInt32Value"/> object created from a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">A <see cref="T:System.UInt32"/> value to use to create a new <see cref="T:DocumentFormat.OpenXml.UInt32Value"/> object.</param>
            <returns>A <see cref="T:DocumentFormat.OpenXml.UInt32Value"/> class that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.UInt32Value.ToUInt32(DocumentFormat.OpenXml.UInt32Value)">
            <summary>
            Returns the <see cref="T:System.UInt32"/> value representation of a <see cref="T:DocumentFormat.OpenXml.UInt32Value"/> object.
            </summary>
            <param name="value">
            A <see cref="T:DocumentFormat.OpenXml.UInt32Value"/> object used to retrieve a <see cref="T:System.UInt32"/> value representation.
            </param>
            <returns>A <see cref="T:System.UInt32"/> value that represents a <see cref="T:DocumentFormat.OpenXml.UInt32Value"/> object.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.UInt64Value">
            <summary>
            Represents the <see cref="T:System.UInt64"/> value for attributes.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.UInt64Value.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.UInt64Value"/> class.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.UInt64Value.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.UInt64Value"/> class using the supplied <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.UInt64Value.#ctor(DocumentFormat.OpenXml.UInt64Value)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.UInt64Value"/> class by deep copying the <see cref="T:DocumentFormat.OpenXml.UInt64Value"/> class.
            </summary>
            <param name="source">The source <see cref="T:DocumentFormat.OpenXml.UInt64Value"/> class.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.UInt64Value.op_Implicit(DocumentFormat.OpenXml.UInt64Value)~System.UInt64">
            <summary>
            Implicitly converts the specified <see cref="T:DocumentFormat.OpenXml.UInt64Value"/> object to a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:DocumentFormat.OpenXml.UInt64Value"/> object to convert.</param>
            <returns>The converted <see cref="T:System.UInt64"/> value.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.UInt64Value.op_Implicit(System.UInt64)~DocumentFormat.OpenXml.UInt64Value">
            <summary>
            Implicitly converts a specified <see cref="T:System.UInt64"/> value to a <see cref="T:DocumentFormat.OpenXml.UInt64Value"/> class.
            </summary>
            <param name="value">The specified value.</param>
            <returns>A new <see cref="T:DocumentFormat.OpenXml.UInt64Value"/> instance with the value.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.UInt64Value.FromUInt64(System.UInt64)">
            <summary>
            Returns a new <see cref="T:DocumentFormat.OpenXml.UInt64Value"/> object created from a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">A <see cref="T:System.UInt64"/> value to use to create a new <see cref="T:DocumentFormat.OpenXml.UInt64Value"/> object.</param>
            <returns>A <see cref="T:DocumentFormat.OpenXml.UInt64Value"/> that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.UInt64Value.ToUInt64(DocumentFormat.OpenXml.UInt64Value)">
            <summary>
            Returns the <see cref="T:System.UInt64"/> value representation of a <see cref="T:DocumentFormat.OpenXml.UInt64Value"/> object.
            </summary>
            <param name="value">
            A <see cref="T:DocumentFormat.OpenXml.UInt64Value"/> object used to retrieve a <see cref="T:System.UInt64"/> representation.
            </param>
            <returns>A <see cref="T:System.UInt64"/> value that represents a <see cref="T:DocumentFormat.OpenXml.UInt64Value"/> object.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.DocumentValidator">
            <summary>
            DocumentValidator - defines a base class for document validator.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.DocumentValidator.#ctor(DocumentFormat.OpenXml.Validation.ValidationCache)">
            <summary>
            Initializes a new instance of the DocumentValidator.
            </summary>
            <param name="cache">The shared validation cache.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.DocumentValidator.Validate(DocumentFormat.OpenXml.Packaging.OpenXmlPackage,DocumentFormat.OpenXml.Validation.ValidationSettings,System.Threading.CancellationToken)">
            <summary>
            Validate the specified document.
            </summary>
            <param name="document">The document to be validated.</param>
            <param name="settings">The settings to be used during validation.</param>
            <param name="token"></param>
            <returns>Return results in ValidationResult.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.DocumentValidator.Validate(DocumentFormat.OpenXml.Packaging.OpenXmlPart,DocumentFormat.OpenXml.Validation.ValidationSettings,System.Threading.CancellationToken)">
            <summary>
            Validate the specified part.
            </summary>
            <param name="part">The OpenXmlPart to be validated.</param>
            <param name="settings">The settings to be used during validation.</param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.DocumentValidator.PartsToBeValidated(DocumentFormat.OpenXml.Packaging.OpenXmlPackage)">
            <summary>
            Gets all the parts needs to be validated.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.OpenXmlValidator">
            <summary>
            Defines the OpenXmlValidator.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.OpenXmlValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.Validation.OpenXmlValidator"/>.
            </summary>
            <remarks>
            Defaults to <see cref="F:DocumentFormat.OpenXml.FileFormatVersions.Office2007"/>.
            </remarks>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.OpenXmlValidator.#ctor(DocumentFormat.OpenXml.FileFormatVersions)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.Validation.OpenXmlValidator"/>.
            </summary>
            <param name="fileFormat">The target file format to be validated against.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="fileFormat"/> parameter is not a known format.</exception>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.OpenXmlValidator.FileFormat">
            <summary>
            Gets the target file format to be validated against.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.OpenXmlValidator.MaxNumberOfErrors">
            <summary>
            Gets or sets the maximum number of errors the OpenXmlValidator will return.
            Default is <c>1000</c>. A <c>0</c> value means no limitation.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Throw when the value set is less than zero.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.OpenXmlValidator.Validate(DocumentFormat.OpenXml.Packaging.OpenXmlPackage)">
            <summary>
            Validates the specified document.
            </summary>
            <param name="openXmlPackage">The target <see cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackage"/>.</param>
            <returns>A set of validation errors.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="openXmlPackage"/> parameter is null.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.OpenXmlValidator.Validate(DocumentFormat.OpenXml.Packaging.OpenXmlPackage,System.Threading.CancellationToken)">
            <summary>
            Validates the specified document.
            </summary>
            <param name="openXmlPackage">The target <see cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackage"/>.</param>
            <param name="token">Cancellation token</param>
            <returns>A set of validation errors.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="openXmlPackage"/> parameter is null.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.OpenXmlValidator.Validate(DocumentFormat.OpenXml.Packaging.OpenXmlPart)">
            <summary>
            Validates the specified content in the <paramref name="openXmlPart"/>.
            </summary>
            <param name="openXmlPart">The target OpenXmlPart.</param>
            <returns>A set of validation errors.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="openXmlPart"/> parameter is null.</exception>
            <exception cref="T:System.InvalidOperationException">Throw when the specified part is not a defined part in the specified <see cref="P:DocumentFormat.OpenXml.Validation.OpenXmlValidator.FileFormat"/> version.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.OpenXmlValidator.Validate(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.Threading.CancellationToken)">
            <summary>
            Validates the specified content in the <paramref name="openXmlPart"/>.
            </summary>
            <param name="openXmlPart">The target OpenXmlPart.</param>
            <param name="token">Cancellation token</param>
            <returns>A set of validation errors.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="openXmlPart"/> parameter is null.</exception>
            <exception cref="T:System.InvalidOperationException">Throw when the specified part is not a defined part in the specified <see cref="P:DocumentFormat.OpenXml.Validation.OpenXmlValidator.FileFormat"/> version.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.OpenXmlValidator.Validate(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Validates the specified element.
            </summary>
            <param name="openXmlElement">The target OpenXmlElement.</param>
            <returns>A set of validation errors.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="openXmlElement"/> parameter is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="openXmlElement"/> is type of <see cref="T:DocumentFormat.OpenXml.OpenXmlUnknownElement"/>, <see cref="T:DocumentFormat.OpenXml.OpenXmlMiscNode"/>, <see cref="T:DocumentFormat.OpenXml.AlternateContent"/>, <see cref="T:DocumentFormat.OpenXml.AlternateContentChoice"/> or <see cref="T:DocumentFormat.OpenXml.AlternateContentFallback"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the <paramref name="openXmlElement"/> is not defined in the specified <see cref="P:DocumentFormat.OpenXml.Validation.OpenXmlValidator.FileFormat"/>.</exception>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.OpenXmlValidator.Validate(DocumentFormat.OpenXml.OpenXmlElement,System.Threading.CancellationToken)">
            <summary>
            Validates the specified element.
            </summary>
            <param name="openXmlElement">The target OpenXmlElement.</param>
            <param name="token">Cancellation token</param>
            <returns>A set of validation errors.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="openXmlElement"/> parameter is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="openXmlElement"/> is type of <see cref="T:DocumentFormat.OpenXml.OpenXmlUnknownElement"/>, <see cref="T:DocumentFormat.OpenXml.OpenXmlMiscNode"/>, <see cref="T:DocumentFormat.OpenXml.AlternateContent"/>, <see cref="T:DocumentFormat.OpenXml.AlternateContentChoice"/> or <see cref="T:DocumentFormat.OpenXml.AlternateContentFallback"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the <paramref name="openXmlElement"/> is not defined in the specified <see cref="P:DocumentFormat.OpenXml.Validation.OpenXmlValidator.FileFormat"/>.</exception>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.PackageValidator">
            <summary>
            Defines the base class for OpenXmlPackage and OpenXmlPart.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.PackageValidator.Validate(DocumentFormat.OpenXml.FileFormatVersions)">
            <summary>
            Validate against a given version
            </summary>
            <param name="version">Version to validate against</param>
            <returns>The validation errors</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.PackageValidator.ValidateInternal(DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer,DocumentFormat.OpenXml.FileFormatVersions,System.Collections.Generic.Dictionary{DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.Boolean})">
            <summary>
            Validates the package (do not validate the xml content in each part).
            </summary>
            <param name="container">The Open XML container to validate</param>
            <param name="version">Version to validate against</param>
            <param name="processedParts">Parts already processed.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.AllParticleValidator">
            <summary>
            All particle validator.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.AllParticleValidator.#ctor(DocumentFormat.OpenXml.Validation.Schema.CompositeParticle)">
            <summary>
            Initializes a new instance of the AllParticleValidator.
            </summary>
            <param name="particleConstraint"></param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.AllParticleValidator.TryMatch(DocumentFormat.OpenXml.Validation.Schema.ParticleMatchInfo,DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            Try match the particle.
            </summary>
            <param name="particleMatchInfo"></param>
            <param name="validationContext">The context information for validation.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.AllParticleValidator.TryMatchOnce(DocumentFormat.OpenXml.Validation.Schema.ParticleMatchInfo,DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            Try match the particle once.
            </summary>
            <param name="particleMatchInfo"></param>
            <param name="validationContext">The context information for validation.</param>
            <remarks>
            xsd:all can only contain xsd:element children and maxOccurs of each children can only be 1
            </remarks>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.AlternateContentValidator">
            <summary>
            Validator for MarkupCompatibility feature - AlternateContent.
            </summary>
            <remarks>
            See Ecma376 "Part 5: Markup Compatibility and Extensibility" for reference.
            </remarks>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.AlternateContentValidator.Validate(DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            Validate ACB syntax - AlternateContent, Choice, Fallback and their attributes.
            </summary>
            <param name="validationContext"></param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.AlternateContentValidator.ValidateMcAttributesOnAcb(DocumentFormat.OpenXml.Validation.ValidationContext,DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Validate attributes on AlternateContent, Choice and Fallback element.
            </summary>
            <param name="validationContext"></param>
            <param name="acElement">The element to be validated.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.AlternateContentValidator.IsXmlSpaceOrXmlLangAttribue(DocumentFormat.OpenXml.OpenXmlAttribute)">
            <summary>
            Test whether the attribute is "xml:space" or "xml:lang".
            </summary>
            <param name="attribute">The attribute to be tested.</param>
            <returns>True if the attribute is "xml:space" or "xml:lang".</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.AnyParticle">
            <summary>
            Particle constraint data for particle which type is ParticleType.Any.
            </summary>
            <remarks>
            xsd:any can contains only one namespace.
            If there are multiple namespace in the original xsd, it will be split into multiple xsd:any in binary database.
            </remarks>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.AnyParticle.#ctor(DocumentFormat.OpenXml.Validation.Schema.XsdAny,System.Int32,System.Int32,DocumentFormat.OpenXml.FileFormatVersions)">
            <summary>
            Initializes a new instance of the AnyParticle.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.Schema.AnyParticle.NamespaceValue">
            <summary>
            Gets the value of the xsd:any@namespace.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.Schema.AnyParticle.ParticleValidator">
            <inheritdoc/>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.AnyParticleValidator">
            <summary>
            Any particle validator.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.AnyParticleValidator.#ctor(DocumentFormat.OpenXml.Validation.Schema.AnyParticle)">
            <summary>
            Initializes a new instance of the AnyParticleValidator.
            </summary>
            <param name="particleConstraint"></param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.AnyParticleValidator.TryMatchOnce(DocumentFormat.OpenXml.Validation.Schema.ParticleMatchInfo,DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            Try match this element once.
            </summary>
            <param name="particleMatchInfo"></param>
            <param name="validationContext">The context information for validation.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.AnyParticleValidator.TryMatch(DocumentFormat.OpenXml.Validation.Schema.ParticleMatchInfo,DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            Try match this element.
            </summary>
            <param name="particleMatchInfo"></param>
            <param name="validationContext">The context information for validation.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.AnyParticleValidator.GetRequiredElements(DocumentFormat.OpenXml.Validation.Schema.ExpectedChildren)">
            <summary>
            Get the required elements - elements which minOccurs > 0.
            </summary>
            <param name="result"></param>
            <returns>True if there are required elements in this particle.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.AnyParticleValidator.GetRequiredElements">
            <summary>
            Get the required elements - elements which minOccurs > 0.
            </summary>
            <returns>Required elements in this particle.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.AnyParticleValidator.GetExpectedElements(DocumentFormat.OpenXml.Validation.Schema.ExpectedChildren)">
            <summary>
            Get the expected elements - elements which minOccurs >= 0.
            </summary>
            <param name="result"></param>
            <returns>True if there are expected elements in this particle.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.AnyParticleValidator.GetExpectedElements">
            <summary>
            Get the expected elements - elements which minOccurs >= 0.
            </summary>
            <returns>Expected elements in this particle.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.ChoiceParticleValidator">
            <summary>
            Choice particle validator.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ChoiceParticleValidator.#ctor(DocumentFormat.OpenXml.Validation.Schema.CompositeParticle)">
            <summary>
            Initializes a new instance of the ChoiceParticleValidator.
            </summary>
            <param name="particleConstraint"></param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ChoiceParticleValidator.TryMatchOnce(DocumentFormat.OpenXml.Validation.Schema.ParticleMatchInfo,DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            Try match the particle once.
            </summary>
            <param name="particleMatchInfo"></param>
            <param name="validationContext">The context information for validation.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ChoiceParticleValidator.GetRequiredElements(DocumentFormat.OpenXml.Validation.Schema.ExpectedChildren)">
            <summary>
            Get the required elements - elements which minOccurs > 0.
            </summary>
            <param name="result"></param>
            <returns>True if there are required elements in this particle.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.CompatibilityRuleAttributesValidator">
            <summary>
            Compatibility-Rule Attributes
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.CompatibilityRuleAttributesValidator.ValidateMcAttributes(DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            Validate compatibility rule attributes - Ignorable, ProcessContent, PreserveElements, PreserveAttributes, MustUnderstand.
            </summary>
            <param name="validationContext">The validation context.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.CompatibilityRuleAttributesValidator.ValidateQNameList(System.String,System.Collections.Generic.HashSet{System.String},DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            Validate QName list in PreserveElements, PreserveAttributes, ProcessContent.
            </summary>
            <param name="qnameList">The QName list to be validated.</param>
            <param name="ignorableNamespaces">The ignorable namespaces.</param>
            <param name="validationContext"></param>
            <returns>The QName that is not valid.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.CompositeParticle">
            <summary>
            Particle constraint for sequence, choice, all, and group.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.CompositeParticle.#ctor(DocumentFormat.OpenXml.Validation.Schema.ParticleType,System.Int32,System.Int32,System.Boolean,DocumentFormat.OpenXml.FileFormatVersions,DocumentFormat.OpenXml.Framework.ReadOnlyArray{DocumentFormat.OpenXml.Validation.Schema.ParticleConstraint}@)">
            <summary>
            Initializes a new instance of the CompositeParticle.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.Schema.CompositeParticle.ChildrenParticles">
            <summary>
            Gets the children particles.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.Schema.CompositeParticle.ParticleValidator">
            <inheritdoc/>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.CompositeParticleValidator">
            <summary>
            Base class for composite particle - sequence, choice, all, group. Defines some common functions.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.Schema.CompositeParticleValidator.ParticleConstraint">
            <summary>
            Gets the constraint to be validated.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.CompositeParticleValidator.#ctor(DocumentFormat.OpenXml.Validation.Schema.CompositeParticle)">
            <summary>
            Initializes a new instance of the CompositeParticleValidator.
            </summary>
            <param name="particleConstraint"></param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.CompositeParticleValidator.Validate(DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            Be called on root particle of complex type.
            </summary>
            <param name="validationContext"></param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.CompositeParticleValidator.TryMatch(DocumentFormat.OpenXml.Validation.Schema.ParticleMatchInfo,DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            Try match the particle.
            </summary>
            <param name="particleMatchInfo"></param>
            <param name="validationContext">The context information for validation.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.CompositeParticleValidator.GetRequiredElements(DocumentFormat.OpenXml.Validation.Schema.ExpectedChildren)">
            <summary>
            Get the required elements - elements which minOccurs > 0.
            </summary>
            <param name="result"></param>
            <returns>True if there are required elements in this particle.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.CompositeParticleValidator.GetExpectedElements(DocumentFormat.OpenXml.Validation.Schema.ExpectedChildren)">
            <summary>
            Get the expected elements - elements which minOccurs >= 0.
            </summary>
            <param name="result"></param>
            <returns>True if there are expected elements in this particle.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.ElementParticle">
            <summary>
            Particle constraint data for particle which type is ParticleType.Element.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ElementParticle.#ctor(System.Type,System.Int32,System.Int32,DocumentFormat.OpenXml.FileFormatVersions)">
            <summary>
            Initializes a new instance of the ElementParticle.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.Schema.ElementParticle.ParticleValidator">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ElementParticle.TryMatchOnce(DocumentFormat.OpenXml.Validation.Schema.ParticleMatchInfo,DocumentFormat.OpenXml.Validation.ValidationContext)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ElementParticle.TryMatch(DocumentFormat.OpenXml.Validation.Schema.ParticleMatchInfo,DocumentFormat.OpenXml.Validation.ValidationContext)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ElementParticle.GetRequiredElements(DocumentFormat.OpenXml.Validation.Schema.ExpectedChildren)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ElementParticle.GetRequiredElements">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ElementParticle.GetExpectedElements(DocumentFormat.OpenXml.Validation.Schema.ExpectedChildren)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ElementParticle.GetExpectedElements">
            <inheritdoc/>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.ExpectedChildren">
            <summary>
            Hold expected children for error reporting.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ExpectedChildren.Add(System.Type)">
            <summary>
            Add a known element of the child.
            </summary>
            <param name="elementType"></param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ExpectedChildren.Add(System.String)">
            <summary>
            Add namespace string of xsd:any child.
            </summary>
            <param name="namesapceForXsdany"></param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ExpectedChildren.Add(DocumentFormat.OpenXml.Validation.Schema.ExpectedChildren)">
            <summary>
            Add all expected children from another ExpectedChildren.
            </summary>
            <param name="expectedChildren"></param>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.Schema.ExpectedChildren.Count">
            <summary>
            Gets the count of required children elements.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ExpectedChildren.GetExpectedChildrenMessage(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Returns the list of expected children message used in error reporting.
            </summary>
            <param name="parent">The parent element. Used to map ElementTypeId to element name for child element.</param>
            <returns>The Fmt_ListOfPossibleElements sub string to be used in error reporting.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.GroupParticleValidator">
            <summary>
            Group particle validator.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.GroupParticleValidator.#ctor(DocumentFormat.OpenXml.Validation.Schema.CompositeParticle)">
            <summary>
            Initializes a new instance of the ChoiceParticleValidator.
            </summary>
            <param name="particleConstraint"></param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.GroupParticleValidator.TryMatchOnce(DocumentFormat.OpenXml.Validation.Schema.ParticleMatchInfo,DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            Try match the particle once.
            </summary>
            <param name="particleMatchInfo"></param>
            <param name="validationContext">The context information for validation.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.IParticleValidator">
            <summary>
            Defines methods to validate particles.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.IParticleValidator.TryMatchOnce(DocumentFormat.OpenXml.Validation.Schema.ParticleMatchInfo,DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            Try match the particle once.
            </summary>
            <param name="particleMatchInfo"></param>
            <param name="validationContext">The context information for validation.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.IParticleValidator.TryMatch(DocumentFormat.OpenXml.Validation.Schema.ParticleMatchInfo,DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            Try match the particle,
            </summary>
            <param name="particleMatchInfo"></param>
            <param name="validationContext">The context information for validation.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.IParticleValidator.GetRequiredElements(DocumentFormat.OpenXml.Validation.Schema.ExpectedChildren)">
            <summary>
            Get the required elements - elements which minOccurs > 0.
            </summary>
            <param name="result"></param>
            <returns>True if there are required elements in this particle.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.IParticleValidator.GetRequiredElements">
            <summary>
            Get the required elements - elements which minOccurs > 0.
            </summary>
            <returns>Required elements in this particle.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.IParticleValidator.GetExpectedElements(DocumentFormat.OpenXml.Validation.Schema.ExpectedChildren)">
            <summary>
            Get the expected elements - elements which minOccurs >= 0.
            </summary>
            <param name="result"></param>
            <returns>True if there are expected elements in this particle.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.IParticleValidator.GetExpectedElements">
            <summary>
            Get the expected elements - elements which minOccurs >= 0.
            </summary>
            <returns>Expected elements in this particle.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.OpenXmlElementExtensionMethods">
            <summary>
            Static class to hold extension methods for OpenXmlElement.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.OpenXmlElementExtensionMethods.GetChildMc(DocumentFormat.OpenXml.OpenXmlElement,DocumentFormat.OpenXml.OpenXmlElement,DocumentFormat.OpenXml.MCContext,DocumentFormat.OpenXml.FileFormatVersions)">
            <summary>
            Gets the next child (skip all MC elements (skip ACB layer, skip Ignorable element.)).
            </summary>
            <param name="parent">The logic parent element.</param>
            <param name="child">The child element to be tested.</param>
            <param name="mcContext">Markup Compatibility context.</param>
            <param name="format">Targeting file format (Office2007 or Office201).</param>
            <returns>The logic child (when we apply a MC preprocessor).</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.ParticleConstraint">
            <summary>
            A constraint data item for complex type.
            The ParticleType, MinOccurs, MaxOccurs means the constraint of this particle in the parent.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ParticleConstraint.#ctor(DocumentFormat.OpenXml.Validation.Schema.ParticleType,System.Int32,System.Int32,DocumentFormat.OpenXml.FileFormatVersions)">
            <summary>
            Initializes a new instance of the ParticleConstraint.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.Schema.ParticleConstraint.ParticleType">
            <summary>
            Gets the type of the particle.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.Schema.ParticleConstraint.MinOccurs">
            <summary>
            Gets the minOccurs constraint.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.Schema.ParticleConstraint.MaxOccurs">
            <summary>
            Gets the maxOccurs constraint.
            0 means "unbounded".
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.Schema.ParticleConstraint.UnboundedMaxOccurs">
            <summary>
            Gets a value indicating whether the maxOccurs is unbounded.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.Schema.ParticleConstraint.CanOccursMoreThanOne">
            <summary>
            Gets a value indicating whether maxOccurs is unbounded or maxOccurs > 1
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ParticleConstraint.MaxOccursGreaterThan(System.Int32)">
            <summary>
            Test whether the count is valid.
            </summary>
            <param name="count">The count of the occurs.</param>
            <returns>Returns true if maxOccurs="unbounded" or this.MaxOccurs>count.</returns>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.Schema.ParticleConstraint.ParticleValidator">
            <summary>
            Gets a ParticleValidator for this particle constraint.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.ParticleMatch">
            <summary>
            Particle match result.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.ParticleMatchInfo">
            <summary>
            Information about particle match.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ParticleMatchInfo.#ctor">
            <summary>
            Initializes a new instance of the ParticleMatchInfo.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ParticleMatchInfo.#ctor(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Initializes a new instance of the ParticleMatchInfo.
            </summary>
            <param name="startElement"></param>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.Schema.ParticleMatchInfo.Match">
            <summary>
            Gets or sets particle match result.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.Schema.ParticleMatchInfo.StartElement">
            <summary>
            Gets the start element to be matched by a particle rule.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.Schema.ParticleMatchInfo.LastMatchedElement">
            <summary>
            Gets or sets the last element matched by the particle match.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.Schema.ParticleMatchInfo.ErrorMessage">
            <summary>
            Gets or sets message on match error
            </summary>
            <remarks>
            TODO: how can this be decoupled from the validator?
            </remarks>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.Schema.ParticleMatchInfo.ExpectedChildren">
            <summary>
            Gets the element type ids of expected children.
            Fill this field on partial match.
            </summary>
            <remarks>
            Will be null if matched or not matched.
            Will contains the expected child element types if partial match.
            </remarks>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ParticleMatchInfo.SetExpectedChildren(DocumentFormat.OpenXml.Validation.Schema.ExpectedChildren)">
            <summary>
            Purpose:
            Reuse this.ExpectedChildren data field.
            Avoid this.ExpectedChildren be referenced by more than one object (so "this.ExpectedChildren = other.ExpectedChildren" is not allowed).
            </summary>
            <param name="expectedChildren"></param>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.ParticleType">
            <summary>
            Particle type.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.ParticleValidator">
            <summary>
            Base class for particle validator.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ParticleValidator.#ctor">
            <summary>
            Initializes a new instance of the ParticleValidator.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ParticleValidator.Validate(DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            Be called on root particle of complex type.
            </summary>
            <param name="validationContext"></param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ParticleValidator.TryMatchOnce(DocumentFormat.OpenXml.Validation.Schema.ParticleMatchInfo,DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            Try match the particle once.
            </summary>
            <param name="particleMatchInfo"></param>
            <param name="validationContext">The context information for validation.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ParticleValidator.TryMatch(DocumentFormat.OpenXml.Validation.Schema.ParticleMatchInfo,DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            Try match the particle.
            </summary>
            <param name="particleMatchInfo"></param>
            <param name="validationContext">The context information for validation.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ParticleValidator.GetRequiredElements(DocumentFormat.OpenXml.Validation.Schema.ExpectedChildren)">
            <summary>
            Get the required elements - elements which minOccurs > 0.
            </summary>
            <param name="result"></param>
            <returns>True if there are required elements in this particle.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ParticleValidator.GetRequiredElements">
            <summary>
            Get the required elements - elements which minOccurs > 0.
            </summary>
            <returns>Required elements in this particle.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ParticleValidator.GetExpectedElements(DocumentFormat.OpenXml.Validation.Schema.ExpectedChildren)">
            <summary>
            Get the expected elements - elements which minOccurs >= 0.
            </summary>
            <param name="result"></param>
            <returns>True if there are expected elements in this particle.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.ParticleValidator.GetExpectedElements">
            <summary>
            Get the expected elements - elements which minOccurs >= 0.
            </summary>
            <returns>Expected elements in this particle.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.Restrictions.AnyUriRestriction">
            <summary>
            AnyURI (xsd:anyURI) based simple type constraint.
            </summary>
            <remarks>
            anyURI represents a Uniform Resource Identifier Reference (URI).
            An anyURI value can be absolute or relative, and may have an optional fragment identifier (i.e., it may be a URI Reference).
            This type should be used to specify the intention that the value fulfills the role of a URI as defined by [RFC 2396], as amended by [RFC 2732].
            </remarks>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.Restrictions.QnameRestriction">
            <summary>
            QName (xsd:QName) based simple type constraint.
            </summary>
            <remarks>
            QName represents XML qualified names.
            The ·value space· of QName is the set of tuples {namespace name, local part}, where namespace name is an anyURI and local part is an NCName.
            The ·lexical space· of QName is the set of strings that ·match· the QName production of [Namespaces in XML].
            </remarks>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.Restrictions.TokenRestriction">
             <summary>
             Token (xsd:token) based simple type constraint.
             </summary>
             <remarks>
             token represents tokenized strings.
             The ·value space· of token is the set of strings that do not contain the carriage return (#xD),
             line feed (#xA) nor tab (#x9) characters, that have no leading or trailing spaces (#x20) and
             that have no internal sequences of two or more spaces.
             The ·lexical space· of token is the set of strings that do not contain the carriage return (#xD),
             line feed (#xA) nor tab (#x9) characters, that have no leading or trailing spaces (#x20) and
             that have no internal sequences of two or more spaces. The ·base type· of token is normalizedString
            
             In Ecma376, most token are enumerations.
             </remarks>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.Restrictions.TokenRestriction.VerifyTOKEN(System.String)">
            <summary>
            An implementation of XmlConvert.VerifyTOKEN(string) as it is not available cross platform and throws if fails
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.SchemaTypeValidator">
            <summary>
            Validate an OpenXmlElement based on the schema.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.SchemaTypeValidator.Validate(DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            Only validation whether the children elements are valid according to this type's constraint defined in schema.
            </summary>
            <param name="validationContext">The validation context.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.SchemaTypeValidator.ValidateAttributes(DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            Validate the attributes constraint.
            </summary>
            <param name="validationContext">The validation context.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.SchemaTypeValidator.ValidateEmptyComplexType(DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            empty CT, OpenXmlLeafElement
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.SchemaTypeValidator.ValidateEmptyRootComplexType(DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            empty CT, but used as part root element, OpenXmlPartRootElement
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.SchemaTypeValidator.ValidateSimpleContextComplexType(DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            simple content CT, OpenXmlLeafTextElement
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.SchemaTypeValidator.ValidateCompositeComplexType(DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            Composite CT
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.SequenceParticleValidator">
            <summary>
            Sequence particle validator.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.SequenceParticleValidator.#ctor(DocumentFormat.OpenXml.Validation.Schema.CompositeParticle)">
            <summary>
            Initializes a new instance of the SequenceParticleValidator.
            </summary>
            <param name="particleConstraint"></param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.SequenceParticleValidator.TryMatchOnce(DocumentFormat.OpenXml.Validation.Schema.ParticleMatchInfo,DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            Try match the particle once.
            </summary>
            <param name="particleMatchInfo"></param>
            <param name="validationContext">The context information for validation.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.SequenceParticleValidator.GetRequiredElements(DocumentFormat.OpenXml.Validation.Schema.ExpectedChildren)">
            <summary>
            Get the required elements - elements which minOccurs > 0.
            </summary>
            <param name="result"></param>
            <returns>True if there are required elements in this particle.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.SequenceParticleValidator.GetExpectedElements(DocumentFormat.OpenXml.Validation.Schema.ExpectedChildren)">
            <summary>
            Get the expected elements - elements which minOccurs >= 0.
            </summary>
            <param name="result"></param>
            <returns>True if there are expected elements in this particle.</returns>
        </member>
        <member name="F:DocumentFormat.OpenXml.Validation.Schema.XsdAny.Any">
            <summary>
            ##any - Elements from any namespace can be present.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Validation.Schema.XsdAny.Other">
            <summary>
            ##other - Elements from any namespace that is not the target namespace of the parent element containing this element can be present.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Validation.Schema.XsdAny.Local">
            <summary>
            #local - Elements that are not qualified with a namespace can be present.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Validation.Schema.XsdAny.TargetNamespace">
            <summary>
            ##targetNamespace - Elements from the target namespace of the parent element containing this element can be present.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Schema.XsdAnyExtensions.GetNamespaceString(DocumentFormat.OpenXml.Validation.Schema.XsdAny)">
            <summary>
            Get corresponding namespace string for Any, Other, Local and TargetNamespace.
            </summary>
            <param name="value">One of the Any, Other, Local and TargetNamespace.</param>
            <returns>##any, ##other, ##local or ##targetNamespace.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Schema.XsdType">
            <summary>
            All simple types built in to xml schema.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Semantic.AttributeAbsentConditionToNonValue">
            <summary>
            1.15 attribute should be absent if another attribute not equals some value
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Semantic.AttributeAbsentConditionToValue">
            <summary>
            1.14 attribute should be absent if another attribute equals some value
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Semantic.AttributeMinMaxConstraint">
            <summary>
            One attribute value must no bigger than another's.
            Attribute value should be number.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Semantic.AttributeMutualExclusive">
            <summary>
            1.16 only one of a group attributes can exist
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Semantic.AttributePairConstraint">
            <summary>
            Two attributes of one element must appear as a pair.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Semantic.AttributeRequiredConditionToValue">
            <summary>
            1.18 attribute is required if another attribute equals some value
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Semantic.AttributeValueConditionToAnother">
            <summary>
            1.19 attribute should be of some value if another attribute is of some value
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Semantic.AttributeValueLengthConstraint">
            <summary>
            1.12 Attribute value length must be in specified range.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Semantic.AttributeValueLessEqualToAnother">
            <summary>
            1.17 value of one attribute must be less than or equal another's
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Semantic.AttributeValuePatternConstraint">
            <summary>
            1.2 Attribute value should follow specified regular expression
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Semantic.AttributeValueRangeConstraint">
            <summary>
            1.3 Attribute value is a number, it must (or must not) in range of min to max.
            If valid/invalid values are not numbers or not contiguous, AttributeValueSetConstraint should be used.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Semantic.AttributeValueSetConstraint">
            <summary>
            1.4/1.10 Attribute value must (or must not) in specified value set.
            If valid/invalid values are numbers and contiguous, AttributeValueRangeConstraint should be used.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Semantic.IndexReferenceConstraint">
            <summary>
            3.2 Class for package-level constraint "indexed element must exist".
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Semantic.ParentTypeConstraint">
            <summary>
            Element's parent must be/not be of a specified type
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Semantic.ReferenceExistConstraint">
            <summary>
            3.1 Class for package-level constraint "referenced element must exist".
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Semantic.SemanticConstraint">
            <summary>
            Base class for each semantic constraint category.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Semantic.SemanticConstraint.Validate(DocumentFormat.OpenXml.Validation.ValidationContext)">
            <summary>
            Semantic validation logic
            </summary>
            <param name="context">return null if validation succeed</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.Semantic.UniqueAttributeValueConstraint">
            <summary>
            2.3 Element's attribute value should be unique within specified type of element.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Semantic.UniqueAttributeValueConstraint.DuplicateFinder.Add(System.String)">
            <summary>
            Add a text value and track whether it has been seen before or not.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Semantic.UniqueAttributeValueConstraint.DuplicateFinder.Complete">
            <summary>
            Clear the tracking set to free up space
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.Semantic.UniqueAttributeValueConstraint.DuplicateFinder.IsDuplicate(System.String)">
            <summary>
            Checks if a duplicate was detected. Once a duplicate is checked, subsequent calls will result in <c>false</c> so we only raise the error once.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.StateManager.GetOrCreate``2(``1,System.Func{``1,DocumentFormat.OpenXml.Validation.ValidationContext,``0})">
            <summary>
            Method to get or create a cached value. To minimize allocations, the key should track everything that is
            required to generate the item in the factory. If so, then a static lambda can be used to ensure nothing
            else is required and that the key will be correct.
            </summary>
            <typeparam name="TValue">Type of the value produced.</typeparam>
            <typeparam name="TKey">Type of the key provided.</typeparam>
            <param name="key">Provided key that should identify the cached value uniquely.</param>
            <param name="factory">A factory method to create the value.</param>
            <returns>The created or cached value.</returns>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationContext.FileFormat">
            <summary>
            Gets target file format.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.ValidationContext.CheckIfCancelled">
            <summary>
            If a <see cref="T:System.Threading.CancellationToken"/> is used and is canceled, this will throw. Otherwise, it will
            check the number of errors against the <see cref="P:DocumentFormat.OpenXml.Validation.ValidationContext.MaxNumberOfErrors"/>.
            </summary>
            <returns><c>true</c> if error count is too high.</returns>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationContext.McContext">
            <summary>
            Gets used to track MC context.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationContext.CollectExpectedChildren">
            <summary>
            Gets or sets a value indicating whether collect ExpectedChildren or not.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.ValidationContext.GetFirstChildMc">
            <summary>
            Get the first child of this.Element according to the MC Mode.
            </summary>
            <returns>The first child in the MC mode.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.ValidationContext.GetNextChildMc(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Get the next child of this.Element according to the MC Mode.
            </summary>
            <param name="child">The child after which the next child going to be retrieved.</param>
            <returns>The next child after the specified child in the MC mode.</returns>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationContext.MaxNumberOfErrors">
            <summary>
            Gets the maximum number of errors. A zero (0) value means no limitation.
            When the errors >= MaxNumberOfErrors, errors will not be recorded, and MaxNumberOfErrorsEvent will be fired.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.ValidationErrorEventArgs">
            <summary>
            An implementation of <see cref="T:System.EventArgs"/> for validation error event.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationErrorEventArgs.ValidationErrorInfo">
            <summary>
            Gets or sets the validation error.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.ValidationErrorInfo">
            <summary>
            Defines the ValidationErrorInfo.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationErrorInfo.Id">
            <summary>
            Gets the unique identifier of this error.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationErrorInfo.ErrorType">
            <summary>
            Gets the type of this error.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationErrorInfo.Description">
            <summary>
            Gets the description and the suggestion on how to resolve the errors.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationErrorInfo.Path">
            <summary>
            Gets the XmlPath information of this error.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationErrorInfo.Node">
            <summary>
            Gets the OpenXmlElement of the invalid node.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationErrorInfo.Part">
            <summary>
            Gets the part which the invalid element is in.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationErrorInfo.RelatedNode">
            <summary>
            Gets elements related with the invalid node.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationErrorInfo.RelatedPart">
            <summary>
            Gets parts related with the invalid node.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.ValidationErrorType">
            <summary>
            The type of the validation error.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Validation.ValidationErrorType.Schema">
            <summary>
            Schema validation error.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Validation.ValidationErrorType.Semantic">
            <summary>
            Semantic validation error.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Validation.ValidationErrorType.Package">
            <summary>
            Package structure validation error.
            </summary>
        </member>
        <member name="F:DocumentFormat.OpenXml.Validation.ValidationErrorType.MarkupCompatibility">
            <summary>
            Markup Compatibility validation error.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.ValidationResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.ExceptionError">
            <summary>
              Looks up a localized string similar to Inner exception: {0}..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Fmt_AnyElementInNamespace">
            <summary>
              Looks up a localized string similar to any element in namespace &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Fmt_ElementName">
            <summary>
              Looks up a localized string similar to &lt;{0}:{1}&gt;.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Fmt_ElementNameSeparator">
            <summary>
              Looks up a localized string similar to ,.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Fmt_ListOfPossibleElements">
            <summary>
              Looks up a localized string similar to  List of possible elements expected: {0}..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.MC_ErrorOnUnprefixedAttributeName">
            <summary>
              Looks up a localized string similar to The attribute &apos;{0}&apos; needs to specify a proper prefix when defined on an AlternateContent element..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.MC_InvalidIgnorableAttribute">
            <summary>
              Looks up a localized string similar to The Ignorable attribute is invalid - The value &apos;{0}&apos; contains an invalid prefix that is not defined..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.MC_InvalidMustUnderstandAttribute">
            <summary>
              Looks up a localized string similar to The MustUnderstand attribute is invalid - The value &apos;{0}&apos; contains an invalid prefix that is not defined..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.MC_InvalidPreserveAttributesAttribute">
            <summary>
              Looks up a localized string similar to The PreserveAttributes attribute is invalid - The value &apos;{0}&apos; contains invalid qualified names. The ProcessAttributes attribute value cannot reference any attribute name that does not belong to a namespace that is identified by the Ignorable attribute of the same element..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.MC_InvalidPreserveElementsAttribute">
            <summary>
              Looks up a localized string similar to The PreserveElements attribute is invalid - The value &apos;{0}&apos; contains invalid qualified names. The PreserveElements attribute value cannot reference any element name that does not belong to a namespace that is identified by the Ignorable attribute of the same element..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.MC_InvalidProcessContentAttribute">
            <summary>
              Looks up a localized string similar to The ProcessContent attribute is invalid - The value &apos;{0}&apos; contains invalid qualified names. The ProcessContent attribute value cannot reference any element name that does not belong to a namespace that is identified by the Ignorable attribute of the same element..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.MC_InvalidRequiresAttribute">
            <summary>
              Looks up a localized string similar to The Requires attribute is invalid - The value &apos;{0}&apos; contains an invalid prefix that is not defined..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.MC_InvalidXmlAttribute">
            <summary>
              Looks up a localized string similar to The {0} element should not have an xml:lang or xml:space attribute..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.MC_InvalidXmlAttributeWithProcessContent">
            <summary>
              Looks up a localized string similar to An element should not have an xml:lang or xml:space attribute and also be identified by a ProcessContent attribute..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.MC_MissedRequiresAttribute">
            <summary>
              Looks up a localized string similar to All Choice elements must have a Requires attribute whose value contains a whitespace delimited list of namespace prefixes..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.MC_ShallContainChoice">
            <summary>
              Looks up a localized string similar to An AlternateContent element must contain one or more Choice child elements, optionally followed by a Fallback child element..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.MC_ShallNotContainAlternateContent">
            <summary>
              Looks up a localized string similar to An AlternateContent element cannot be the child of an AlternateContent element..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.MoreThanOnePartForOneUri">
            <summary>
              Looks up a localized string similar to Invalid document error: more than one part retrieved for one URI..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Pkg_DataPartReferenceIsNotAllowed">
            <summary>
              Looks up a localized string similar to The package/part &apos;{0}&apos; cannot have a relationship that targets &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Pkg_ExtendedPartIsOpenXmlPart">
            <summary>
              Looks up a localized string similar to An ExtendedPart &apos;{0}&apos; was encountered with a relationship type that starts with &quot;http://schemas.openxmlformats.org&quot;. Expected a defined part instead based on the relationship type..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Pkg_OnlyOnePartAllowed">
            <summary>
              Looks up a localized string similar to The package/part &apos;{0}&apos; can only have one instance of relationship that targets part &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Pkg_PartIsNotAllowed">
            <summary>
              Looks up a localized string similar to The package/part &apos;{0}&apos; cannot have a relationship that targets part &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Pkg_RequiredPartDoNotExist">
            <summary>
              Looks up a localized string similar to A required part &apos;{0}&apos; is missing..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_AllElement">
            <summary>
              Looks up a localized string similar to Element &apos;{0}&apos; cannot appear more than once if content model type is &quot;all&quot;..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_AttributeUnionFailedEx">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; attribute is invalid - The value &apos;{1}&apos; is not valid according to any of the memberTypes of the union..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_AttributeValueDataTypeDetailed">
            <summary>
              Looks up a localized string similar to The attribute &apos;{0}&apos; has invalid value &apos;{1}&apos;.{2}.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_ElementUnionFailedEx">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; element is invalid - The value &apos;{1}&apos; is not valid according to any of the memberTypes of the union..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_ElementValueDataTypeDetailed">
            <summary>
              Looks up a localized string similar to The element &apos;{0}&apos; has invalid value &apos;{1}&apos;.{2}.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_EmptyAttributeValue">
            <summary>
              Looks up a localized string similar to  The attribute value cannot be empty..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_EmptyElementValue">
            <summary>
              Looks up a localized string similar to  The text value cannot be empty..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_EnumerationConstraintFailed">
            <summary>
              Looks up a localized string similar to  The Enumeration constraint failed..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_IncompleteContentExpectingComplex">
            <summary>
              Looks up a localized string similar to The element has incomplete content.{0}.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_InvalidChildinLeafElement">
            <summary>
              Looks up a localized string similar to The element &apos;{0}&apos; is a leaf element and cannot contain children..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_InvalidElementContentExpectingComplex">
            <summary>
              Looks up a localized string similar to The element has invalid child element &apos;{0}&apos;.{1}.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_InvalidElementContentWrongType">
            <summary>
              Looks up a localized string similar to The element has child element &apos;{0}&apos; of invalid type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_LengthConstraintFailed">
            <summary>
              Looks up a localized string similar to  The actual length according to data type &apos;{0}&apos; is not equal to the specified length. The expected length is {1}..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_MaxExclusiveConstraintFailed">
            <summary>
              Looks up a localized string similar to  The MaxExclusive constraint failed. The value must be less than {0}..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_MaxInclusiveConstraintFailed">
            <summary>
              Looks up a localized string similar to  The MaxInclusive constraint failed. The value must be less than or equal to {0}..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_MaxLengthConstraintFailed">
            <summary>
              Looks up a localized string similar to  The actual length according to data type &apos;{0}&apos; is greater than the MaxLength value. The length must be smaller than or equal to {1}..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_MinExclusiveConstraintFailed">
            <summary>
              Looks up a localized string similar to  The MinExclusive constraint failed. The value must be greater than {0}..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_MinInclusiveConstraintFailed">
            <summary>
              Looks up a localized string similar to  The MinInclusive constraint failed. The value must be greater than or equal to {0}..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_MinLengthConstraintFailed">
            <summary>
              Looks up a localized string similar to  The actual length according to data type &apos;{0}&apos; is less than the MinLength value. The length must be bigger than or equal to {1}..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_MissRequiredAttribute">
            <summary>
              Looks up a localized string similar to The required attribute &apos;{0}&apos; is missing..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_PatternConstraintFailed">
            <summary>
              Looks up a localized string similar to  The Pattern constraint failed. The expected pattern is {0}..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_StringIsNotValidValue">
            <summary>
              Looks up a localized string similar to  The string &apos;{0}&apos; is not a valid &apos;{1}&apos; value..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_TotalDigitsConstraintFailed">
            <summary>
              Looks up a localized string similar to  The TotalDigits constraint failed. The expected number of digits is {0}..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_UndeclaredAttribute">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; attribute is not declared..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sch_UnexpectedElementContentExpectingComplex">
            <summary>
              Looks up a localized string similar to The element has unexpected child element &apos;{0}&apos;.{1}.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sem_AttributeAbsentConditionToNonValue">
            <summary>
              Looks up a localized string similar to Attribute &apos;{0}&apos; should be absent when the value of attribute &apos;{1}&apos; is not {2}..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sem_AttributeAbsentConditionToValue">
            <summary>
              Looks up a localized string similar to Attribute &apos;{0}&apos; should be absent when the value of attribute &apos;{1}&apos; is {2}..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sem_AttributeMutualExclusive">
            <summary>
              Looks up a localized string similar to Attribute &apos;{0}&apos; and &apos;{1}&apos; cannot be present at the same time. Only one of these attributes &apos;{2}&apos; can be present at a given time..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sem_AttributeRequiredConditionToValue">
            <summary>
              Looks up a localized string similar to Attribute &apos;{0}&apos; should be present when the value of attribute &apos;{1}&apos; is &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sem_AttributeValueConditionToAnother">
            <summary>
              Looks up a localized string similar to Attribute &apos;{0}&apos; should have value(s) {1} when attribute &apos;{2}&apos; has value(s) {3}. Current value of attribute &apos;{4}&apos; is &apos;{5}&apos;..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sem_AttributeValueDataTypeDetailed">
            <summary>
              Looks up a localized string similar to The attribute &apos;{0}&apos; has invalid value &apos;{1}&apos;.{2}.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sem_AttributeValueLessEqualToAnother">
            <summary>
              Looks up a localized string similar to Attribute &apos;{0}&apos; has value &apos;{1}&apos;. It should be less than or equal to the value of attribute &apos;{2}&apos; which is &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sem_AttributeValueLessEqualToAnotherEx">
            <summary>
              Looks up a localized string similar to Attribute &apos;{0}&apos; has value &apos;{1}&apos;. It should be less than the value of attribute &apos;{2}&apos; which is &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sem_AttributeValueUniqueInDocument">
            <summary>
              Looks up a localized string similar to Attribute &apos;{0}&apos; should have unique value in the whole document. Its current value &apos;{1}&apos; duplicates with others..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sem_CellValue">
            <summary>
              Looks up a localized string similar to Cell contents have invalid value &apos;{0}&apos; for type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sem_IncorrectRelationshipType">
            <summary>
              Looks up a localized string similar to Relationship &apos;{0}&apos; referenced by attribute &apos;{1}&apos; has incorrect type. Its type should be &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sem_InvalidRelationshipId">
            <summary>
              Looks up a localized string similar to The relationship &apos;{0}&apos; referenced by attribute &apos;{1}&apos; does not exist..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sem_MaxLengthConstraintFailed">
            <summary>
              Looks up a localized string similar to  The actual length is greater than the MaxLength value. The length must be smaller than or equal to {0}..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sem_MinLengthConstraintFailed">
            <summary>
              Looks up a localized string similar to  The actual length is less than the MinLength value. The length must be bigger than or equal to {0}..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sem_MissingIndexedElement">
            <summary>
              Looks up a localized string similar to Element &apos;{0}&apos; referenced by &apos;{1}@{2}&apos; does not exist in part &apos;{3}&apos;. The index is &apos;{4}&apos;..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sem_MissingReferenceElement">
            <summary>
              Looks up a localized string similar to Element &apos;{0}&apos; referenced by &apos;{1}@{2}&apos; does not exist in part &apos;{3}&apos;. The reference value is &apos;{4}&apos;..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.Sem_UniqueAttributeValue">
            <summary>
              Looks up a localized string similar to Attribute &apos;{0}&apos; should have unique value. Its current value &apos;{1}&apos; duplicates with others..
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.TypeName_base64Binary">
            <summary>
              Looks up a localized string similar to http://www.w3.org/2001/XMLSchema:base64Binary.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.TypeName_hexBinary">
            <summary>
              Looks up a localized string similar to http://www.w3.org/2001/XMLSchema:hexBinary.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.TypeName_ID">
            <summary>
              Looks up a localized string similar to http://www.w3.org/2001/XMLSchema:ID.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.TypeName_Integer">
            <summary>
              Looks up a localized string similar to http://www.w3.org/2001/XMLSchema:integer.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.TypeName_language">
            <summary>
              Looks up a localized string similar to http://www.w3.org/2001/XMLSchema:language.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.TypeName_NCName">
            <summary>
              Looks up a localized string similar to http://www.w3.org/2001/XMLSchema:NCName.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.TypeName_nonNegativeInteger">
            <summary>
              Looks up a localized string similar to http://www.w3.org/2001/XMLSchema:nonNegativeInteger.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.TypeName_positiveInteger">
            <summary>
              Looks up a localized string similar to http://www.w3.org/2001/XMLSchema:positiveInteger.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.TypeName_QName">
            <summary>
              Looks up a localized string similar to http://www.w3.org/2001/XMLSchema:QName.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationResources.TypeName_token">
            <summary>
              Looks up a localized string similar to http://www.w3.org/2001/XMLSchema:token.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Validation.ValidationSettings">
            <summary>
            Settings for validation.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.ValidationSettings.#ctor(DocumentFormat.OpenXml.FileFormatVersions)">
            <summary>
            Initializes a new instance of the ValidationSettings.
            </summary>
            <param name="fileFormat">The target file format.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationSettings.FileFormat">
            <summary>
            Gets the target file format.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Validation.ValidationSettings.MaxNumberOfErrors">
            <summary>
            Gets or sets the maximum number of errors the OpenXmlValidator will return.
            Default is 1000.  A zero (0) value means no limitation.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Validation.ValidationTraverser.ValidatingTraverse(DocumentFormat.OpenXml.Validation.ValidationContext,System.Action{DocumentFormat.OpenXml.Validation.ValidationContext})">
            <summary>
            Enumerate all the descendants elements of this element and do validating.
            Preorder traversing.
            </summary>
            <param name="validationContext"></param>
            <param name="validateAction">The delegate method to do the validating.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.XmlConvertingReader">
            <summary>
            Defines the XmlConvertingReader - This XmlReader tries to replace the Strict namespaces with equivalent Transitional namespaces.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.XmlConvertingReader.#ctor(System.Xml.XmlReader,DocumentFormat.OpenXml.Features.IOpenXmlNamespaceResolver,System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:DocumentFormat.OpenXml.XmlConvertingReader"/>
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.BaseReader">
            <summary>
            Gets the inner <see cref="T:System.Xml.XmlReader"/>
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.StrictRelationshipFound">
            <summary>
            Gets a value indicating whether strict translation is enabled.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.XmlConvertingReader.Close">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.XmlConvertingReader.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.XmlConvertingReader.Read">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.XmlConvertingReader.GetAttribute(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.XmlConvertingReader.GetAttribute(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.XmlConvertingReader.GetAttribute(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.XmlConvertingReader.LookupNamespace(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.XmlConvertingReader.MoveToAttribute(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.XmlConvertingReader.MoveToAttribute(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.XmlConvertingReader.MoveToAttribute(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.XmlConvertingReader.MoveToElement">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.XmlConvertingReader.MoveToFirstAttribute">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.XmlConvertingReader.MoveToNextAttribute">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.XmlConvertingReader.ReadAttributeValue">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.XmlConvertingReader.ResolveEntity">
            <inheritdoc/>
        </member>
        <member name="M:DocumentFormat.OpenXml.XmlConvertingReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.AttributeCount">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.BaseURI">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.CanReadBinaryContent">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.CanReadValueChunk">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.CanResolveEntity">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.Depth">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.EOF">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.HasValue">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.IsDefault">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.IsEmptyElement">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.Item(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.LocalName">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.Name">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.NamespaceURI">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.NameTable">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.NodeType">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.Prefix">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.QuoteChar">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.ReadState">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.Value">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.XmlLang">
            <inheritdoc/>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlConvertingReader.XmlSpace">
            <inheritdoc/>
        </member>
        <member name="T:DocumentFormat.OpenXml.XmlConvertingReaderFactory">
            <summary>
            Defines the XmlConvertingReaderFactory.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.XmlPath">
            <summary>
            Defines XPath like information for OpenXmlElement.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.XmlPath.#ctor(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.XmlPath"/> from
            the specified <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/>.
            </summary>
            <param name="element">
            The <see cref="T:DocumentFormat.OpenXml.OpenXmlElement"/>.
            </param>
        </member>
        <member name="M:DocumentFormat.OpenXml.XmlPath.#ctor(DocumentFormat.OpenXml.Packaging.OpenXmlPart)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.XmlPath"/> from
            the specified <see cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPart"/>.
            </summary>
            <param name="part">The <see cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPart"/>.</param>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlPath.Namespaces">
            <summary>
            Gets the namespace definitions used in <see cref="P:DocumentFormat.OpenXml.XmlPath.XPath"/>
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlPath.XPath">
            <summary>
            Gets the XPath string.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.XmlPath.PartUri">
            <summary>
            Gets the internal URI of the part relative to the package root.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.XmlPath.GetXPath(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Gets XmlPath information of the specified OpenXmlElement.
            </summary>
            <param name="element">The OpenXmlElement.</param>
            <returns>XmlPath to this element from root element.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.TypeExtensions">
            <summary>
            TypeInfo is used in the code base as .NET Standard requires it. However, .NET 4.0 and .NET 3.5 do not have this or other
            convience methods introduced in .NET 4.5 that are used. This provides similar functionality.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
             Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
              This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
              feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class, specifying the ID that the compiler will use
             when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
             Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
             The diagnostic ID is shown in build output for warnings and errors.
             <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
             Gets or sets the URL for corresponding documentation.
             The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
            Specifies that null is allowed as an input even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
            Specifies that null is disallowed as an input even if the corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets a value indicating whether the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets a value indicating whether the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets a value indicating whether the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets a value indicating whether the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
    </members>
</doc>
