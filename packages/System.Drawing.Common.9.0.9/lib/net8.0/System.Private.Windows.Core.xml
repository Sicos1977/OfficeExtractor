<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Private.Windows.Core</name>
    </assembly>
    <members>
        <member name="T:System.BufferScope`1">
            <summary>
             Allows renting a buffer from <see cref="T:System.Buffers.ArrayPool`1"/> with a using statement. Can be used directly as if it
             were a <see cref="T:System.Span`1"/>.
            </summary>
            <remarks>
             <para>
              Buffers are not cleared and as such their initial contents will be random.
             </para>
            </remarks>
        </member>
        <member name="M:System.BufferScope`1.#ctor(System.Span{`0})">
            <summary>
             Create the <see cref="T:System.BufferScope`1"/> with an initial buffer. Useful for creating with an initial stack
             allocated buffer.
            </summary>
        </member>
        <member name="M:System.BufferScope`1.#ctor(System.Span{`0},System.Int32)">
            <summary>
             Create the <see cref="T:System.BufferScope`1"/> with an initial buffer. Useful for creating with an initial stack
             allocated buffer.
            </summary>
            <remarks>
             <para>
              <example>
               <para>Creating with a stack allocated buffer:</para>
               <code>using BufferScope&lt;char> buffer = new(stackalloc char[64]);</code>
              </example>
             </para>
             <para>
              Stack allocated buffers should be kept small to avoid overflowing the stack.
             </para>
            </remarks>
            <param name="minimumLength">
             The required minimum length. If the <paramref name="initialBuffer"/> is not large enough, this will rent from
             the shared <see cref="T:System.Buffers.ArrayPool`1"/>.
            </param>
        </member>
        <member name="M:System.BufferScope`1.EnsureCapacity(System.Int32,System.Boolean)">
            <summary>
             Ensure that the buffer has enough space for <paramref name="capacity"/> number of elements.
            </summary>
            <remarks>
             <para>
              Consider if creating new <see cref="T:System.BufferScope`1"/> instances is possible and cleaner than using
              this method.
             </para>
            </remarks>
            <param name="copy">True to copy the existing elements when new space is allocated.</param>
        </member>
        <member name="T:System.Collections.Generic.ArrayBuilder`1">
            <summary>
             Array based collection that tries to avoid copying the internal array and caps the maximum capacity.
            </summary>
            <remarks>
             <para>
              To mitigate corrupted length attacks, the backing array has an initial allocation size cap.
             </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.ArrayBuilder`1.#ctor(System.Int32)">
            <param name="expectedCount">
             The <see cref="F:System.Collections.Generic.ArrayBuilder`1._count"/> cannot grow past this value and is expected to be this value
             when the collection is "finished".
            </param>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtensions.CreateTrimmedList``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32)">
            <summary>
             Creates a list trimmed to the given count.
            </summary>
            <remarks>
             <para>
              This is an optimized implementation that avoids iterating over the entire list when possible.
             </para>
            </remarks>
        </member>
        <member name="T:System.Collections.Generic.ListConverter`2">
            <summary>
             Helper class for converting values.
            </summary>
            <remarks>
             <para>
              It is intended to save the allocation of a temporary list when converting values. If there are multiple passes
              through the list this class should usually be avoided.
             </para>
            </remarks>
        </member>
        <member name="M:System.DisposalTracking.SuppressFinalize(System.Object)">
            <summary>
             Used to suppress finalization in debug builds only.
            </summary>
            <remarks>
             <para>
              Unfortunately this can only be used when there is a single implicit conversion operator when called from
              a ref struct. C# tries to cast to anything that fits in object, which leads to an ambiguous error.
             </para>
             <para>
              You need to add GC.SuppressFinalize under #ifdef when you don't have a single implicit conversion.
             </para>
            </remarks>
        </member>
        <member name="T:System.Drawing.ApplyGraphicsProperties">
            <summary>
             Enumeration defining the different Graphics properties to apply to an <see cref="T:Windows.Win32.Graphics.Gdi.HDC"/> when creating it
             from a Graphics object.
            </summary>
        </member>
        <member name="F:System.Drawing.ApplyGraphicsProperties.Clipping">
            <summary>
             Apply clipping region.
            </summary>
        </member>
        <member name="F:System.Drawing.ApplyGraphicsProperties.TranslateTransform">
            <summary>
             Apply coordinate transformation.
            </summary>
        </member>
        <member name="F:System.Drawing.ApplyGraphicsProperties.All">
            <summary>
             Apply all supported Graphics properties.
            </summary>
        </member>
        <member name="M:System.Drawing.ImageCodecInfoHelper.GetEncoderClsid(System.Guid)">
            <summary>
             Get the encoder guid for the given image format guid.
            </summary>
        </member>
        <member name="T:System.Drawing.IGraphicsHdcProvider">
            <summary>
             Used to provide a way to give <see cref="T:Windows.Win32.Graphics.Gdi.DeviceContextHdcScope"/> direct internal access to HDC's.
            </summary>
        </member>
        <member name="P:System.Drawing.IGraphicsHdcProvider.IsGraphicsStateClean">
            <summary>
             If this flag is true we expect that the <see cref="T:Windows.Win32.Graphics.GdiPlus.GpGraphics"/> object obtained through
             <see cref="M:System.Drawing.IGraphicsHdcProvider.GetGraphics(System.Boolean)"/> should not have a <see cref="T:Windows.Win32.Graphics.GdiPlus.GpRegion"/> clip or GpMatrix
             applied and therefore it is safe to skip getting them.
            </summary>
            <remarks>
             <para>
              If a <see cref="T:Windows.Win32.Graphics.GdiPlus.GpGraphics"/> object hasn't been created it, by definition, will be clean when it is
              created, so this will return true.
             </para>
            </remarks>
        </member>
        <member name="M:System.Drawing.IGraphicsHdcProvider.GetHdc">
            <summary>
             Gets the <see cref="T:Windows.Win32.Graphics.Gdi.HDC"/>, if the object was created from one.
            </summary>
        </member>
        <member name="M:System.Drawing.IGraphicsHdcProvider.GetGraphics(System.Boolean)">
            <summary>
             Get the <see cref="T:Windows.Win32.Graphics.GdiPlus.GpGraphics"/> object.
            </summary>
            <param name="createIfNeeded">
             If true, this will pass back a <see cref="T:Windows.Win32.Graphics.GdiPlus.GpGraphics"/> object, creating a new one *if* needed.
             If false, will pass back a <see cref="T:Windows.Win32.Graphics.GdiPlus.GpGraphics"/> object *if* one exists, otherwise returns null.
            </param>
            <remarks>
             <para>Do not dispose of the returned <see cref="T:Windows.Win32.Graphics.GdiPlus.GpGraphics"/> object.</para>
            </remarks>
        </member>
        <member name="M:System.ExceptionExtensions.IsCriticalException(System.Exception)">
            <summary>
             Returns <see langword="true"/> if the exception is an exception that isn't recoverable and/or a likely
             bug in our implementation.
            </summary>
        </member>
        <member name="M:System.IO.BinaryReaderExtensions.ReadDateTime(System.IO.BinaryReader)">
            <summary>
             Reads a binary formatted <see cref="T:System.DateTime"/> from the given <paramref name="reader"/>.
            </summary>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The data was invalid.</exception>
        </member>
        <member name="M:System.IO.BinaryReaderExtensions.CreateDateTimeFromData(System.Int64)">
            <summary>
             Creates a <see cref="T:System.DateTime"/> object from raw data with validation.
            </summary>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><paramref name="data"/> was invalid.</exception>
        </member>
        <member name="M:System.IO.BinaryReaderExtensions.Remaining(System.IO.BinaryReader)">
            <summary>
             Returns the remaining amount of bytes in the given <paramref name="reader"/>.
            </summary>
        </member>
        <member name="M:System.IO.BinaryReaderExtensions.ReadPrimitiveArray``1(System.IO.BinaryReader,System.Int32)">
            <summary>
             Reads an array of primitives.
            </summary>
            <inheritdoc cref="M:System.IO.BinaryReaderExtensions.WritePrimitives``1(System.IO.BinaryWriter,System.Collections.Generic.IReadOnlyList{``0})"/>
        </member>
        <member name="M:System.IO.BinaryReaderExtensions.WritePrimitives``1(System.IO.BinaryWriter,System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
             Writes a collection of primitives.
            </summary>
            <remarks>
             <para>
              Only supports <see langword="bool"/>, <see langword="byte"/>, <see langword="sbyte"/>, <see langword="char"/>,
              <see langword="short"/>, <see langword="ushort"/>, <see langword="int"/>, <see langword="uint"/>,
              <see langword="long"/>, <see langword="ulong"/>, <see langword="float"/>, <see langword="double"/>,
              <see langword="decimal"/>, <see cref="T:System.DateTime"/>, and <see cref="T:System.TimeSpan"/>.
             </para>
            </remarks>
        </member>
        <member name="M:System.IO.BinaryWriterExtensions.Write(System.IO.BinaryWriter,System.DateTime)">
            <summary>
             Writes a <see cref="T:System.DateTime"/> object to the given <paramref name="writer"/>.
            </summary>
        </member>
        <member name="M:System.IO.BinaryWriterExtensions.Write(System.IO.BinaryWriter,System.Collections.Generic.IReadOnlyList{System.Private.Windows.Core.BinaryFormat.MemberTypeInfo})">
            <summary>
             Writes <see cref="T:System.Private.Windows.Core.BinaryFormat.MemberTypeInfo"/>.
            </summary>
        </member>
        <member name="T:System.IO.Compression.RunLengthEncoder">
            <summary>
             Simple run length encoder (RLE) that works on spans.
            </summary>
            <remarks>
             <para>
              Format used is a byte for the count, followed by a byte for the value.
             </para>
            </remarks>
        </member>
        <member name="M:System.IO.Compression.RunLengthEncoder.GetEncodedLength(System.ReadOnlySpan{System.Byte})">
            <summary>
             Get the encoded length, in bytes, of the given data.
            </summary>
        </member>
        <member name="M:System.IO.Compression.RunLengthEncoder.GetDecodedLength(System.ReadOnlySpan{System.Byte})">
            <summary>
             Get the decoded length, in bytes, of the given encoded data.
            </summary>
        </member>
        <member name="M:System.IO.Compression.RunLengthEncoder.TryEncode(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
            <summary>
             Encode the given data into the given <paramref name="encoded"/> span.
            </summary>
            <returns>
             <see langword="false"/> if the <paramref name="encoded"/> span was not large enough to hold the encoded data.
            </returns>
        </member>
        <member name="M:System.IO.StreamExtensions.ToIStream(System.IO.Stream,System.Boolean)">
            <summary>
             Get a <see cref="T:Windows.Win32.System.Com.IStream"/> wrapper around the given <paramref name="stream"/>. Use the return value
             in a <see langword="using"/> scope.
            </summary>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.ArrayInfo">
            <summary>
             Array information structure.
            </summary>
            <remarks>
             <para>
              <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/8fac763f-e46d-43a1-b360-80eb83d2c5fb">
               [MS-NRBF] 2.4.2.1
              </see>
             </para>
            </remarks>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.ArrayRecord">
            <summary>
             Base class for array records.
            </summary>
            <devdoc>
             <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/f57d41e5-d3c0-4340-add8-fa4449a68d1c">
             [MS-NRBF] 2.4</see> describes how item records must follow the array record and how multiple null records
             can be coalesced into an <see cref="T:System.Private.Windows.Core.BinaryFormat.NullRecord.ObjectNullMultiple"/> or <see cref="T:System.Private.Windows.Core.BinaryFormat.NullRecord.ObjectNullMultiple256"/>
             record.
            </devdoc>
        </member>
        <member name="P:System.Private.Windows.Core.BinaryFormat.ArrayRecord.ObjectId">
            <summary>
             Identifier for the array.
            </summary>
        </member>
        <member name="P:System.Private.Windows.Core.BinaryFormat.ArrayRecord.Length">
            <summary>
             Length of the array.
            </summary>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.ArrayRecord`1">
            <summary>
             Typed class for array records.
            </summary>
        </member>
        <member name="P:System.Private.Windows.Core.BinaryFormat.ArrayRecord`1.ArrayObjects">
            <summary>
             The array items.
            </summary>
            <remarks>
             <para>
              Multi-null records are always expanded to individual <see cref="T:System.Private.Windows.Core.BinaryFormat.ObjectNull"/> entries when reading.
             </para>
            </remarks>
        </member>
        <member name="P:System.Private.Windows.Core.BinaryFormat.ArrayRecord`1.Item(System.Int32)">
            <summary>
             Returns the item at the given index.
            </summary>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.ArraySingleObject">
            <summary>
             Single dimensional array of objects.
            </summary>
            <remarks>
             <para>
              <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/982b2f50-6367-402a-aaf2-44ee96e2a5e0">
               [MS-NRBF] 2.4.3.2
              </see>
             </para>
            </remarks>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.ArraySinglePrimitive`1">
            <summary>
             Single dimensional array of a primitive type.
            </summary>
            <remarks>
             <para>
              <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/3a50a305-5f32-48a1-a42a-c34054db310b">
               [MS-NRBF] 2.4.3.3
              </see>
             </para>
            </remarks>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.ArraySingleString">
            <summary>
             Single dimensional array of strings.
            </summary>
            <remarks>
             <para>
              <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/3d98fd60-d2b4-448a-ac0b-3cd8dea41f9d">
               [MS-NRBF] 2.4.3.4
              </see>
             </para>
            </remarks>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.BinaryFormattedObjectExtensions.Dereference(System.Private.Windows.Core.BinaryFormat.IReadOnlyRecordMap,System.Private.Windows.Core.BinaryFormat.IRecord)">
            <summary>
             Dereferences <see cref="T:System.Private.Windows.Core.BinaryFormat.MemberReference"/> records.
            </summary>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.BinaryFormatWriter">
            <summary>
             Writer that writes specific types in binary format without using the BinaryFormatter.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.BinaryFormatWriter.WriteString(System.IO.Stream,System.String)">
            <summary>
             Writes a <see langword="string"/> in binary format.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.BinaryFormatWriter.WriteDecimal(System.IO.Stream,System.Decimal)">
            <summary>
             Writes a <see langword="decimal"/> in binary format.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.BinaryFormatWriter.WriteDateTime(System.IO.Stream,System.DateTime)">
            <summary>
             Writes a <see cref="T:System.DateTime"/> in binary format.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.BinaryFormatWriter.WriteTimeSpan(System.IO.Stream,System.TimeSpan)">
            <summary>
             Writes a <see cref="T:System.TimeSpan"/> in binary format.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.BinaryFormatWriter.WriteNativeInt(System.IO.Stream,System.IntPtr)">
            <summary>
             Writes a nint in binary format.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.BinaryFormatWriter.WriteNativeUInt(System.IO.Stream,System.UIntPtr)">
            <summary>
             Writes a nuint in binary format.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.BinaryFormatWriter.WritePointF(System.IO.Stream,System.Drawing.PointF)">
            <summary>
             Writes a <see cref="T:System.Drawing.PointF"/> in binary format.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.BinaryFormatWriter.WriteRectangleF(System.IO.Stream,System.Drawing.RectangleF)">
            <summary>
             Writes a <see cref="T:System.Drawing.RectangleF"/> in binary format.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.BinaryFormatWriter.TryWritePrimitive(System.IO.Stream,System.Object)">
            <summary>
             Attempts to write a <see cref="T:System.Private.Windows.Core.BinaryFormat.PrimitiveType"/> value in binary format.
            </summary>
            <returns><see langword="true"/> if successful.</returns>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.BinaryFormatWriter.WritePrimitive(System.IO.Stream,System.Object)">
            <summary>
             Writes a .NET primitive value in binary format.
            </summary>
            <exception cref="T:System.ArgumentException">
             <paramref name="primitive"/> is not a a primitive value.
            </exception>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.BinaryFormatWriter.WriteStringList(System.IO.Stream,System.Collections.Generic.List{System.String})">
            <summary>
             Writes a <see cref="T:System.Collections.Generic.List`1"/> in binary format.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.BinaryFormatWriter.WritePrimitiveList``1(System.IO.Stream,System.Collections.Generic.List{``0})">
            <summary>
             Writes a primitive list in binary format.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.BinaryFormatWriter.TryWritePrimitiveList(System.IO.Stream,System.Collections.IList)">
            <summary>
             Writes the given <paramref name="list"/> in binary format if supported.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.BinaryFormatWriter.TryWriteArrayList(System.IO.Stream,System.Collections.ArrayList)">
            <summary>
             Writes the given <paramref name="list"/> in binary format if supported.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.BinaryFormatWriter.TryWriteArray(System.IO.Stream,System.Array)">
            <summary>
             Writes the given <paramref name="array"/> in binary format if supported.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.BinaryFormatWriter.TryWriteHashtable(System.IO.Stream,System.Collections.Hashtable)">
            <summary>
             Tries to write the given <paramref name="hashtable"/> if supported.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.BinaryFormatWriter.WritePrimitiveHashtable(System.IO.Stream,System.Collections.Hashtable)">
            <summary>
             Writes a <see cref="T:System.Collections.Hashtable"/> of primitive to primitive values to the given stream in binary format.
            </summary>
            <remarks>
             <para>
              Primitive types are anything in the <see cref="T:System.Private.Windows.Core.BinaryFormat.PrimitiveType"/> enum.
             </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
             <paramref name="hashtable"/> contained non-primitive values or a custom comparer or hash code provider.
            </exception>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.BinaryFormatWriter.WriteNotSupportedException(System.IO.Stream,System.NotSupportedException)">
            <summary>
             Writes a <see cref="T:System.NotSupportedException"/> in binary format.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.BinaryFormatWriter.TryWriteFrameworkObject(System.IO.Stream,System.Object)">
            <summary>
             Writes the given <paramref name="value"/> if supported.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.BinaryFormatWriter.TryWrite``1(System.Action{System.IO.Stream,``0},System.IO.Stream,``0)">
            <summary>
             Simple wrapper to ensure the <paramref name="stream"/> is reset to it's original position if the
             <paramref name="action"/> throws.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.BinaryFormatWriter.TryWrite``1(System.Func{System.IO.Stream,``0,System.Boolean},System.IO.Stream,``0)">
            <summary>
             Simple wrapper to ensure the <paramref name="stream"/> is reset to it's original position if the
             <paramref name="func"/> throws or returns <see langword="false"/>.
            </summary>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.BinaryLibrary">
            <summary>
             Library full name information.
            </summary>
            <remarks>
             <para>
              <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/7fcf30e1-4ad4-4410-8f1a-901a4a1ea832">
               [MS-NRBF] 2.6.2
              </see>
             </para>
            </remarks>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.BinaryObjectString">
            <summary>
             String record.
            </summary>
            <remarks>
             <para>
              <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/eb503ca5-e1f6-4271-a7ee-c4ca38d07996">
               [MS-NRBF] 2.5.7
              </see>
             </para>
            </remarks>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.BinaryType">
            <summary>
             Identifies the remoting type of a class member or array item.
            </summary>
            <remarks>
             <para>
              <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/054e5c58-be21-4c86-b1c3-f6d3ce17ec72">
               [MS-NRBF] 2.1.2.2
              </see>
             </para>
            </remarks>
        </member>
        <member name="F:System.Private.Windows.Core.BinaryFormat.BinaryType.Primitive">
            <summary>
             Type is defined by <see cref="T:System.Private.Windows.Core.BinaryFormat.PrimitiveType"/> and it is not a string.
            </summary>
        </member>
        <member name="F:System.Private.Windows.Core.BinaryFormat.BinaryType.String">
            <summary>
             Type is <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/10b218f5-9b2b-4947-b4b7-07725a2c8127">
             length prefixed string</see>.
            </summary>
        </member>
        <member name="F:System.Private.Windows.Core.BinaryFormat.BinaryType.Object">
            <summary>
             Type is System.Object.
            </summary>
        </member>
        <member name="F:System.Private.Windows.Core.BinaryFormat.BinaryType.SystemClass">
            <summary>
             Type is a standard .NET object.
            </summary>
        </member>
        <member name="F:System.Private.Windows.Core.BinaryFormat.BinaryType.Class">
            <summary>
             Type is an object.
            </summary>
        </member>
        <member name="F:System.Private.Windows.Core.BinaryFormat.BinaryType.ObjectArray">
            <summary>
             Type is a single-dimensional array of objects.
            </summary>
        </member>
        <member name="F:System.Private.Windows.Core.BinaryFormat.BinaryType.StringArray">
            <summary>
             Type is a single-dimensional array of strings.
            </summary>
        </member>
        <member name="F:System.Private.Windows.Core.BinaryFormat.BinaryType.PrimitiveArray">
            <summary>
             Types is a single-dimensional array of a primitive type.
            </summary>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.ClassInfo">
            <summary>
             Class info.
            </summary>
            <remarks>
             <para>
              <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/0a192be0-58a1-41d0-8a54-9c91db0ab7bf">
               [MS-NRBF] 2.3.1.1
              </see>
             </para>
            </remarks>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.ClassRecord">
            <summary>
             Base class for class records.
            </summary>
            <remarks>
             <para>
              Includes the values for the class (which trail the record)
              <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/c9bc3af3-5a0c-4b29-b517-1b493b51f7bb">
               [MS-NRBF] 2.3
              </see>.
             </para>
            </remarks>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.ClassRecord.WriteValuesFromMemberTypeInfo(System.IO.BinaryWriter,System.Collections.Generic.IReadOnlyList{System.Private.Windows.Core.BinaryFormat.MemberTypeInfo},System.Collections.Generic.IReadOnlyList{System.Object})">
            <summary>
             Writes <paramref name="memberValues"/> as specified by the <paramref name="memberTypeInfo"/>
            </summary>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.ClassTypeInfo">
            <summary>
             Identifies a class by it's name and library id.
            </summary>
            <remarks>
             <para>
              <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/844b24dd-9f82-426e-9b98-05334307a239">
               [MS-NRBF] 2.1.1.8
              </see>
             </para>
            </remarks>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.ClassWithId">
            <summary>
             Class information that references another class record's metadata.
            </summary>
            <remarks>
             <para>
              <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/2d168388-37f4-408a-b5e0-e48dbce73e26">
               [MS-NRBF] 2.3.2.5
              </see>
             </para>
            </remarks>
        </member>
        <member name="P:System.Private.Windows.Core.BinaryFormat.ClassWithId.MetadataId">
            <summary>
             The ObjectId of a prior <see cref="T:System.Private.Windows.Core.BinaryFormat.SystemClassWithMembersAndTypes"/>
             or <see cref="T:System.Private.Windows.Core.BinaryFormat.ClassWithMembersAndTypes"/>.
            </summary>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.ClassWithMembersAndTypes">
            <summary>
             Class information with type info and the source library.
            </summary>
            <remarks>
             <para>
              <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/847b0b6a-86af-4203-8ed0-f84345f845b9">
               [MS-NRBF] 2.3.2.1
              </see>
             </para>
            </remarks>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.IBinaryWriteable">
            <summary>
             Expresses that the object can be written with a <see cref="T:System.IO.BinaryWriter"/>
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.IBinaryWriteable.Write(System.IO.BinaryWriter)">
            <summary>
             Writes the current object to the given <paramref name="writer"/>.
            </summary>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.IPrimitiveTypeRecord">
            <summary>
             Record that represents a primitive type or an array of primitive types.
            </summary>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.IReadOnlyRecordMap">
            <summary>
             Map of records.
            </summary>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.IRecord">
            <summary>
             Non-generic record base interface.
            </summary>
        </member>
        <member name="P:System.Private.Windows.Core.BinaryFormat.IRecord.Id">
            <summary>
             Id for the record, or null if the record has no id.
            </summary>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.IRecord`1">
            <summary>
             Typed record interface.
            </summary>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.IWritableRecord">
            <summary>
             Expresses that the object can be written with a <see cref="T:System.IO.BinaryWriter"/>
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.IWritableRecord.Write(System.IO.BinaryWriter)">
            <summary>
             Writes the current object to the given <paramref name="writer"/>.
            </summary>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.MemberPrimitiveTyped">
            <summary>
             Primitive value other than <see langword="string"/>.
            </summary>
            <remarks>
             <para>
              <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/c0a190b2-762c-46b9-89f2-c7dabecfc084">
               [MS-NRBF] 2.5.1
              </see>
             </para>
            </remarks>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.MemberPrimitiveTyped.#ctor(System.Object)">
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is not primitive.</exception>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.MemberReference">
            <summary>
             The <see cref="T:System.Private.Windows.Core.BinaryFormat.MemberReference"/> record contains a reference to another record that contains the actual value.
            </summary>
            <remarks>
             <para>
              <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/eef0aa32-ab03-4b6a-a506-bcdfc10583fd">
               [MS-NRBF] 2.5.3
              </see>
             </para>
            </remarks>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.MemberTypeInfo">
            <summary>
             Member type info.
            </summary>
            <remarks>
             <para>
              <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/aa509b5a-620a-4592-a5d8-7e9613e0a03e">
               [MS-NRBF] 2.3.1.2
              </see>
             </para>
            </remarks>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.MessageEnd">
            <summary>
             Record that marks the end of the binary format stream.
            </summary>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.NullRecord">
            <summary>
             Base class for null records.
            </summary>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.NullRecord.ObjectNullMultiple">
            <summary>
             Multiple null object record.
            </summary>
            <remarks>
             <para>
              <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/f4abb5dd-aab7-4e0a-9d77-1d6c99f5779e">
               [MS-NRBF] 2.5.5
              </see>
             </para>
            </remarks>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.NullRecord.ObjectNullMultiple256">
            <summary>
             Multiple null object record (less than 256).
            </summary>
            <remarks>
             <para>
              <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/f4abb5dd-aab7-4e0a-9d77-1d6c99f5779e">
               [MS-NRBF] 2.5.5
              </see>
             </para>
            </remarks>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.ObjectNull">
            <summary>
             Null object record.
            </summary>
            <remarks>
             <para>
              <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/fe51522c-23d1-48dd-9913-c84894abc127">
               [MS-NRBF] 2.5.4
              </see>
             </para>
            </remarks>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.PrimitiveType">
            <summary>
             Primitive type.
            </summary>
            <remarks>
             <para>
              <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/4e77849f-89e3-49db-8fb9-e77ee4bc7214">
               [MS-NRBF] 2.1.2.3
              </see>
             </para>
            </remarks>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.Record">
            <summary>
             Base record class.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.Record.WritePrimitiveType(System.IO.BinaryWriter,System.Private.Windows.Core.BinaryFormat.PrimitiveType,System.Object)">
            <summary>
             Writes <paramref name="value"/> as <paramref name="primitiveType"/> to the given <paramref name="writer"/>.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.Record.WriteRecords(System.IO.BinaryWriter,System.Collections.Generic.IReadOnlyList{System.Object},System.Boolean)">
            <summary>
             Writes records, coalescing null records into single entries.
            </summary>
            <exception cref="T:System.InvalidOperationException">
             <paramref name="objects"/> contained an object that isn't a record.
            </exception>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.RecordMap">
            <summary>
             Map of records that ensures that IDs are only entered once.
            </summary>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.RecordType">
            <summary>
             Record type.
            </summary>
            <remarks>
             <para>
              <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/954a0657-b901-4813-9398-4ec732fe8b32">
               [MS-NRBF] 2.1.2.1
              </see>
             </para>
            </remarks>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.SerializationHeader">
            <summary>
             Binary format header.
            </summary>
            <remarks>
             <para>
              <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/a7e578d3-400a-4249-9424-7529d10d1b3c">
               [MS-NRBF] 2.6.1
              </see>
             </para>
            </remarks>
        </member>
        <member name="F:System.Private.Windows.Core.BinaryFormat.SerializationHeader.RootId">
            <summary>
             The id of the root object record.
            </summary>
        </member>
        <member name="F:System.Private.Windows.Core.BinaryFormat.SerializationHeader.HeaderId">
            <summary>
             Ignored. BinaryFormatter puts out -1.
            </summary>
        </member>
        <member name="F:System.Private.Windows.Core.BinaryFormat.SerializationHeader.MajorVersion">
            <summary>
             Must be 1.
            </summary>
        </member>
        <member name="F:System.Private.Windows.Core.BinaryFormat.SerializationHeader.MinorVersion">
            <summary>
             Must be 0.
            </summary>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.FormatterConverterStub">
            <summary>
             <see cref="T:System.Runtime.Serialization.IFormatterConverter"/> that only returns default values.
            </summary>
            <remarks>
             <para>
              Allows creating a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> when a <see cref="T:System.Runtime.Serialization.IFormatterConverter"/>
              isn't necessary.
             </para>
            </remarks>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.SerializationExtensions.GetValue``1(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
             Get a typed value. Hard casts.
            </summary>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.StringRecordsCollection">
            <summary>
             Helper to create and track records for <see cref="T:System.Private.Windows.Core.BinaryFormat.BinaryObjectString"/> and <see cref="T:System.Private.Windows.Core.BinaryFormat.MemberReference"/>
             when duplicates are found.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.StringRecordsCollection.GetStringRecord(System.String)">
            <summary>
             Returns the appropriate record for the given string.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.TypeInfo.GetPrimitiveType(System.Type)">
            <summary>
             Returns the <see cref="T:System.Private.Windows.Core.BinaryFormat.PrimitiveType"/> for the given <paramref name="type"/>.
            </summary>
            <returns><see cref="T:System.Private.Windows.Core.BinaryFormat.PrimitiveType"/> or <see langword="default"/> if not a <see cref="T:System.Private.Windows.Core.BinaryFormat.PrimitiveType"/>.</returns>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.TypeInfo.GetPrimitiveArrayType(System.Type)">
            <summary>
             Returns the <see cref="T:System.Private.Windows.Core.BinaryFormat.PrimitiveType"/> for the given <paramref name="type"/> if it is a simple primitive array.
            </summary>
            <returns><see cref="T:System.Private.Windows.Core.BinaryFormat.PrimitiveType"/> or <see langword="default"/> if not a primitive array.</returns>
        </member>
        <member name="M:System.Private.Windows.Core.BinaryFormat.TypeInfo.GetBinaryType(System.Type)">
            <summary>
             Get the proper <see cref="T:System.Private.Windows.Core.BinaryFormat.BinaryType"/> for the given <paramref name="type"/>.
            </summary>
        </member>
        <member name="T:System.Private.Windows.Core.BinaryFormat.SystemClassWithMembersAndTypes">
            <summary>
             System class information with type info.
            </summary>
            <remarks>
             <para>
              <see href="https://learn.microsoft.com/openspecs/windows_protocols/ms-nrbf/ecb47445-831f-4ef5-9c9b-afd4d06e3657">
               [MS-NRBF] 2.3.2.3
              </see>
             </para>
            </remarks>
        </member>
        <member name="T:System.Private.Windows.Core.Count">
            <summary>
             Positive <see langword="int"/> enforcing count of items.
            </summary>
            <devdoc>
             Idea here is that doing this makes it less likely we'll slip through cases where
             we don't check for negative numbers. And also not confuse counts with ids.
            </devdoc>
        </member>
        <member name="T:System.Private.Windows.Core.Id">
            <summary>
             Identifier struct.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.OsVersion.IsWindows10_1507OrGreater">
            <summary>
             Is Windows 10 first release or later. (Threshold 1, build 10240, version 1507)
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.OsVersion.IsWindows10_1607OrGreater">
            <summary>
             Is Windows 10 Anniversary Update or later. (Redstone 1, build 14393, version 1607)
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.OsVersion.IsWindows10_1703OrGreater">
            <summary>
             Is Windows 10 Creators Update or later. (Redstone 2, build 15063, version 1703)
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.OsVersion.IsWindows10_1709OrGreater">
            <summary>
             Is Windows 10 Creators Update or later. (Redstone 3, build 16299, version 1709)
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.OsVersion.IsWindows10_18030rGreater">
            <summary>
             Is Windows 10 Creators Update or later. (Redstone 4, build 17134, version 1803)
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.OsVersion.IsWindows11_OrGreater">
            <summary>
             Is this Windows 11 public preview or later?
             The underlying API does not read supportedOs from the manifest, it returns the actual version.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.OsVersion.IsWindows11_22H2OrGreater">
            <summary>
             Is this Windows 11 version 22H2 or greater?
             The underlying API does not read supportedOs from the manifest, it returns the actual version.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.OsVersion.IsWindows8_1OrGreater">
            <summary>
             Is Windows 8.1 or later.
            </summary>
        </member>
        <member name="M:System.Private.Windows.Core.OsVersion.IsWindows8OrGreater">
            <summary>
             Is Windows 8 or later.
            </summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusAborted">
            <summary>Function was ended.</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusAccessDenied">
            <summary>File access is denied.</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusCannotCreateGraphicsFromIndexedPixelFormat">
            <summary>A Graphics object cannot be created from an image that has an indexed pixel format.</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusCannotSetPixelFromIndexedPixelFormat">
            <summary>SetPixel is not supported for images with indexed pixel formats.</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusDestPointsInvalidParallelogram">
            <summary>Destination points define a parallelogram which must have a length of 3. These points will represent the upper-left, upper-right, and lower-left coordinates (defined in that order).</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusDestPointsInvalidLength">
            <summary>Destination points must be an array with a length of 3 or 4. A length of 3 defines a parallelogram with the upper-left, upper-right, and lower-left corners. A length of 4 defines a quadrilateral with the fourth element of the array specifying the lower-rig ...</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusFileNotFound">
            <summary>File not found.</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusFontFamilyNotFound">
            <summary>Font '{0}' cannot be found.</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusFontStyleNotFound">
            <summary>Font '{0}' does not support style '{1}'.</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusGenericError">
            <summary>A generic error occurred in GDI+.</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusInsufficientBuffer">
            <summary>Buffer is too small (internal GDI+ error).</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusInvalidParameter">
            <summary>Parameter is not valid.</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusInvalidRectangle">
            <summary>Rectangle '{0}' cannot have a width or height equal to 0.</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusInvalidSize">
            <summary>Operation requires a transformation of the image from GDI+ to GDI. GDI does not support images with a width or height greater than 32767.</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusOutOfMemory">
            <summary>Out of memory.</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusNotImplemented">
            <summary>Not implemented.</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusNotInitialized">
            <summary>GDI+ is not properly initialized (internal GDI+ error).</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusNotTrueTypeFont">
            <summary>Only TrueType fonts are supported. '{0}' is not a TrueType font.</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusNotTrueTypeFont_NoName">
            <summary>Only TrueType fonts are supported. This is not a TrueType font.</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusObjectBusy">
            <summary>Object is currently in use elsewhere.</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusOverflow">
            <summary>Overflow error.</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusPropertyNotFoundError">
            <summary>Property cannot be found.</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusPropertyNotSupportedError">
            <summary>Property is not supported.</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusUnknown">
            <summary>Unknown GDI+ error occurred.</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusUnknownImageFormat">
            <summary>Image format is unknown.</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusUnsupportedGdiplusVersion">
            <summary>Current version of GDI+ does not support this feature.</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.GdiplusWrongState">
            <summary>Bitmap region is already locked.</summary>
        </member>
        <member name="P:System.Private.Windows.Core.Resources.SR.COM2UnhandledVT">
            <summary>Unhandled VT: {0}.</summary>
        </member>
        <member name="M:System.Windows.Forms.Nrbf.SerializationRecordExtensions.ConvertToSerializationException(System.Exception)">
            <summary>
             Converts the given exception to a <see cref="T:System.Runtime.Serialization.SerializationException"/> if needed, nesting the original exception
             and assigning the original stack trace.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Nrbf.SerializationRecordExtensions.TryGetPointF(System.Formats.Nrbf.SerializationRecord,System.Object@)">
            <summary>
             Tries to get this object as a <see cref="T:System.Drawing.PointF"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Nrbf.SerializationRecordExtensions.TryGetRectangleF(System.Formats.Nrbf.SerializationRecord,System.Object@)">
            <summary>
             Tries to get this object as a <see cref="T:System.Drawing.RectangleF"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Nrbf.SerializationRecordExtensions.TryGetPrimitiveType(System.Formats.Nrbf.SerializationRecord,System.Object@)">
            <summary>
             Tries to get this object as a primitive type or string.
            </summary>
            <returns><see langword="true"/> if this represented a primitive type or string.</returns>
        </member>
        <member name="M:System.Windows.Forms.Nrbf.SerializationRecordExtensions.TryGetPrimitiveList(System.Formats.Nrbf.SerializationRecord,System.Object@)">
            <summary>
             Tries to get this object as a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Formats.Nrbf.PrimitiveType"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Nrbf.SerializationRecordExtensions.TryGetPrimitiveArrayList(System.Formats.Nrbf.SerializationRecord,System.Object@)">
            <summary>
             Tries to get this object as a <see cref="T:System.Collections.ArrayList"/> of <see cref="T:System.Formats.Nrbf.PrimitiveType"/> values.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Nrbf.SerializationRecordExtensions.TryGetPrimitiveArray(System.Formats.Nrbf.SerializationRecord,System.Object@)">
            <summary>
             Tries to get this object as an <see cref="T:System.Array"/> of primitive types.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Nrbf.SerializationRecordExtensions.TryGetPrimitiveHashtable(System.Formats.Nrbf.SerializationRecord,System.Collections.Hashtable@)">
            <summary>
             Tries to get this object as a binary formatted <see cref="T:System.Collections.Hashtable"/> of <see cref="T:System.Formats.Nrbf.PrimitiveType"/> keys and values.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Nrbf.SerializationRecordExtensions.TryGetPrimitiveHashtable(System.Formats.Nrbf.SerializationRecord,System.Object@)">
            <summary>
             Tries to get this object as a binary formatted <see cref="T:System.Collections.Hashtable"/> of <see cref="T:System.Formats.Nrbf.PrimitiveType"/> keys and values.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Nrbf.SerializationRecordExtensions.TryGetNotSupportedException(System.Formats.Nrbf.SerializationRecord,System.Object@)">
            <summary>
             Tries to get this object as a binary formatted <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Nrbf.SerializationRecordExtensions.TryGetFrameworkObject(System.Formats.Nrbf.SerializationRecord,System.Object@)">
            <summary>
             Try to get a supported .NET type object (not WinForms).
            </summary>
        </member>
        <member name="M:System.SpanHelpers.CopyAndTerminate(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
            <summary>
             Copies the <paramref name="source"/> to the <paramref name="destination"/>,
             terminating with null and truncating <paramref name="source"/> to fit if
             necessary.
            </summary>
        </member>
        <member name="M:System.SpanHelpers.SliceAtFirstNull(System.ReadOnlySpan{System.Char})">
            <summary>
             Slices the given <paramref name="span"/> at the first null found (if any).
            </summary>
        </member>
        <member name="M:System.SpanHelpers.SliceAtFirstNull(System.Span{System.Char})">
            <summary>
             Slices the given <paramref name="span"/> at the first null found (if any).
            </summary>
        </member>
        <member name="T:System.SpanReader`1">
            <summary>
             Fast stack based <see cref="T:System.ReadOnlySpan`1"/> reader.
            </summary>
            <remarks>
             <para>
              Care must be used when reading struct values that depend on a specific field state for members to work
              correctly. For example, <see cref="T:System.DateTime"/> has a very specific set of valid values for its packed
              <see langword="ulong"/> field.
             </para>
             <para>
              Inspired by <see cref="T:System.Buffers.SequenceReader`1"/> patterns.
             </para>
            </remarks>
        </member>
        <member name="M:System.SpanReader`1.#ctor(System.ReadOnlySpan{`0})">
            <summary>
             Fast stack based <see cref="T:System.ReadOnlySpan`1"/> reader.
            </summary>
            <remarks>
             <para>
              Care must be used when reading struct values that depend on a specific field state for members to work
              correctly. For example, <see cref="T:System.DateTime"/> has a very specific set of valid values for its packed
              <see langword="ulong"/> field.
             </para>
             <para>
              Inspired by <see cref="T:System.Buffers.SequenceReader`1"/> patterns.
             </para>
            </remarks>
        </member>
        <member name="M:System.SpanReader`1.TryReadTo(`0,System.ReadOnlySpan{`0}@)">
            <summary>
             Try to read everything up to the given <paramref name="delimiter"/>. Advances the reader past the
             <paramref name="delimiter"/> if found.
            </summary>
            <inheritdoc cref="M:System.SpanReader`1.TryReadTo(`0,System.Boolean,System.ReadOnlySpan{`0}@)"/>
        </member>
        <member name="M:System.SpanReader`1.TryReadTo(`0,System.Boolean,System.ReadOnlySpan{`0}@)">
            <summary>
             Try to read everything up to the given <paramref name="delimiter"/>.
            </summary>
            <param name="span">The read data, if any.</param>
            <param name="delimiter">The delimiter to look for.</param>
            <param name="advancePastDelimiter"><see langword="true"/> to move past the <paramref name="delimiter"/> if found.</param>
            <returns><see langword="true"/> if the <paramref name="delimiter"/> was found.</returns>
        </member>
        <member name="M:System.SpanReader`1.TryRead(`0@)">
            <summary>
             Try to read the next value.
            </summary>
        </member>
        <member name="M:System.SpanReader`1.TryRead(System.Int32,System.ReadOnlySpan{`0}@)">
            <summary>
             Try to read a span of the given <paramref name="count"/>.
            </summary>
        </member>
        <member name="M:System.SpanReader`1.TryRead``1(``0@)">
            <summary>
             Try to read a value of the given type. The size of the value must be evenly divisible by the size of
             <typeparamref name="T"/>.
            </summary>
            <remarks>
             <para>
              This is just a straight copy of bits. If <typeparamref name="TValue"/> has methods that depend on
              specific field value constraints this could be unsafe.
             </para>
             <para>
              The compiler will often optimize away the struct copy if you only read from the value.
             </para>
            </remarks>
        </member>
        <member name="M:System.SpanReader`1.TryRead``1(System.Int32,System.ReadOnlySpan{``0}@)">
            <summary>
             Try to read a span of values of the given type. The size of the value must be evenly divisible by the size of
             <typeparamref name="T"/>.
            </summary>
            <remarks>
             <para>
              This effectively does a <see cref="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.ReadOnlySpan{``0})"/> and the same
              caveats apply about safety.
             </para>
            </remarks>
        </member>
        <member name="M:System.SpanReader`1.IsNext(System.ReadOnlySpan{`0})">
            <summary>
             Check to see if the given <paramref name="next"/> values are next.
            </summary>
            <param name="next">The span to compare the next items to.</param>
        </member>
        <member name="M:System.SpanReader`1.TryAdvancePast(System.ReadOnlySpan{`0})">
            <summary>
             Advance the reader if the given <paramref name="next"/> values are next.
            </summary>
            <param name="next">The span to compare the next items to.</param>
            <returns><see langword="true"/> if the values were found and the reader advanced.</returns>
        </member>
        <member name="M:System.SpanReader`1.AdvancePast(`0)">
            <summary>
             Advance the reader past consecutive instances of the given <paramref name="value"/>.
            </summary>
            <returns>How many positions the reader has been advanced</returns>
        </member>
        <member name="M:System.SpanReader`1.Advance(System.Int32)">
            <summary>
             Advance the reader by the given <paramref name="count"/>.
            </summary>
        </member>
        <member name="M:System.SpanReader`1.Rewind(System.Int32)">
            <summary>
             Rewind the reader by the given <paramref name="count"/>.
            </summary>
        </member>
        <member name="M:System.SpanReader`1.Reset">
            <summary>
             Reset the reader to the beginning of the span.
            </summary>
        </member>
        <member name="M:System.SpanReader`1.UnsafeAdvance(System.Int32)">
            <summary>
             Advance the reader without bounds checking.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:System.SpanReader`1.UncheckedSliceTo(System.ReadOnlySpan{`0}@,System.Int32)">
            <summary>
             Slicing without bounds checking.
            </summary>
        </member>
        <member name="M:System.SpanReader`1.UncheckedSlice(System.ReadOnlySpan{`0}@,System.Int32,System.Int32)">
            <summary>
             Slicing without bounds checking.
            </summary>
        </member>
        <member name="T:System.SpanWriter`1">
            <summary>
             Fast stack based <see cref="T:System.Span`1"/> writer.
            </summary>
        </member>
        <member name="M:System.SpanWriter`1.#ctor(System.Span{`0})">
            <summary>
             Fast stack based <see cref="T:System.Span`1"/> writer.
            </summary>
        </member>
        <member name="M:System.SpanWriter`1.TryWrite(`0)">
            <summary>
             Try to write the given value.
            </summary>
        </member>
        <member name="M:System.SpanWriter`1.TryWrite(System.ReadOnlySpan{`0})">
            <summary>
             Try to write the given value.
            </summary>
        </member>
        <member name="M:System.SpanWriter`1.TryWriteCount(System.Int32,`0)">
            <summary>
             Try to write the given value <paramref name="count"/> times.
            </summary>
        </member>
        <member name="M:System.SpanWriter`1.Advance(System.Int32)">
            <summary>
             Advance the writer by the given <paramref name="count"/>.
            </summary>
        </member>
        <member name="M:System.SpanWriter`1.Rewind(System.Int32)">
            <summary>
             Rewind the writer by the given <paramref name="count"/>.
            </summary>
        </member>
        <member name="M:System.SpanWriter`1.Reset">
            <summary>
             Reset the reader to the beginning of the span.
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.BSTR.ToStringAndFree">
            <summary>
             Converts the <see cref="T:Windows.Win32.Foundation.BSTR"/> to string and frees it.
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.BSTR.ToNullableStringAndFree">
            <summary>
             Converts the <see cref="T:Windows.Win32.Foundation.BSTR"/> to a nullable string and frees it.
            </summary>
        </member>
        <member name="P:Windows.Win32.Foundation.BSTR.Length">
            <summary>
            Gets the length of the BSTR in characters.
            </summary>
        </member>
        <member name="T:Windows.Win32.Foundation.DECIMAL">
            <summary>The DECIMAL structure represents a decimal data type that provides a sign and scale for a number.</summary>
            <remarks></remarks>
        </member>
        <member name="F:Windows.Win32.Foundation.DECIMAL.wReserved">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.DECIMAL.Hi32">
            <summary>The high 32 bits of the number.</summary>
        </member>
        <member name="T:Windows.Win32.Foundation.FILETIME">
            <summary>Describes FILETIME and provides syntax, members, and additional remarks.</summary>
            <remarks>
            <para>A property of type PT_SYSTIME has a **FILETIME** structure for its value. Such a property has a **FILETIME** data type for the **Value** member in its definition in an [SPropValue](spropvalue.md) structure. The definition of the **FILETIME** structure is in the _Win32 Programmer's Reference_ and in the MAPI header file Mapidefs.h. MAPI defines the structure conditionally to make sure that it is defined when the Win32 definition is unavailable.</para>
            <para><see href="https://learn.microsoft.com/office/client-developer/outlook/mapi/filetime#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Foundation.FILETIME.dwLowDateTime">
            <summary>> Low-order 32 bits of the file time value.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.FILETIME.dwHighDateTime">
            <summary>> High-order 32 bits of the file time value.</summary>
        </member>
        <member name="T:Windows.Win32.Foundation.HandleRef`1">
            <summary>
             Adapter to use when owning classes cannot directly implement <see cref="T:Windows.Win32.Foundation.IHandle`1"/>.
            </summary>
        </member>
        <member name="T:Windows.Win32.Foundation.HRESULT">
            <remarks>
            <para>The **HRESULT** data type is the same as the [SCODE](scode.md) data type. An **HRESULT** value consists of the following fields: - A 1-bit code indicating severity, where zero represents success and 1 represents failure. - A 4-bit reserved value. - An 11-bit code indicating responsibility for the error or warning, also known as a facility code. - A 16-bit code describing the error or warning. Most MAPI interface methods and functions return **HRESULT** values to provide detailed cause formation. **HRESULT** values are also used widely in OLE interface methods. OLE provides several macros for converting between **HRESULT** values and **SCODE** values, another common data type for error handling. > [!NOTE] > In 64-bit MAPI, **HRESULT** is still a 32-bit value. For information about the OLE use of **HRESULT** values, see the  *OLE Programmer's Reference*. For more information about the use of these values in MAPI, see [Error Handling](error-handling-in-mapi.md) and any of the following interface methods: [IABLogon::GetLastError](iablogon-getlasterror.md) [IMAPISupport::GetLastError](imapisupport-getlasterror.md) [IMAPIControl::GetLastError](imapicontrol-getlasterror.md) [IMAPITable::GetLastError](imapitable-getlasterror.md) [IMAPIProp::GetLastError](imapiprop-getlasterror.md) [IMAPIViewAdviseSink::OnPrint](imapiviewadvisesink-onprint.md)</para>
            <para><see href="https://learn.microsoft.com/office/client-developer/outlook/mapi/hresult#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Foundation.HRESULT.ThrowOnFailure(System.IntPtr)">
            <inheritdoc cref="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)" />
            <param name="errorInfo">
            A pointer to the IErrorInfo interface that provides more information about the
            error. You can specify <see cref="F:System.IntPtr.Zero"/> to use the current IErrorInfo interface, or
            <c>new IntPtr(-1)</c> to ignore the current IErrorInfo interface and construct the exception
            just from the error code.
            </param>
            <returns><see langword="this"/> <see cref="T:Windows.Win32.Foundation.HRESULT"/>, if it does not reflect an error.</returns>
            <seealso cref="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)"/>
        </member>
        <member name="F:Windows.Win32.Foundation.HRESULT.E_FAIL">
            <summary>The operation could not be completed.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/mbnapi/nf-mbnapi-imbnpinevents-ondisablecomplete">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Foundation.HRESULT.E_INVALIDARG">
            <summary>Documentation varies per use. Refer to each: <see href="https://learn.microsoft.com/windows/win32/api/mbnapi/nf-mbnapi-imbnconnectioncontextevents-onsetprovisionedcontextcomplete">IMbnConnectionContextEvents.OnSetProvisionedContextComplete</see>, <see href="https://learn.microsoft.com/windows/win32/api/mbnapi/nf-mbnapi-imbnserviceactivationevents-onactivationcomplete">IMbnServiceActivationEvents.OnActivationComplete</see>, <see href="https://learn.microsoft.com/windows/win32/api/mbnapi/nf-mbnapi-imbnsmsevents-onsmssendcomplete">IMbnSmsEvents.OnSmsSendComplete</see>.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.HRESULT.S_OK">
            <summary>Documentation varies per use. Refer to each: <see href="https://learn.microsoft.com/windows/win32/api/mbnapi/nf-mbnapi-imbnconnectioncontextevents-onsetprovisionedcontextcomplete">IMbnConnectionContextEvents.OnSetProvisionedContextComplete</see>, <see href="https://learn.microsoft.com/windows/win32/api/mbnapi/nf-mbnapi-imbnconnectionevents-onconnectcomplete">IMbnConnectionEvents.OnConnectComplete</see>, <see href="https://learn.microsoft.com/windows/win32/api/mbnapi/nf-mbnapi-imbnpinevents-onchangecomplete">IMbnPinEvents.OnChangeComplete</see>, <see href="https://learn.microsoft.com/windows/win32/api/mbnapi/nf-mbnapi-imbnpinevents-ondisablecomplete">IMbnPinEvents.OnDisableComplete</see>, <see href="https://learn.microsoft.com/windows/win32/api/mbnapi/nf-mbnapi-imbnpinevents-onenablecomplete">IMbnPinEvents.OnEnableComplete</see>, <see href="https://learn.microsoft.com/windows/win32/api/mbnapi/nf-mbnapi-imbnpinevents-onentercomplete">IMbnPinEvents.OnEnterComplete</see>, <see href="https://learn.microsoft.com/windows/win32/api/mbnapi/nf-mbnapi-imbnpinevents-onunblockcomplete">IMbnPinEvents.OnUnblockComplete</see>, <see href="https://learn.microsoft.com/windows/win32/api/mbnapi/nf-mbnapi-imbnpinmanagerevents-ongetpinstatecomplete">IMbnPinManagerEvents.OnGetPinStateComplete</see>, <see href="https://learn.microsoft.com/windows/win32/api/mbnapi/nf-mbnapi-imbnradioevents-onsetsoftwareradiostatecomplete">IMbnRadioEvents.OnSetSoftwareRadioStateComplete</see>, <see href="https://learn.microsoft.com/windows/win32/api/mbnapi/nf-mbnapi-imbnserviceactivationevents-onactivationcomplete">IMbnServiceActivationEvents.OnActivationComplete</see>, <see href="https://learn.microsoft.com/windows/win32/api/mbnapi/nf-mbnapi-imbnsmsevents-onsetsmsconfigurationcomplete">IMbnSmsEvents.OnSetSmsConfigurationComplete</see>, <see href="https://learn.microsoft.com/windows/win32/api/mbnapi/nf-mbnapi-imbnsmsevents-onsmsdeletecomplete">IMbnSmsEvents.OnSmsDeleteComplete</see>, <see href="https://learn.microsoft.com/windows/win32/api/mbnapi/nf-mbnapi-imbnsmsevents-onsmsreadcomplete">IMbnSmsEvents.OnSmsReadComplete</see>, <see href="https://learn.microsoft.com/windows/win32/api/mbnapi/nf-mbnapi-imbnsmsevents-onsmssendcomplete">IMbnSmsEvents.OnSmsSendComplete</see>.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.HWND.HWND_TOP">
            <summary>Places the window at the top of the Z order.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-deferwindowpos">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Foundation.HWND.HWND_BOTTOM">
            <summary>Places the window at the bottom of the Z order. If the <i>hWnd</i> parameter identifies a topmost window, the window loses its topmost status and is placed at the bottom of all other windows.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-deferwindowpos">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Foundation.HWND.HWND_TOPMOST">
            <summary>Places the window above all non-topmost windows. The window maintains its topmost position even when it is deactivated.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-deferwindowpos">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Foundation.HWND.HWND_NOTOPMOST">
            <summary>Places the window above all non-topmost windows (that is, behind all topmost windows). This flag has no effect if the window is already a non-topmost window.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-deferwindowpos">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.Foundation.IHandle`1">
            <summary>
             Used to abstract access to classes that contain a potentially owned handle.
            </summary>
            <remarks>
             <para>
              The key benefit of this is that we can keep the owning class from being collected during interop calls.
              <see cref="T:System.Runtime.InteropServices.HandleRef"/> wraps arbitrary owners with target handles. Having this interface allows implicit use
              of the classes (such as System.Windows.Forms.Control) that meet this common pattern in interop and encourages
              correct alignment with the proper owner.
             </para>
             <para>
              Note that keeping objects alive is necessary ONLY when the object has a finalizer that will explicitly
              close the handle.
             </para>
             <para>
              When implementing P/Invoke wrappers that take this interface they should not directly take
              <see cref="T:Windows.Win32.Foundation.IHandle`1"/>, but should take a generic "T" that is constrained to IHandle{T}. Doing
              it this way prevents boxing of structs. The "T" parameters should also be marked as <see langword="in"/>
              to allow structs to be passed by reference instead of by value.
             </para>
             <para>
              When implementing this on a struct it is important that either the struct itself is marked as readonly
              or these properties are to avoid extra struct copies.
             </para>
            </remarks>
        </member>
        <member name="P:Windows.Win32.Foundation.IHandle`1.Wrapper">
            <summary>
             Owner of the <see cref="P:Windows.Win32.Foundation.IHandle`1.Handle"/> that might close it when finalized. Default is the
             <see cref="T:Windows.Win32.Foundation.IHandle`1"/> implementer.
            </summary>
            <remarks>
             <para>
              This allows decoupling the owner from the <typeparamref name="THandle"/> provider and avoids boxing when
              <see cref="T:Windows.Win32.Foundation.IHandle`1"/> is on a struct. See <see cref="T:Windows.Win32.Foundation.HandleRef`1"/> for a concrete usage.
             </para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.Foundation.IPointer`1">
            <summary>
             Used to indicate ownership of a native resource pointer.
            </summary>
            <remarks>
             <para>
              This should never be put on a struct.
             </para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.Foundation.PCWSTR">
            <summary>
            A pointer to a null-terminated, constant character string.
            </summary>
        </member>
        <member name="F:Windows.Win32.Foundation.PCWSTR.Value">
            <summary>
            A pointer to the first character in the string. The content should be considered readonly, as it was typed as constant in the SDK.
            </summary>
        </member>
        <member name="P:Windows.Win32.Foundation.PCWSTR.Length">
            <summary>
            Gets the number of characters up to the first null character (exclusive).
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.PCWSTR.ToString">
            <summary>
            Returns a <see langword="string"/> with a copy of this character array, up to the first null character (exclusive).
            </summary>
            <returns>A <see langword="string"/>, or <see langword="null"/> if <see cref="F:Windows.Win32.Foundation.PCWSTR.Value"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Windows.Win32.Foundation.PCWSTR.AsSpan">
            <summary>
            Returns a span of the characters in this string, up to the first null character (exclusive).
            </summary>
        </member>
        <member name="T:Windows.Win32.Foundation.POINTS">
            <summary>The POINTS structure defines the x- and y-coordinates of a point.</summary>
            <remarks>The POINTS structure is similar to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-point">POINT</a> and <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-pointl">POINTL</a> structures. The difference is that the members of the POINTS structure are of type SHORT, while those of the other two structures are of type LONG.</remarks>
        </member>
        <member name="F:Windows.Win32.Foundation.POINTS.x">
            <summary>Specifies the <i>x</i>-coordinate of the point.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.POINTS.y">
            <summary>Specifies the <i>y</i>-coordinate of the point.</summary>
        </member>
        <member name="P:Windows.Win32.Foundation.PWSTR.StringListLength">
            <summary>
             The length of the string when it is a null separated list of values that is terminated by
             a double null. Does not include the final double null.
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.PWSTR.ToString">
            <inheritdoc cref="M:Windows.Win32.Foundation.PCWSTR.ToString"/>
        </member>
        <member name="P:Windows.Win32.Foundation.PWSTR.Length">
            <inheritdoc cref="P:Windows.Win32.Foundation.PCWSTR.Length"/>
        </member>
        <member name="M:Windows.Win32.Foundation.PWSTR.AsSpan">
            <summary>
            Returns a span of the characters in this string, up to the first null character (exclusive).
            </summary>
        </member>
        <member name="T:Windows.Win32.Foundation.RECT">
            <summary>The RECT structure defines a rectangle by the coordinates of its upper-left and lower-right corners.</summary>
            <remarks>The RECT structure is identical to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rectl">RECTL</a> structure.</remarks>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.left">
            <summary>Specifies the <i>x</i>-coordinate of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.top">
            <summary>Specifies the <i>y</i>-coordinate of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.right">
            <summary>Specifies the <i>x</i>-coordinate of the lower-right corner of the rectangle.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.bottom">
            <summary>Specifies the <i>y</i>-coordinate of the lower-right corner of the rectangle.</summary>
        </member>
        <member name="T:Windows.Win32.Foundation.AgileComPointer`1">
            <summary>
             Finalizable wrapper for COM pointers that gives agile access to the specified interface.
            </summary>
            <remarks>
             <para>
              This class should be used to hold all COM pointers that are stored as fields to ensure that they are
              safely finalized when needed. Finalization should be avoided whenever possible for performance and timely
              resource release (that is, this class should be disposed).
             </para>
             <para>
              Fields should be nulled out before calling <see cref="M:Windows.Win32.Foundation.AgileComPointer`1.Dispose"/>. Releasing the COM pointer during disposal
              can result in callbacks to containing classes. Rather than evaluate the risk of this for every class, always
              follow this pattern. <see cref="M:System.DisposeHelper.NullAndDispose``1(``0@)"/> facilitates doing this safely.
             </para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Foundation.AgileComPointer`1.IsSameNativeObject(Windows.Win32.Foundation.AgileComPointer{`0})">
            <summary>
             Returns <see langword="true"/> if <paramref name="other"/> has the same pointer this
             <see cref="T:Windows.Win32.Foundation.AgileComPointer`1"/> was created from.
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.AgileComPointer`1.IsSameNativeObject(`0*)">
            <inheritdoc cref="M:Windows.Win32.Foundation.AgileComPointer`1.IsSameNativeObject(Windows.Win32.Foundation.AgileComPointer{`0})"/>
        </member>
        <member name="M:Windows.Win32.Foundation.AgileComPointer`1.GetInterface">
            <summary>
             Gets the default interface. Throws if failed.
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.AgileComPointer`1.GetInterface``1">
            <summary>
             Gets the specified interface. Throws if failed.
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.AgileComPointer`1.TryGetInterface(Windows.Win32.Foundation.HRESULT@)">
            <summary>
             Tries to get the default interface.
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.AgileComPointer`1.TryGetInterface``1(Windows.Win32.Foundation.HRESULT@)">
            <summary>
             Tries to get the specified interface.
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.AgileComPointer`1.GetManagedObject">
            <summary>
             Gets the managed object using the pointer
             this <see cref="T:Windows.Win32.Foundation.AgileComPointer`1"/> was created from.
            </summary>
        </member>
        <member name="T:Windows.Win32.Foundation.ComPointerList`1">
            <summary>
             Simple list for "typed" COM struct pointer storage. Prevents nulls.
            </summary>
            <remarks>
             <para>
              Doesn't implement generic interfaces as pointer types can't be used as generic arguments.
             </para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.Foundation.ComScope`1">
            <summary>
             Lifetime management struct for a native COM pointer. Meant to be utilized in a <see langword="using"/> statement
             to ensure <see cref="M:Windows.Win32.System.Com.IUnknown.Release"/> is called when going out of scope with the using.
            </summary>
            <remarks>
             <para>
              This struct has implicit conversions to T** and void** so it can be passed directly to out methods.
              For example:
             </para>
             <code>
              using ComScope&lt;IUnknown&gt; unknown = new(null);
              comObject-&gt;QueryInterface(&amp;iid, unknown);
             </code>
             <para>
              Take care to NOT make copies of the struct to avoid accidental over-release.
             </para>
            </remarks>
            <typeparam name="T">
             This should be one of the struct COM definitions as generated by CsWin32. Ideally we'd constrain to
             <see cref="T:Windows.Win32.System.Com.IUnknown.Interface"/> or some other interface tag to enforce that this is being used around
             a struct that is actually a COM wrapper.
            </typeparam>
        </member>
        <member name="M:Windows.Win32.Foundation.ComScope`1.TryQuery``1(Windows.Win32.Foundation.HRESULT@)">
            <summary>
             Tries querying the requested interface into a new <see cref="T:Windows.Win32.Foundation.ComScope`1"/>.
            </summary>
            <param name="hr">The result of the query.</param>
        </member>
        <member name="M:Windows.Win32.Foundation.ComScope`1.Query``1">
            <summary>
             Queries the requested interface into a new <see cref="T:Windows.Win32.Foundation.ComScope`1"/>.
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.ComScope`1.TryQueryFrom``1(``0*,Windows.Win32.Foundation.HRESULT@)">
            <summary>
             Attempt to create a <see cref="T:Windows.Win32.Foundation.ComScope`1"/> from the given COM interface.
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.ComScope`1.QueryFrom``1(``0*)">
            <summary>
             Create a <see cref="T:Windows.Win32.Foundation.ComScope`1"/> from the given COM interface. Throws on failure.
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.ComScope`1.SupportsInterface``1">
            <summary>
             Simple helper for checking if a given interface is supported. Only use this if you don't intend to
             use the interface, otherwise use <see cref="M:Windows.Win32.Foundation.ComScope`1.TryQuery``1(Windows.Win32.Foundation.HRESULT@)"/>.
            </summary>
        </member>
        <member name="T:Windows.Win32.Foundation.GlobalInterfaceTable">
            <summary>
             Wrapper for the COM global interface table.
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.GlobalInterfaceTable.RegisterInterface``1(``0*)">
            <summary>
             Registers the given <paramref name="interface"/> in the global interface table. This decrements the
             ref count so that the entry in the table will "own" the interface (as it increments the ref count).
            </summary>
            <returns>The cookie used to refer to the interface in the table.</returns>
        </member>
        <member name="M:Windows.Win32.Foundation.GlobalInterfaceTable.GetInterface``1(System.UInt32,Windows.Win32.Foundation.HRESULT@)">
            <summary>
             Gets an agile interface for the <paramref name="cookie"/> that was given back by
             <see cref="M:Windows.Win32.Foundation.GlobalInterfaceTable.RegisterInterface``1(``0*)"/>
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.GlobalInterfaceTable.RevokeInterface(System.UInt32)">
            <summary>
             Revokes the interface registered with <see cref="M:Windows.Win32.Foundation.GlobalInterfaceTable.RegisterInterface``1(``0*)"/>.
             This will decrement the ref count for the interface.
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.GlobalInterfaceTable.CreateUnknownStrategy">
            <summary>
             Creates a new instance of an <see cref="T:System.Runtime.InteropServices.Marshalling.IIUnknownStrategy"/> for <see cref="T:System.Runtime.InteropServices.Marshalling.StrategyBasedComWrappers"/>
             that uses the Global Interface Table.
            </summary>
            <remarks>
             <para>
              The returned instance should not be cached.
             </para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.Foundation.GlobalInterfaceTable.UnknownStrategy">
            <summary>
             Strategy for <see cref="T:System.Runtime.InteropServices.Marshalling.StrategyBasedComWrappers"/> that uses the <see cref="T:Windows.Win32.Foundation.GlobalInterfaceTable"/>.
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.IID.Get``1">
            <summary>
             Gets a pointer to the IID <see cref="T:System.Guid"/> for the given <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.IID.GetRef``1">
            <summary>
             Gets a reference to the IID <see cref="T:System.Guid"/> for the given <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.IID.NULL">
            <summary>
             Empty <see cref="T:System.Guid"/> (GUID_NULL in docs).
            </summary>
        </member>
        <member name="T:Windows.Win32.Foundation.PCSTR">
            <summary>
            A pointer to a null-terminated, constant, ANSI character string.
            </summary>
        </member>
        <member name="F:Windows.Win32.Foundation.PCSTR.Value">
            <summary>
            A pointer to the first character in the string. The content should be considered readonly, as it was typed as constant in the SDK.
            </summary>
        </member>
        <member name="P:Windows.Win32.Foundation.PCSTR.Length">
            <summary>
            Gets the number of characters up to the first null character (exclusive).
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.PCSTR.ToString">
            <summary>
            Returns a <see langword="string"/> with a copy of this character array, decoding as UTF-8.
            </summary>
            <returns>A <see langword="string"/>, or <see langword="null"/> if <see cref="F:Windows.Win32.Foundation.PCSTR.Value"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Windows.Win32.Foundation.PCSTR.AsSpan">
            <summary>
            Returns a span of the characters in this string, up to the first null character (exclusive).
            </summary>
        </member>
        <member name="T:Windows.Win32.Foundation.POINTL">
            <summary>The POINTL structure defines the x- and y-coordinates of a point.</summary>
            <remarks>The POINTL structure is identical to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-point">POINT</a> structure.</remarks>
        </member>
        <member name="F:Windows.Win32.Foundation.POINTL.x">
            <summary>Specifies the <i>x</i>-coordinate of the point.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.POINTL.y">
            <summary>Specifies the <i>y</i>-coordinate of the point.</summary>
        </member>
        <member name="M:Windows.Win32.Foundation.PSTR.ToString">
            <inheritdoc cref="M:Windows.Win32.Foundation.PCSTR.ToString"/>
        </member>
        <member name="P:Windows.Win32.Foundation.PSTR.Length">
            <inheritdoc cref="P:Windows.Win32.Foundation.PCSTR.Length"/>
        </member>
        <member name="M:Windows.Win32.Foundation.PSTR.AsSpan">
            <summary>
            Returns a span of the characters in this string, up to the first null character (exclusive).
            </summary>
        </member>
        <member name="T:Windows.Win32.Foundation.SIZE">
            <summary>The SIZE structure defines the width and height of a rectangle.</summary>
            <remarks>The rectangle dimensions stored in this structure can correspond to viewport extents, window extents, text extents, bitmap dimensions, or the aspect-ratio filter for some extended functions.</remarks>
        </member>
        <member name="F:Windows.Win32.Foundation.SIZE.cx">
            <summary>Specifies the rectangle's width. The units depend on which function uses this structure.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.SIZE.cy">
            <summary>Specifies the rectangle's height. The units depend on which function uses this structure.</summary>
        </member>
        <member name="M:Windows.Win32.Graphics.GdiPlus.EncoderParameters.SizeOf(System.Int32)">
            <summary>Computes the amount of memory that must be allocated to store this struct, including the specified number of elements in the variable length inline array at the end.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.GdiPlus.GdiPlusInitialization">
            <summary>
             Helper to ensure GDI+ is initialized before making calls.
            </summary>
        </member>
        <member name="M:Windows.Win32.Graphics.GdiPlus.GdiPlusInitialization.EnsureInitialized">
            <summary>
             Returns true if GDI+ has been started.
            </summary>
            <remarks>
             <para>
              This should be called anywhere you make <see cref="T:Windows.Win32.PInvokeCore"/> calls to GDI+ where you don't
              already have a GDI+ handle. In System.Drawing.Common, this is done in the PInvoke static constructor
              so it is not necessary for methods defined there.
             </para>
             <para>
              We don't do this implicitly in the Core assembly to avoid unnecessary loading of GDI+.
             </para>
             <para>
              https://github.com/microsoft/CsWin32/issues/1308 tracks a proposal to make this more automatic.
             </para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.PixelFormat.Indexed">
            <summary>
             Specifies that pixel data contains color indexed values which means they are an index to colors in the
             system color table, as opposed to individual color values.
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.PixelFormat.Gdi">
            <summary>
             Specifies that pixel data contains GDI colors.
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.PixelFormat.Alpha">
            <summary>
             Specifies that pixel data contains alpha values that are not pre-multiplied.
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.PixelFormat.PAlpha">
            <summary>
             Specifies that pixel format contains pre-multiplied alpha values.
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.PixelFormat.Extended">
            <summary>
             Specifies that pixel format contains extended color values of 16 bits per channel.
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.PixelFormat.Undefined">
            <summary>
             Specifies that pixel format is undefined.
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.PixelFormat.DontCare">
            <summary>
             Specifies that pixel format doesn't matter.
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.PixelFormat.Format1bppIndexed">
            <summary>
             Specifies that pixel format is 1 bit per pixel indexed color. The color table therefore has two colors in it.
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.PixelFormat.Format4bppIndexed">
            <summary>
             Specifies that pixel format is 4 bits per pixel indexed color. The color table therefore has 16 colors in it.
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.PixelFormat.Format8bppIndexed">
            <summary>
             Specifies that pixel format is 8 bits per pixel indexed color. The color table therefore has 256 colors in it.
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.PixelFormat.Format16bppGrayScale">
            <summary>
             Specifies that pixel format is 16 bits per pixel. The color information specifies 65536 shades of gray.
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.PixelFormat.Format16bppRgb555">
            <summary>
             Specifies that pixel format is 16 bits per pixel. The color information specifies 32768 shades of color of
             which 5 bits are red, 5 bits are green and 5 bits are blue.
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.PixelFormat.Format16bppArgb1555">
            <summary>
             Specifies that pixel format is 16 bits per pixel. The color information specifies 32768 shades of color of
             which 5 bits are red, 5 bits are green, 5 bits are blue and 1 bit is alpha.
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.PixelFormat.Format24bppRgb">
            <summary>
             Specifies that pixel format is 24 bits per pixel. The color information specifies 16777216 shades of color
             of which 8 bits are red, 8 bits are green and 8 bits are blue.
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.PixelFormat.Format32bppRgb">
            <summary>
             Specifies that pixel format is 24 bits per pixel. The color information specifies 16777216 shades of color
             of which 8 bits are red, 8 bits are green and 8 bits are blue.
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.PixelFormat.Format32bppArgb">
            <summary>
             Specifies that pixel format is 32 bits per pixel. The color information specifies 16777216 shades of color
             of which 8 bits are red, 8 bits are green and 8 bits are blue. The 8 additional bits are alpha bits.
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.PixelFormat.Format32bppPArgb">
            <summary>
             Specifies that pixel format is 32 bits per pixel. The color information specifies 16777216 shades of color
             of which 8 bits are red, 8 bits are green and 8 bits are blue. The 8 additional bits are pre-multiplied alpha bits.
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.PixelFormat.Format48bppRgb">
            <summary>
             Specifies that pixel format is 48 bits per pixel. The color information specifies 16777216 shades of color
             of which 8 bits are red, 8 bits are green and 8 bits are blue. The 8 additional bits are alpha bits.
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.PixelFormat.Format64bppArgb">
            <summary>
             Specifies pixel format is 64 bits per pixel. The color information specifies 16777216 shades of color of
             which 16 bits are red, 16 bits are green and 16 bits are blue. The 16 additional bits are alpha bits.
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.PixelFormat.Format64bppPArgb">
            <summary>
             Specifies that pixel format is 64 bits per pixel. The color information specifies 16777216 shades of color
             of which 16 bits are red, 16 bits are green and 16 bits are blue. The 16 additional bits are pre-multiplied
             alpha bits.
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.PixelFormat.Max">
            <summary>
             Specifies that pixel format is 64 bits per pixel. The color information specifies 16777216 shades of color
             of which 16 bits are red, 16 bits are green and 16 bits are blue. The 16 additional bits are alpha bits.
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.GdiPlus.Rect">
            <summary>Contains a set of four floating-point numbers that represent the location and size of a rectangle.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/windows.foundation/ns-windows-foundation-rect">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.Rect.X">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.Rect.Y">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.Rect.Width">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Graphics.GdiPlus.Rect.Height">
            <summary></summary>
        </member>
        <member name="T:Windows.Win32.Graphics.GdiPlus.RectF">
            <summary>Creates a D2D1_RECT_F structure that contains the specified dimensions.</summary>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a></b> A rectangle structure that contains the specified dimensions.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d2d1helper/nf-d2d1helper-rectf">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.Graphics.GdiPlus.Status">
            <summary>This section lists the styles, in addition to standard window styles, supported by status bar controls.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/Controls/status-bar-styles">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.Graphics.Gdi.ArgbBuffer">
            <summary>
             Buffer for <see cref="T:Windows.Win32.Graphics.Gdi.ARGB"/> values. Uses the stack for buffer sizes up to 16. Use in a <see langword="using"/>
             statement.
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Gdi.CreateBitmapScope">
            <summary>
             Helper to scope lifetime of a <see cref="T:Windows.Win32.Graphics.Gdi.HBITMAP"/> created via <see cref="M:Windows.Win32.PInvokeCore.CreateBitmap(System.Int32,System.Int32,System.UInt32,System.UInt32,System.Void*)"/>
             Deletes the <see cref="T:Windows.Win32.Graphics.Gdi.HBITMAP"/> (if any) when disposed.
            </summary>
            <remarks>
             <para>
              Use in a <see langword="using" /> statement. If you must pass this around, always pass
              by <see langword="ref" /> to avoid duplicating the handle and risking a double delete.
             </para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Gdi.CreateBitmapScope.#ctor(System.Int32,System.Int32,System.UInt32,System.UInt32,System.Void*)">
            <summary>
             Creates a bitmap using <see cref="M:Windows.Win32.PInvokeCore.CreateBitmap(System.Int32,System.Int32,System.UInt32,System.UInt32,System.Void*)"/>
            </summary>
        </member>
        <member name="M:Windows.Win32.Graphics.Gdi.CreateBitmapScope.#ctor(Windows.Win32.Graphics.Gdi.HDC,System.Int32,System.Int32)">
            <summary>
             Creates a bitmap compatible with the given <see cref="T:Windows.Win32.Graphics.Gdi.HDC"/> via <see cref="M:Windows.Win32.PInvokeCore.CreateCompatibleBitmap(Windows.Win32.Graphics.Gdi.HDC,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Gdi.CreateDcScope">
            <summary>
             Helper to scope lifetime of an HDC retrieved via CreateDC/CreateCompatibleDC.
             Deletes the HDC (if any) when disposed.
            </summary>
            <remarks>
             <para>
             Use in a <see langword="using" /> statement. If you must pass this around, always pass
             by <see langword="ref" /> to avoid duplicating the handle and risking a double delete.
             </para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Gdi.CreateDcScope.#ctor(Windows.Win32.Graphics.Gdi.HDC)">
            <summary>
             Creates a compatible HDC for <paramref name="hdc"/> using <see cref="M:Windows.Win32.PInvokeCore.CreateCompatibleDC(Windows.Win32.Graphics.Gdi.HDC)"/>.
            </summary>
            <remarks>
             <para>
              Passing a <see langword="null"/> HDC will use the current screen.
             </para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.Graphics.Gdi.DeviceContextHdcScope">
            <summary>
             <para>
              Helper to scope getting a <see cref="P:Windows.Win32.Graphics.Gdi.DeviceContextHdcScope.HDC"/> from a <see cref="T:Windows.Win32.Graphics.Gdi.IHdcContext"/> object. Releases
              the <see cref="P:Windows.Win32.Graphics.Gdi.DeviceContextHdcScope.HDC"/> when disposed, unlocking the parent <see cref="T:Windows.Win32.Graphics.Gdi.IHdcContext"/> object.
             </para>
             <para>
              Also saves and restores the state of the HDC.
             </para>
            </summary>
            <remarks>
             <para>
              Use in a <see langword="using" /> statement. If you must pass this around, always pass by+
              <see langword="ref" /> to avoid duplicating the handle and risking a double release.
             </para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Gdi.DeviceContextHdcScope.#ctor(Windows.Win32.Graphics.Gdi.IHdcContext,System.Boolean,System.Boolean)">
            <summary>
             Gets the <see cref="P:Windows.Win32.Graphics.Gdi.DeviceContextHdcScope.HDC"/> from the given <paramref name="deviceContext"/>.
            </summary>
            <remarks>
             <para>
              When a <see cref="T:System.Drawing.Graphics"/> object is created from a <see cref="T:Windows.Win32.Graphics.Gdi.HDC"/> the clipping region and
              the viewport origin are applied (<see cref="M:Windows.Win32.PInvokeCore.GetViewportExtEx(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Foundation.SIZE*)"/>). The clipping
              region isn't reflected in <see cref="P:System.Drawing.Graphics.Clip"/>, which is combined with the HDC HRegion.
             </para>
             <para>
              The Graphics object saves and restores DC state when performing operations that would modify the DC to
              maintain the DC in its original or returned state after <see cref="M:System.Drawing.Graphics.ReleaseHdc()"/>.
             </para>
            </remarks>
            <param name="applyGraphicsState">
             Applies the origin transform and clipping region of the <paramref name="deviceContext"/> if it is an
             object of type <see cref="T:System.Drawing.Graphics"/>. Otherwise this is a no-op.
            </param>
            <param name="saveHdcState">
             When true, saves and restores the <see cref="P:Windows.Win32.Graphics.Gdi.DeviceContextHdcScope.HDC"/> state.
            </param>
        </member>
        <member name="M:Windows.Win32.Graphics.Gdi.DeviceContextHdcScope.#ctor(Windows.Win32.Graphics.Gdi.IHdcContext,System.Drawing.ApplyGraphicsProperties,System.Boolean)">
            <summary>
             Prefer to use <see cref="M:Windows.Win32.Graphics.Gdi.DeviceContextHdcScope.#ctor(Windows.Win32.Graphics.Gdi.IHdcContext,System.Boolean,System.Boolean)"/>.
            </summary>
            <remarks>
             <para>
              Ideally we'd not bifurcate what properties we apply unless we're absolutely sure we only want one.
             </para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.Graphics.Gdi.DEVMODEW">
            <summary>The DEVMODEW structure is used for specifying characteristics of display and print devices in the Unicode (wide) character set.</summary>
            <remarks>
            <para>The <a href="https://docs.microsoft.com/windows-hardware/drivers/display/the-devmodew-structure">DEVMODEW structure</a> is the Unicode version of the <a href="https://docs.microsoft.com/previous-versions//ms535771(v=vs.85)">DEVMODE </a> structure (described in the Microsoft Windows SDK documentation). While applications can use either the ANSI or Unicode version of the structure, drivers are required to use the Unicode version. For printer drivers, the DEVMODEW structure is used for specifying printer characteristics required by a print document. It is also used for specifying a printer's default characteristics. Immediately following a DEVMODEW structure's defined members (often referred to as its public members), there can be a set of driver-defined members (often referred to as private DEVMODEW members). The driver supplies the size, in bytes, of this private area in <b>dmDriverExtra</b>. Driver-defined private members are for exclusive use by the driver. The starting address for the private members can be referenced using the <b>dmSize</b> member as follows:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmDeviceName">
            <summary>
            <para>For a display, specifies the name of the display driver's DLL; for example, "perm3dd" for the 3Dlabs Permedia3 display driver. For a printer, specifies the "friendly name"; for example, "PCL/HP LaserJet" in the case of PCL/HP LaserJet. If the name is greater than CCHDEVICENAME characters in length, the spooler truncates it to fit in the array.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmSpecVersion">
            <summary>Specifies the version number of this DEVMODEW structure. The current version number is identified by the DM_SPECVERSION constant in <i>wingdi.h</i>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmDriverVersion">
            <summary>
            <para>For a printer, specifies the printer driver version number assigned by the printer driver developer. Display drivers can set this member to DM_SPECVERSION.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmSize">
            <summary>Specifies the size in bytes of the public DEVMODEW structure, not including any private, driver-specified members identified by the <b>dmDriverExtra</b> member.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmDriverExtra">
            <summary>Specifies the number of bytes of private driver data that follow the public structure members. If a device driver does not provide private DEVMODEW members, this member should be set to zero.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmFields">
            <summary>Specifies bit flags identifying which of the following DEVMODEW members are in use. For example, the DM_ORIENTATION flag is set when the <b>dmOrientation</b> member contains valid data. The DM_XXX flags are defined in <i>wingdi.h</i>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmColor">
            <summary>
            <para>For printers, specifies whether a color printer should print color or monochrome. This member can be one of DMCOLOR_COLOR or DMCOLOR_MONOCHROME. This member is not used for displays.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmDuplex">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmYResolution">
            <summary>
            <para>For printers, specifies the <i>y</i> resolution of the printer, in DPI. If this member is used, the <b>dmPrintQuality</b> member specifies the <i>x</i> resolution. This member is not used for displays.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmTTOption">
            <summary>
            <para>For printers, specifies how TrueType fonts should be printed. This member must be one of the DMTT-prefixed constants defined in <i>wingdi.h</i>. This member is not used for displays.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmCollate">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmFormName">
            <summary>
            <para>For printers, specifies the name of the form to use; such as "Letter" or "Legal". This must be a name that can be obtain by calling the Win32 <b>EnumForms</b> function (described in the Microsoft Window SDK documentation). This member is not used for displays.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmLogPixels">
            <summary>
            <para>For displays, specifies the number of logical pixels per inch of a display device and should be equal to the <b>ulLogPixels</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/winddi/ns-winddi-gdiinfo">GDIINFO</a> structure. This member is not used for printers.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmBitsPerPel">
            <summary>
            <para>For displays, specifies the color resolution, in bits per pixel, of a display device. This member is not used for printers.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmPelsWidth">
            <summary>
            <para>For displays, specifies the width, in pixels, of the visible device surface. This member is not used for printers.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmPelsHeight">
            <summary>
            <para>For displays, specifies the height, in pixels, of the visible device surface. This member is not used for printers.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmDisplayFrequency">
            <summary>
            <para>For displays, specifies the frequency, in hertz, of a display device in its current mode. This member is not used for printers.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmICMMethod">
            <summary>Specifies one of the DMICMMETHOD-prefixed constants defined in <i>wingdi.h</i>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmICMIntent">
            <summary>Specifies one of the DMICM-prefixed constants defined in <i>wingdi.h</i>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmMediaType">
            <summary>Specifies one of the DMMEDIA-prefixed constants defined in <i>wingdi.h</i>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmDitherType">
            <summary>Specifies one of the DMDITHER-prefixed constants defined in <i>wingdi.h</i>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmReserved1">
            <summary>Is reserved for system use and should be ignored by the driver.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmReserved2">
            <summary>Is reserved for system use and should be ignored by the driver.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmPanningWidth">
            <summary>Is reserved for system use and should be ignored by the driver.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.DEVMODEW.dmPanningHeight">
            <summary>Is reserved for system use and should be ignored by the driver.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Gdi.GetDcScope">
            <summary>
             Helper to scope lifetime of an <see cref="T:Windows.Win32.Graphics.Gdi.HDC"/> retrieved via <see cref="M:Windows.Win32.PInvokeCore.GetDC(Windows.Win32.Foundation.HWND)"/> and
             <see cref="M:Windows.Win32.PInvokeCore.GetDCEx(Windows.Win32.Foundation.HWND,Windows.Win32.Graphics.Gdi.HRGN,Windows.Win32.Graphics.Gdi.GET_DCX_FLAGS)"/>. Releases the <see cref="T:Windows.Win32.Graphics.Gdi.HDC"/> (if any)
             when disposed.
            </summary>
            <remarks>
             <para>
              Use in a <see langword="using" /> statement. If you must pass this around, always pass by <see langword="ref" />
              to avoid duplicating the handle and risking a double release.
             </para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Gdi.GetDcScope.#ctor(Windows.Win32.Foundation.HWND,Windows.Win32.Graphics.Gdi.HRGN,Windows.Win32.Graphics.Gdi.GET_DCX_FLAGS)">
            <summary>
             Creates a <see cref="T:Windows.Win32.Graphics.Gdi.HDC"/> using <see cref="M:Windows.Win32.PInvokeCore.GetDCEx(Windows.Win32.Foundation.HWND,Windows.Win32.Graphics.Gdi.HRGN,Windows.Win32.Graphics.Gdi.GET_DCX_FLAGS)"/>.
            </summary>
            <remarks>
             <para>
              GetWindowDC calls GetDCEx(hwnd, null, DCX_WINDOW | DCX_USESTYLE).
             </para>
             <para>
              GetDC calls GetDCEx(hwnd, null, DCX_USESTYLE) when given a handle. (When given null it has additional
              logic, and can't be replaced directly by GetDCEx.
             </para>
            </remarks>
        </member>
        <member name="P:Windows.Win32.Graphics.Gdi.GetDcScope.ScreenDC">
            <summary>
             Creates a DC scope for the primary monitor (not the entire desktop).
            </summary>
            <remarks>
              <para>
               <see cref="M:Windows.Win32.PInvokeCore.CreateDCW(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,Windows.Win32.Graphics.Gdi.DEVMODEW*)" /> is the
               API to get the DC for the entire desktop.
              </para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.Graphics.Gdi.HdcHandle">
            <summary>
             Used when you must keep a handle to an <see cref="T:Windows.Win32.Graphics.Gdi.HDC"/> in a field. Avoid keeping HDC handles in fields
             when possible.
            </summary>
        </member>
        <member name="M:Windows.Win32.Graphics.Gdi.HdcHandle.#ctor(Windows.Win32.Graphics.Gdi.CreateDcScope)">
            <summary>
             Take ownership from a <see cref="T:Windows.Win32.Graphics.Gdi.CreateDcScope"/>.
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Gdi.LOGFONTW">
            <summary>Defines the attributes of a font. (LOGFONTW)</summary>
            <remarks>
            <para>The following situations do not support ClearType antialiasing: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shtypes/ns-shtypes-logfontw#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.LOGFONTW.lfHeight">
            <summary>
            <para>Type: <b>LONG</b> Specifies the height, in logical units, of the font's character cell or character. The character height value (also known as the em height) is the character cell height value minus the internal-leading value. The font mapper interprets the value specified in <b>lfHeight</b> in the following manner. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shtypes/ns-shtypes-logfontw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.LOGFONTW.lfWidth">
            <summary>
            <para>Type: <b>LONG</b> Specifies the average width, in logical units, of characters in the font. If <b>lfWidth</b> is not zero, the aspect ratio of the device is matched against the digitization aspect ratio of the available fonts to find the closest match, determined by the absolute value of the difference.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shtypes/ns-shtypes-logfontw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.LOGFONTW.lfEscapement">
            <summary>
            <para>Type: <b>LONG</b> Specifies the angle, in tenths of degrees, between the escapement vector and the x-axis of the device. The escapement vector is parallel to the base line of a row of text. The <b>lfEscapement</b> member specifies both the escapement and orientation. You should set <b>lfEscapement</b> and <b>lfOrientation</b> to the same value.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shtypes/ns-shtypes-logfontw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.LOGFONTW.lfOrientation">
            <summary>
            <para>Type: <b>LONG</b> Specifies the angle, in tenths of degrees, between each character's base line and the x-axis of the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shtypes/ns-shtypes-logfontw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.LOGFONTW.lfWeight">
            <summary>
            <para>Type: <b>LONG</b> Specifies the weight of the font in the range 0 through 1000. For example, 400 is normal and 700 is bold. If this value is zero, a default weight is used. The following values are defined in Wingdi.h for convenience. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shtypes/ns-shtypes-logfontw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.LOGFONTW.lfItalic">
            <summary>
            <para>Type: <b>BYTE</b> <b>TRUE</b> to specify an italic font.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shtypes/ns-shtypes-logfontw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.LOGFONTW.lfUnderline">
            <summary>
            <para>Type: <b>BYTE</b> <b>TRUE</b> to specify an underlined font.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shtypes/ns-shtypes-logfontw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.LOGFONTW.lfStrikeOut">
            <summary>
            <para>Type: <b>BYTE</b> <b>TRUE</b> to specify a strikeout font.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shtypes/ns-shtypes-logfontw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.LOGFONTW.lfCharSet">
            <summary>
            <para>Type: <b>BYTE</b> Specifies the character set. The following values are predefined: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shtypes/ns-shtypes-logfontw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.LOGFONTW.lfOutPrecision">
            <summary>Type: <b>BYTE</b></summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.LOGFONTW.lfClipPrecision">
            <summary>Type: <b>BYTE</b></summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.LOGFONTW.lfQuality">
            <summary>Type: <b>BYTE</b></summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.LOGFONTW.lfPitchAndFamily">
            <summary>Type: <b>BYTE</b></summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.LOGFONTW.lfFaceName">
            <summary>
            <para>Type: <b>TCHAR[LF_FACESIZE]</b> Specifies a null-terminated string that specifies the typeface name of the font. The length of this string must not exceed 32 characters, including the terminating null character. The <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-enumfontfamiliesa">EnumFontFamilies</a> function can be used to enumerate the typeface names of all currently available fonts. If <b>lfFaceName</b> is an empty string, GDI uses the first font that matches the other specified attributes.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shtypes/ns-shtypes-logfontw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Gdi.RegionScope">
            <summary>
             Helper to scope creating regions. Deletes the region when disposed.
            </summary>
            <remarks>
             <para>
              Use in a <see langword="using" /> statement. If you must pass this around, always pass
              by <see langword="ref" /> to avoid duplicating the handle and risking a double deletion.
             </para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Gdi.RegionScope.#ctor(System.Drawing.Rectangle)">
            <summary>
             Creates a region with the given rectangle via <see cref="M:Windows.Win32.PInvokeCore.CreateRectRgn(System.Int32,System.Int32,System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Windows.Win32.Graphics.Gdi.RegionScope.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Creates a region with the given rectangle via <see cref="M:Windows.Win32.PInvokeCore.CreateRectRgn(System.Int32,System.Int32,System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Windows.Win32.Graphics.Gdi.RegionScope.#ctor(Windows.Win32.Graphics.Gdi.HDC)">
            <summary>
             Creates a clipping region copy via <see cref="M:Windows.Win32.PInvokeCore.GetClipRgn(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Graphics.Gdi.HRGN)"/> for the given device context.
            </summary>
            <param name="hdc">Handle to a device context to copy the clipping region from.</param>
        </member>
        <member name="M:Windows.Win32.Graphics.Gdi.RegionScope.#ctor(Windows.Win32.Foundation.IPointer{Windows.Win32.Graphics.GdiPlus.GpRegion},Windows.Win32.Foundation.IPointer{Windows.Win32.Graphics.GdiPlus.GpGraphics})">
            <summary>
             Creates a native region from a GDI+ <see cref="T:Windows.Win32.Graphics.GdiPlus.GpRegion"/>.
            </summary>
        </member>
        <member name="P:Windows.Win32.Graphics.Gdi.RegionScope.IsNull">
            <summary>
             Returns true if this represents a null HRGN.
            </summary>
        </member>
        <member name="M:Windows.Win32.Graphics.Gdi.RegionScope.RelinquishOwnership">
            <summary>
             Clears the handle. Use this to hand over ownership to another entity.
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Gdi.RGNDATAHEADER">
            <summary>The RGNDATAHEADER structure describes the data returned by the GetRegionData function.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-rgndataheader">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.RGNDATAHEADER.dwSize">
            <summary>The size, in bytes, of the header.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.RGNDATAHEADER.iType">
            <summary>The type of region. This value must be RDH_RECTANGLES.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.RGNDATAHEADER.nCount">
            <summary>The number of rectangles that make up the region.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.RGNDATAHEADER.nRgnSize">
            <summary>The size of the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-rgndata">RGNDATA</a> buffer required to receive the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structures that make up the region. If the size is not known, this member can be zero.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.RGNDATAHEADER.rcBound">
            <summary>A bounding rectangle for the region in logical units.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Gdi.SaveDcScope">
            <summary>
             Helper to scope lifetime of a saved device context state.
            </summary>
            <remarks>
             <para>
              Use in a <see langword="using" /> statement. If you must pass this around, always pass by <see langword="ref" />
              to avoid duplicating the handle and risking a double restore.
             </para>
             <para>
              The state that is saved includes ICM (color management), palette, path drawing state, and other objects
              that are selected into the DC (bitmap, brush, pen, clipping region, font).
             </para>
             <para>
              Ideally saving the entire DC state can be avoided for simple drawing operations and relying on restoring
              individual state pieces can be done instead (putting back the original pen, etc.).
             </para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Gdi.SaveDcScope.#ctor(Windows.Win32.Graphics.Gdi.HDC)">
            <summary>
             Saves the device context state using <see cref="M:Windows.Win32.PInvokeCore.SaveDC(Windows.Win32.Graphics.Gdi.HDC)"/>.
            </summary>
            <param name="hdc"></param>
        </member>
        <member name="T:Windows.Win32.Graphics.Gdi.SelectObjectScope">
            <summary>
             Helper to scope selecting a GDI object into an <see cref="T:Windows.Win32.Graphics.Gdi.HDC"/>. Restores the original
             object into the <see cref="T:Windows.Win32.Graphics.Gdi.HDC"/> when disposed.
            </summary>
            <remarks>
             <para>
              Use in a <see langword="using" /> statement. If you must pass this around, always pass
              by <see langword="ref" /> to avoid duplicating the handle and risking a double selection.
             </para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Gdi.SelectObjectScope.#ctor(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Graphics.Gdi.HGDIOBJ)">
            <summary>
             Selects <paramref name="object"/> into the given <paramref name="hdc"/> using
             <see cref="M:Windows.Win32.PInvokeCore.SelectObject(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Graphics.Gdi.HGDIOBJ)"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Windows.Win32.Graphics.Gdi.BITMAPINFO" -->
        <member name="F:Windows.Win32.Graphics.Gdi.BITMAPINFO.bmiHeader">
            <summary>
            <para>A <a href="https://docs.microsoft.com/windows/win32/api/wingdi/ns-wingdi-bitmapinfoheader">BITMAPINFOHEADER</a> structure that contains information about the dimensions of color format. .</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-bitmapinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.BITMAPINFO.bmiColors">
            <summary>
            <para>The <b>bmiColors</b> member contains one of the following: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-bitmapinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="M:Windows.Win32.Graphics.Gdi.BITMAPINFO.SizeOf(System.Int32)">
            <summary>Computes the amount of memory that must be allocated to store this struct, including the specified number of elements in the variable length inline array at the end.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER">
            <summary>The BITMAPINFOHEADER structure contains information about the dimensions and color format of a device-independent bitmap (DIB).</summary>
            <remarks>
            <para><h3><a id="Color_Tables"></a><a id="color_tables"></a><a id="COLOR_TABLES"></a>Color Tables</h3> The <b>BITMAPINFOHEADER</b> structure may be followed by an array of palette entries or color masks. The rules depend on the value of <b>biCompression</b>. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-bitmapinfoheader#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER.biSize">
            <summary>Specifies the number of bytes required by the structure. This value does not include the size of the color table or the size of the color masks, if they are appended to the end of structure. See Remarks.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER.biWidth">
            <summary>Specifies the width of the bitmap, in pixels. For information about calculating the stride of the bitmap, see Remarks.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER.biHeight">
            <summary>
            <para>Specifies the height of the bitmap, in pixels. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-bitmapinfoheader#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER.biPlanes">
            <summary>Specifies the number of planes for the target device. This value must be set to 1.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER.biBitCount">
            <summary>Specifies the number of bits per pixel (bpp). For uncompressed formats, this value is the average number of bits per pixel. For compressed formats, this value is the implied bit depth of the uncompressed image, after the image has been decoded.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER.biCompression">
            <summary>
            <para>For compressed video and YUV formats, this member is a FOURCC code, specified as a <b>DWORD</b> in little-endian order. For example, YUYV video has the FOURCC 'VYUY' or 0x56595559. For more information, see <a href="https://docs.microsoft.com/windows/desktop/DirectShow/fourcc-codes">FOURCC Codes</a>. For uncompressed RGB formats, the following values are possible: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-bitmapinfoheader#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER.biSizeImage">
            <summary>Specifies the size, in bytes, of the image. This can be set to 0 for uncompressed RGB bitmaps.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER.biXPelsPerMeter">
            <summary>Specifies the horizontal resolution, in pixels per meter, of the target device for the bitmap.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER.biYPelsPerMeter">
            <summary>Specifies the vertical resolution, in pixels per meter, of the target device for the bitmap.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER.biClrUsed">
            <summary>Specifies the number of color indices in the color table that are actually used by the bitmap. See Remarks for more information.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER.biClrImportant">
            <summary>Specifies the number of color indices that are considered important for displaying the bitmap. If this value is zero, all colors are important.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Gdi.MONITORINFO">
            <summary>The MONITORINFO structure contains information about a display monitor.The GetMonitorInfo function stores information in a MONITORINFO structure or a MONITORINFOEX structure.The MONITORINFO structure is a subset of the MONITORINFOEX structure.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-monitorinfo">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.MONITORINFO.cbSize">
            <summary>
            <para>The size of the structure, in bytes. Set this member to <c>sizeof ( MONITORINFO )</c> before calling the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getmonitorinfoa">GetMonitorInfo</a> function. Doing so lets the function determine the type of structure you are passing to it.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-monitorinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.MONITORINFO.rcMonitor">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that specifies the display monitor rectangle, expressed in virtual-screen coordinates. Note that if the monitor is not the primary display monitor, some of the rectangle's coordinates may be negative values.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.MONITORINFO.rcWork">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that specifies the work area rectangle of the display monitor, expressed in virtual-screen coordinates. Note that if the monitor is not the primary display monitor, some of the rectangle's coordinates may be negative values.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.MONITORINFO.dwFlags">
            <summary>
            <para>A set of flags that represent attributes of the display monitor. The following flag is defined. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-monitorinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Gdi.MONITORINFOEXW">
            <summary>The MONITORINFOEX structure contains information about a display monitor.The GetMonitorInfo function stores information into a MONITORINFOEX structure or a MONITORINFO structure.The MONITORINFOEX structure is a superset of the MONITORINFO structure. (Unicode)</summary>
            <remarks>
            <para>> [!NOTE] > The winuser.h header defines MONITORINFOEX as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-monitorinfoexw#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.MONITORINFOEXW.szDevice">
            <summary>A string that specifies the device name of the monitor being used.  Most applications have no use for a display monitor name, and so can save some bytes by using a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-monitorinfo">MONITORINFO</a> structure.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Gdi.PALETTEENTRY">
            <summary>Specifies the color and usage of an entry in a logical palette.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-paletteentry">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.PALETTEENTRY.peRed">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BYTE</a></b> The red intensity value for the palette entry.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-paletteentry#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.PALETTEENTRY.peGreen">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BYTE</a></b> The green intensity value for the palette entry.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-paletteentry#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.PALETTEENTRY.peBlue">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BYTE</a></b> The blue intensity value for the palette entry.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-paletteentry#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.PALETTEENTRY.peFlags">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BYTE</a></b> The alpha intensity value for the palette entry. Note that as of DirectX 8, this member is treated differently than documented for Windows.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-paletteentry#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Gdi.RGBQUAD">
            <summary>The RGBQUAD structure describes a color consisting of relative intensities of red, green, and blue.</summary>
            <remarks>The <b>bmiColors</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-bitmapinfo">BITMAPINFO</a> structure consists of an array of <b>RGBQUAD</b> structures.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.RGBQUAD.rgbBlue">
            <summary>The intensity of blue in the color.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.RGBQUAD.rgbGreen">
            <summary>The intensity of green in the color.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.RGBQUAD.rgbRed">
            <summary>The intensity of red in the color.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.RGBQUAD.rgbReserved">
            <summary>This member is reserved and must be zero.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Gdi.RGNDATA">
            <summary>The RGNDATA structure contains a header and an array of rectangles that compose a region. The rectangles are sorted top to bottom, left to right. They do not overlap.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-rgndata">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.RGNDATA.rdh">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-rgndataheader">RGNDATAHEADER</a> structure. The members of this structure specify the type of region (whether it is rectangular or trapezoidal), the number of rectangles that make up the region, the size of the buffer that contains the rectangle structures, and so on.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.RGNDATA.Buffer">
            <summary>Specifies an arbitrary-size buffer that contains the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structures that make up the region.</summary>
        </member>
        <member name="M:Windows.Win32.Graphics.Gdi.RGNDATA.SizeOf(System.Int32)">
            <summary>Computes the amount of memory that must be allocated to store this struct, including the specified number of elements in the variable length inline array at the end.</summary>
        </member>
        <member name="T:Windows.Win32.ObjectScope">
            <summary>
             Helper to scope lifetime of a GDI object. Deletes the given object (if any) when disposed.
            </summary>
            <remarks>
             <para>
              Use in a <see langword="using" /> statement. If you must pass this around, always pass
              by <see langword="ref" /> to avoid duplicating the handle and risking a double deletion.
             </para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.ObjectScope.#ctor(Windows.Win32.Graphics.Gdi.HGDIOBJ)">
            <param name="object">The object to be deleted when the scope closes.</param>
        </member>
        <member name="T:Windows.Win32.PInvokeCore">
            <content>
            Contains extern methods from "COMCTL32.dll".
            </content>
            <content>
            Contains extern methods from "GDI32.dll".
            </content>
            <content>
            Contains extern methods from "gdiplus.dll".
            </content>
            <content>
            Contains extern methods from "KERNEL32.dll".
            </content>
            <content>
            Contains extern methods from "OLE32.dll".
            </content>
            <content>
            Contains extern methods from "OLEAUT32.dll".
            </content>
            <content>
            Contains extern methods from "USER32.dll".
            </content>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.BitBlt``1(``0,System.Int32,System.Int32,System.Int32,System.Int32,Windows.Win32.Graphics.Gdi.HDC,System.Int32,System.Int32,Windows.Win32.Graphics.Gdi.ROP_CODE)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.BitBlt(Windows.Win32.Graphics.Gdi.HDC,System.Int32,System.Int32,System.Int32,System.Int32,Windows.Win32.Graphics.Gdi.HDC,System.Int32,System.Int32,Windows.Win32.Graphics.Gdi.ROP_CODE)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.BitBlt``1(Windows.Win32.Graphics.Gdi.HDC,System.Int32,System.Int32,System.Int32,System.Int32,``0,System.Int32,System.Int32,Windows.Win32.Graphics.Gdi.ROP_CODE)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.BitBlt(Windows.Win32.Graphics.Gdi.HDC,System.Int32,System.Int32,System.Int32,System.Int32,Windows.Win32.Graphics.Gdi.HDC,System.Int32,System.Int32,Windows.Win32.Graphics.Gdi.ROP_CODE)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.CopyIcon``1(``0,System.Int32,System.Int32,Windows.Win32.UI.WindowsAndMessaging.IMAGE_FLAGS)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.CopyImage(Windows.Win32.Foundation.HANDLE,Windows.Win32.UI.WindowsAndMessaging.GDI_IMAGE_TYPE,System.Int32,System.Int32,Windows.Win32.UI.WindowsAndMessaging.IMAGE_FLAGS)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.CopyCursor``1(``0,System.Int32,System.Int32,Windows.Win32.UI.WindowsAndMessaging.IMAGE_FLAGS)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.CopyImage(Windows.Win32.Foundation.HANDLE,Windows.Win32.UI.WindowsAndMessaging.GDI_IMAGE_TYPE,System.Int32,System.Int32,Windows.Win32.UI.WindowsAndMessaging.IMAGE_FLAGS)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.DrawIconEx``1(Windows.Win32.Graphics.Gdi.HDC,System.Int32,System.Int32,``0,System.Int32,System.Int32,Windows.Win32.UI.WindowsAndMessaging.DI_FLAGS)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.DrawIconEx(Windows.Win32.Graphics.Gdi.HDC,System.Int32,System.Int32,Windows.Win32.UI.WindowsAndMessaging.HICON,System.Int32,System.Int32,System.UInt32,Windows.Win32.Graphics.Gdi.HBRUSH,Windows.Win32.UI.WindowsAndMessaging.DI_FLAGS)"/>/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetClientRect``1(``0,Windows.Win32.Foundation.RECT@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GetClientRect(Windows.Win32.Foundation.HWND,Windows.Win32.Foundation.RECT@)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetIconInfo``1(``0)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GetIconInfo(Windows.Win32.UI.WindowsAndMessaging.HICON,Windows.Win32.UI.WindowsAndMessaging.ICONINFO*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetObject``1(Windows.Win32.Graphics.Gdi.HGDIOBJ,``0@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GetObject(Windows.Win32.Graphics.Gdi.HGDIOBJ,System.Int32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetPaletteEntries(Windows.Win32.Graphics.Gdi.HPALETTE,System.Span{Windows.Win32.Graphics.Gdi.PALETTEENTRY})">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GetPaletteEntries(Windows.Win32.Graphics.Gdi.HPALETTE,System.UInt32,System.UInt32,Windows.Win32.Graphics.Gdi.PALETTEENTRY*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SystemParametersInfo``1(Windows.Win32.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_ACTION,``0@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.SystemParametersInfo(Windows.Win32.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_ACTION,System.UInt32,System.Void*,Windows.Win32.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SystemParametersInfoInt(Windows.Win32.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_ACTION)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.SystemParametersInfo(Windows.Win32.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_ACTION,System.UInt32,System.Void*,Windows.Win32.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SystemParametersInfo(Windows.Win32.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_ACTION,System.Boolean@,System.UInt32)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.SystemParametersInfo(Windows.Win32.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_ACTION,System.UInt32,System.Void*,Windows.Win32.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SystemParametersInfoBool(Windows.Win32.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_ACTION)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.SystemParametersInfo(Windows.Win32.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_ACTION,System.UInt32,System.Void*,Windows.Win32.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SystemParametersInfo(Windows.Win32.UI.Accessibility.HIGHCONTRASTW@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.SystemParametersInfo(Windows.Win32.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_ACTION,System.UInt32,System.Void*,Windows.Win32.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SystemParametersInfo(Windows.Win32.UI.WindowsAndMessaging.NONCLIENTMETRICSW@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.SystemParametersInfo(Windows.Win32.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_ACTION,System.UInt32,System.Void*,Windows.Win32.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.TrySystemParametersInfoForDpi(Windows.Win32.UI.WindowsAndMessaging.NONCLIENTMETRICSW@,System.UInt32)">
            <summary>
             Tries to get system parameter info for the dpi. dpi is ignored if "SystemParametersInfoForDpi()" API
             is not available on the OS that this application is running.
            </summary>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.DestroyPropertySheetPage(Windows.Win32.UI.Controls.HPROPSHEETPAGE)">
            <summary>Destroys a property sheet page. An application must call this function for pages that have not been passed to the PropertySheet function.</summary>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b> Returns nonzero if successful, or zero otherwise.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/prsht/nf-prsht-destroypropertysheetpage">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.PInvokeCore.IDI_APPLICATION">
            <summary>Documentation varies per use. Refer to each: <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfo">GetIconInfo</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexa">GetIconInfoEx</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexw">GetIconInfoEx</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexa">GetIconInfoExA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexw">GetIconInfoExA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexa">GetIconInfoExW</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexw">GetIconInfoExW</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadicona">LoadIcon</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadiconw">LoadIcon</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadicona">LoadIconA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadiconw">LoadIconA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadicona">LoadIconW</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadiconw">LoadIconW</see>.</summary>
        </member>
        <member name="F:Windows.Win32.PInvokeCore.IDI_HAND">
            <summary>Documentation varies per use. Refer to each: <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfo">GetIconInfo</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexa">GetIconInfoEx</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexw">GetIconInfoEx</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexa">GetIconInfoExA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexw">GetIconInfoExA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexa">GetIconInfoExW</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexw">GetIconInfoExW</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadicona">LoadIcon</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadiconw">LoadIcon</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadicona">LoadIconA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadiconw">LoadIconA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadicona">LoadIconW</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadiconw">LoadIconW</see>.</summary>
        </member>
        <member name="F:Windows.Win32.PInvokeCore.IDI_QUESTION">
            <summary>Documentation varies per use. Refer to each: <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfo">GetIconInfo</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexa">GetIconInfoEx</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexw">GetIconInfoEx</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexa">GetIconInfoExA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexw">GetIconInfoExA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexa">GetIconInfoExW</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexw">GetIconInfoExW</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadicona">LoadIcon</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadiconw">LoadIcon</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadicona">LoadIconA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadiconw">LoadIconA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadicona">LoadIconW</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadiconw">LoadIconW</see>.</summary>
        </member>
        <member name="F:Windows.Win32.PInvokeCore.IDI_EXCLAMATION">
            <summary>Documentation varies per use. Refer to each: <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfo">GetIconInfo</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexa">GetIconInfoEx</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexw">GetIconInfoEx</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexa">GetIconInfoExA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexw">GetIconInfoExA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexa">GetIconInfoExW</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexw">GetIconInfoExW</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadicona">LoadIcon</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadiconw">LoadIcon</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadicona">LoadIconA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadiconw">LoadIconA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadicona">LoadIconW</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadiconw">LoadIconW</see>.</summary>
        </member>
        <member name="F:Windows.Win32.PInvokeCore.IDI_ASTERISK">
            <summary>Documentation varies per use. Refer to each: <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfo">GetIconInfo</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexa">GetIconInfoEx</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexw">GetIconInfoEx</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexa">GetIconInfoExA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexw">GetIconInfoExA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexa">GetIconInfoExW</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexw">GetIconInfoExW</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadicona">LoadIcon</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadiconw">LoadIcon</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadicona">LoadIconA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadiconw">LoadIconA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadicona">LoadIconW</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadiconw">LoadIconW</see>.</summary>
        </member>
        <member name="F:Windows.Win32.PInvokeCore.IDI_WINLOGO">
            <summary>Documentation varies per use. Refer to each: <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfo">GetIconInfo</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexa">GetIconInfoEx</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexw">GetIconInfoEx</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexa">GetIconInfoExA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexw">GetIconInfoExA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexa">GetIconInfoExW</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfoexw">GetIconInfoExW</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadicona">LoadIcon</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadiconw">LoadIcon</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadicona">LoadIconA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadiconw">LoadIconA</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadicona">LoadIconW</see>, <see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadiconw">LoadIconW</see>.</summary>
        </member>
        <member name="F:Windows.Win32.PInvokeCore.IDI_SHIELD">
            <summary>Security Shield icon.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadicona">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.PInvokeCore.IDI_WARNING">
            <summary>Exclamation point icon.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadicona">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.PInvokeCore.IDI_ERROR">
            <summary>Hand-shaped icon.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadicona">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.PInvokeCore.IDI_INFORMATION">
            <summary>Asterisk icon.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadicona">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.BitBlt(Windows.Win32.Graphics.Gdi.HDC,System.Int32,System.Int32,System.Int32,System.Int32,Windows.Win32.Graphics.Gdi.HDC,System.Int32,System.Int32,Windows.Win32.Graphics.Gdi.ROP_CODE)">
            <summary>The BitBlt function performs a bit-block transfer of the color data corresponding to a rectangle of pixels from the specified source device context into a destination device context.</summary>
            <param name="hdc">A handle to the destination device context.</param>
            <param name="x">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="y">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="cx">The width, in logical units, of the source and destination rectangles.</param>
            <param name="cy">The height, in logical units, of the source and the destination rectangles.</param>
            <param name="hdcSrc">A handle to the source device context.</param>
            <param name="x1">The x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="y1">The y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="rop">
            <para>A raster-operation code. These codes define how the color data for the source rectangle is to be combined with the color data for the destination rectangle to achieve the final color. The following list shows some common raster operation codes. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-bitblt#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><b>BitBlt</b> only does clipping on the destination DC. If a rotation or shear transformation is in effect in the source device context, <b>BitBlt</b> returns an error. If other transformations exist in the source device context (and a matching transformation is not in effect in the destination device context), the rectangle in the destination device context is stretched, compressed, or rotated, as necessary. If the color formats of the source and destination device contexts do not match, the <b>BitBlt</b> function converts the source color format to match the destination format. When an enhanced metafile is being recorded, an error occurs if the source device context identifies an enhanced-metafile device context. Not all devices support the <b>BitBlt</b> function. For more information, see the RC_BITBLT raster capability entry in the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-getdevicecaps">GetDeviceCaps</a> function as well as the following functions: <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-maskblt">MaskBlt</a>, <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-plgblt">PlgBlt</a>, and <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-stretchblt">StretchBlt</a>. <b>BitBlt</b> returns an error if the source and destination device contexts represent different devices. To transfer data between DCs for different devices, convert the memory bitmap to a DIB by calling <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-getdibits">GetDIBits</a>. To display the DIB to the second device, call <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-setdibits">SetDIBits</a> or <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-stretchdibits">StretchDIBits</a>. <b>ICM:</b> No color management is performed when blits occur.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-bitblt#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.DeleteObject(Windows.Win32.Graphics.Gdi.HGDIOBJ)">
            <summary>The DeleteObject function deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object. After the object is deleted, the specified handle is no longer valid.</summary>
            <param name="ho">A handle to a logical pen, brush, font, bitmap, region, or palette.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the specified handle is not valid or is currently selected into a DC, the return value is zero.</para>
            </returns>
            <remarks>
            <para>Do not delete a drawing object (pen or brush) while it is still selected into a DC. When a pattern brush is deleted, the bitmap associated with the brush is not deleted. The bitmap must be deleted independently.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-deleteobject#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.CombineRgn(Windows.Win32.Graphics.Gdi.HRGN,Windows.Win32.Graphics.Gdi.HRGN,Windows.Win32.Graphics.Gdi.HRGN,Windows.Win32.Graphics.Gdi.RGN_COMBINE_MODE)">
            <summary>The CombineRgn function combines two regions and stores the result in a third region. The two regions are combined according to the specified mode.</summary>
            <param name="hrgnDst">A handle to a new region with dimensions defined by combining two other regions. (This region must exist before <b>CombineRgn</b> is called.)</param>
            <param name="hrgnSrc1">A handle to the first of two regions to be combined.</param>
            <param name="hrgnSrc2">A handle to the second of two regions to be combined.</param>
            <param name="iMode"></param>
            <returns>
            <para>The return value specifies the type of the resulting region. It can be one of the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>The three regions need not be distinct. For example, the <i>hrgnSrc1</i> parameter can equal the <i>hrgnDest</i> parameter.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.CreateBitmap(System.Int32,System.Int32,System.UInt32,System.UInt32,System.Void*)">
            <summary>The CreateBitmap function creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel).</summary>
            <param name="nWidth">The bitmap width, in pixels.</param>
            <param name="nHeight">The bitmap height, in pixels.</param>
            <param name="nPlanes">The number of color planes used by the device.</param>
            <param name="nBitCount">The number of bits required to identify the color of a single pixel.</param>
            <param name="lpBits">
            <para>A pointer to an array of color data used to set the colors in a rectangle of pixels. Each scan line in the rectangle must be word aligned (scan lines that are not word aligned must be padded with zeros). The buffer size expected, *cj*, can be calculated using the formula: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-createbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to a bitmap. If the function fails, the return value is <b>NULL</b>. This function can return the following value. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>The <b>CreateBitmap</b> function creates a device-dependent bitmap. After a bitmap is created, it can be selected into a device context by calling the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-selectobject">SelectObject</a> function. However, the bitmap can only be selected into a device context if the bitmap and the DC have the same format. The <b>CreateBitmap</b> function can be used to create color bitmaps. However, for performance reasons applications should use <b>CreateBitmap</b> to create monochrome bitmaps and <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-createcompatiblebitmap">CreateCompatibleBitmap</a> to create color bitmaps. Whenever a color bitmap returned from <b>CreateBitmap</b> is selected into a device context, the system checks that the bitmap matches the format of the device context it is being selected into. Because <b>CreateCompatibleBitmap</b> takes a device context, it returns a bitmap that has the same format as the specified device context. Thus, subsequent calls to <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-selectobject">SelectObject</a> are faster with a color bitmap from <b>CreateCompatibleBitmap</b> than with a color bitmap returned from <b>CreateBitmap</b>. If the bitmap is monochrome, zeros represent the foreground color and ones represent the background color for the destination device context. If an application sets the <i>nWidth</i> or <i>nHeight</i> parameters to zero, <b>CreateBitmap</b> returns the handle to a 1-by-1 pixel, monochrome bitmap. When you no longer need the bitmap, call the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-deleteobject">DeleteObject</a> function to delete it.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-createbitmap#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.CreateCompatibleBitmap(Windows.Win32.Graphics.Gdi.HDC,System.Int32,System.Int32)">
            <summary>The CreateCompatibleBitmap function creates a bitmap compatible with the device that is associated with the specified device context.</summary>
            <param name="hdc">A handle to a device context.</param>
            <param name="cx">The bitmap width, in pixels.</param>
            <param name="cy">The bitmap height, in pixels.</param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the compatible bitmap (DDB). If the function fails, the return value is <b>NULL</b>.</para>
            </returns>
            <remarks>
            <para>The color format of the bitmap created by the <b>CreateCompatibleBitmap</b> function matches the color format of the device identified by the <i>hdc</i> parameter. This bitmap can be selected into any memory device context that is compatible with the original device. Because memory device contexts allow both color and monochrome bitmaps, the format of the bitmap returned by the <b>CreateCompatibleBitmap</b> function differs when the specified device context is a memory device context. However, a compatible bitmap that was created for a nonmemory device context always possesses the same color format and uses the same color palette as the specified device context. Note: When a memory device context is created, it initially has a 1-by-1 monochrome bitmap selected into it. If this memory device context is used in <b>CreateCompatibleBitmap</b>, the bitmap that is created is a <i>monochrome</i> bitmap. To create a color bitmap, use the <b>HDC</b> that was used to create the memory device context, as shown in the following code:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-createcompatiblebitmap#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.CreateCompatibleDC(Windows.Win32.Graphics.Gdi.HDC)">
            <summary>The CreateCompatibleDC function creates a memory device context (DC) compatible with the specified device.</summary>
            <param name="hdc">A handle to an existing DC. If this handle is <b>NULL</b>, the function creates a memory DC compatible with the application's current screen.</param>
            <returns>
            <para>If the function succeeds, the return value is the handle to a memory DC. If the function fails, the return value is <b>NULL</b>.</para>
            </returns>
            <remarks>
            <para>A memory DC exists only in memory. When the memory DC is created, its display surface is exactly one monochrome pixel wide and one monochrome pixel high. Before an application can use a memory DC for drawing operations, it must select a bitmap of the correct width and height into the DC. To select a bitmap into a DC, use the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-createcompatiblebitmap">CreateCompatibleBitmap</a> function, specifying the height, width, and color organization required. When a memory DC is created, all attributes are set to normal default values. The memory DC can be used as a normal DC. You can set the attributes; obtain the current settings of its attributes; and select pens, brushes, and regions. The <b>CreateCompatibleDC</b> function can only be used with devices that support raster operations. An application can determine whether a device supports these operations by calling the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-getdevicecaps">GetDeviceCaps</a> function. When you no longer need the memory DC, call the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-deletedc">DeleteDC</a> function. We recommend that you call <b>DeleteDC</b> to delete the DC.  However, you can also call <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-deleteobject">DeleteObject</a> with the HDC to delete the DC. If <i>hdc</i> is <b>NULL</b>, the thread that calls <b>CreateCompatibleDC</b> owns the HDC that is created. When this thread is destroyed, the HDC is no longer valid. Thus, if you create the HDC and pass it to another thread, then exit the first thread, the second thread will not be able to use the HDC. <b>ICM:</b> If the DC that is passed to this function is enabled for Image Color Management (ICM), the DC created by the function is ICM-enabled. The source and destination color spaces are specified in the DC.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-createcompatibledc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.CreateDCW(System.String,System.String,System.String,System.Nullable{Windows.Win32.Graphics.Gdi.DEVMODEW})">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.CreateDCW(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,Windows.Win32.Graphics.Gdi.DEVMODEW*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.CreateDCW(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,Windows.Win32.Graphics.Gdi.DEVMODEW*)">
            <summary>The CreateDC function creates a device context (DC) for a device using the specified name. (Unicode)</summary>
            <param name="pwszDriver">A pointer to a null-terminated character string that specifies either DISPLAY or the name of a specific display device. For printing, we recommend that you pass <b>NULL</b> to <i>lpszDriver</i> because GDI ignores <i>lpszDriver</i> for printer devices.</param>
            <param name="pwszDevice">
            <para>A pointer to a null-terminated character string that specifies the name of the specific output device being used, as shown by the Print Manager (for example, Epson FX-80). It is not the printer model name. The <i>lpszDevice</i> parameter must be used. To obtain valid names for displays, call <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-enumdisplaydevicesw">EnumDisplayDevices</a>. If <i>lpszDriver</i> is DISPLAY or the device name of a specific display device, then <i>lpszDevice</i> must be <b>NULL</b> or that same device name. If <i>lpszDevice</i> is <b>NULL</b>, then a DC is created for the primary display device. If there are multiple monitors on the system, calling <c>CreateDC(TEXT("DISPLAY"),NULL,NULL,NULL)</c> will create a DC covering all the monitors.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-createdcw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pszPort">This parameter is ignored and should be set to <b>NULL</b>. It is provided only for compatibility with 16-bit Windows.</param>
            <param name="pdm">
            <para>A pointer to a <a href="https://docs.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew">DEVMODE</a> structure containing device-specific initialization data for the device driver. The <a href="https://docs.microsoft.com/windows/desktop/printdocs/documentproperties">DocumentProperties</a> function retrieves this structure filled in for a specified device. The <i>pdm</i> parameter must be <b>NULL</b> if the device driver is to use the default initialization (if any) specified by the user. If <i>lpszDriver</i> is DISPLAY, <i>pdm</i> must be <b>NULL</b>; GDI then uses the display device's current <a href="https://docs.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodea">DEVMODE</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-createdcw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is the handle to a DC for the specified device. If the function fails, the return value is <b>NULL</b>.</para>
            </returns>
            <remarks>
            <para>Note that the handle to the DC can only be used by a single thread at any one time. For parameters <i>lpszDriver</i> and <i>lpszDevice</i>, call <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-enumdisplaydevicesw">EnumDisplayDevices</a> to obtain valid names for displays. When you no longer need the DC, call the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-deletedc">DeleteDC</a> function. If <i>lpszDriver</i> or <i>lpszDevice</i> is DISPLAY, the thread that calls <b>CreateDC</b> owns the <b>HDC</b> that is created. When this thread is destroyed, the <b>HDC</b> is no longer valid. Thus, if you create the <b>HDC</b> and pass it to another thread, then exit the first thread, the second thread will not be able to use the <b>HDC</b>. When you call <b>CreateDC</b> to create the <b>HDC</b> for a display device, you must pass to <i>pdm</i> either <b>NULL</b> or a pointer to <a href="https://docs.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew">DEVMODE</a> that matches the current <b>DEVMODE</b> of the display device that <i>lpszDevice</i> specifies. We recommend to pass <b>NULL</b> and not to try to exactly match the <b>DEVMODE</b> for the current display device. When you call <b>CreateDC</b> to create the <b>HDC</b> for a printer device, the printer driver validates the <a href="https://docs.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew">DEVMODE</a>. If the printer driver determines that the <b>DEVMODE</b> is invalid (that is, printer driver can’t convert or consume the DEVMODE), the printer driver provides a default <b>DEVMODE</b> to create the HDC for the printer device. <b>ICM:</b> To enable ICM, set the <b>dmICMMethod</b> member of the <a href="https://docs.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew">DEVMODE</a> structure (pointed to by the <i>pInitData</i> parameter) to the appropriate value.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-createdcw#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.CreateDIBSection(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Graphics.Gdi.BITMAPINFO*,Windows.Win32.Graphics.Gdi.DIB_USAGE,System.Void*@,Windows.Win32.Foundation.HANDLE,System.UInt32)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.CreateDIBSection(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Graphics.Gdi.BITMAPINFO*,Windows.Win32.Graphics.Gdi.DIB_USAGE,System.Void**,Windows.Win32.Foundation.HANDLE,System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.CreateDIBSection(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Graphics.Gdi.BITMAPINFO*,Windows.Win32.Graphics.Gdi.DIB_USAGE,System.Void**,Windows.Win32.Foundation.HANDLE,System.UInt32)">
            <summary>The CreateDIBSection function creates a DIB that applications can write to directly.</summary>
            <param name="hdc">A handle to a device context. If the value of <i>iUsage</i> is DIB_PAL_COLORS, the function uses this device context's logical palette to initialize the DIB colors.</param>
            <param name="pbmi">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-bitmapinfo">BITMAPINFO</a> structure that specifies various attributes of the DIB, including the bitmap dimensions and colors.</param>
            <param name="usage">
            <para>The type of data contained in the <b>bmiColors</b> array member of the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-bitmapinfo">BITMAPINFO</a> structure pointed to by <i>pbmi</i> (either logical palette indexes or literal RGB values). The following values are defined. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-createdibsection#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppvBits">A pointer to a variable that receives a pointer to the location of the DIB bit values.</param>
            <param name="hSection">
            <para>A handle to a file-mapping object that the function will use to create the DIB. This parameter can be <b>NULL</b>. If <i>hSection</i> is not <b>NULL</b>, it must be a handle to a file-mapping object created by calling the <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-createfilemappinga">CreateFileMapping</a> function with the PAGE_READWRITE or PAGE_WRITECOPY flag. Read-only DIB sections are not supported. Handles created by other means will cause <b>CreateDIBSection</b> to fail. If <i>hSection</i> is not <b>NULL</b>, the <b>CreateDIBSection</b> function locates the bitmap bit values at offset <i>dwOffset</i> in the file-mapping object referred to by <i>hSection</i>. An application can later retrieve the <i>hSection</i> handle by calling the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-getobject">GetObject</a> function with the <b>HBITMAP</b> returned by <b>CreateDIBSection</b>. If <i>hSection</i> is <b>NULL</b>, the system allocates memory for the DIB. In this case, the <b>CreateDIBSection</b> function ignores the <i>dwOffset</i> parameter. An application cannot later obtain a handle to this memory. The <b>dshSection</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-dibsection">DIBSECTION</a> structure filled in by calling the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-getobject">GetObject</a> function will be <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-createdibsection#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="offset">The offset from the beginning of the file-mapping object referenced by <i>hSection</i> where storage for the bitmap bit values is to begin. This value is ignored if <i>hSection</i> is <b>NULL</b>. The bitmap bit values are aligned on doubleword boundaries, so <i>dwOffset</i> must be a multiple of the size of a <b>DWORD</b>.</param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the newly created DIB, and *<i>ppvBits</i> points to the bitmap bit values. If the function fails, the return value is <b>NULL</b>, and *<i>ppvBits</i> is <b>NULL</b>. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> can return the following value: </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>As noted above, if <i>hSection</i> is <b>NULL</b>, the system allocates memory for the DIB. The system closes the handle to that memory when you later delete the DIB by calling the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-deleteobject">DeleteObject</a> function. If <i>hSection</i> is not <b>NULL</b>, you must close the <i>hSection</i> memory handle yourself after calling <b>DeleteObject</b> to delete the bitmap. You cannot paste a DIB section from one application into another application. <b>CreateDIBSection</b> does not use the <a href="https://docs.microsoft.com/windows/win32/api/wingdi/ns-wingdi-bitmapinfoheader">BITMAPINFOHEADER</a> parameters <i>biXPelsPerMeter</i> or <i>biYPelsPerMeter</i> and will not provide resolution information in the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-bitmapinfo">BITMAPINFO</a> structure. You need to guarantee that the GDI subsystem has completed any drawing to a bitmap created by <b>CreateDIBSection</b> before you draw to the bitmap yourself. Access to the bitmap must be synchronized. Do this by calling the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-gdiflush">GdiFlush</a> function. This applies to any use of the pointer to the bitmap bit values, including passing the pointer in calls to functions such as <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-setdibits">SetDIBits</a>. <b>ICM:</b> No color management is done.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-createdibsection#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.CreateFontIndirect(Windows.Win32.Graphics.Gdi.LOGFONTW@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.CreateFontIndirect(Windows.Win32.Graphics.Gdi.LOGFONTW*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.CreateFontIndirect(Windows.Win32.Graphics.Gdi.LOGFONTW*)">
            <summary>The CreateFontIndirect function creates a logical font that has the specified characteristics. The font can subsequently be selected as the current font for any device context. (Unicode)</summary>
            <param name="lplf">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-logfonta">LOGFONT</a> structure that defines the characteristics of the logical font.</param>
            <returns>
            <para>If the function succeeds, the return value is a handle to a logical font. If the function fails, the return value is <b>NULL</b>.</para>
            </returns>
            <remarks>
            <para>The <b>CreateFontIndirect</b> function creates a logical font with the characteristics specified in the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-logfonta">LOGFONT</a> structure. When this font is selected by using the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-selectobject">SelectObject</a> function, GDI's font mapper attempts to match the logical font with an existing physical font. If it fails to find an exact match, it provides an alternative whose characteristics match as many of the requested characteristics as possible. To get the appropriate font on different language versions of the OS, call <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-enumfontfamiliesexa">EnumFontFamiliesEx</a> with the desired font characteristics in the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-logfonta">LOGFONT</a> structure, retrieve the appropriate typeface name, and create the font using <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-createfonta">CreateFont</a> or <b>CreateFontIndirect</b>. When you no longer need the font, call the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-deleteobject">DeleteObject</a> function to delete it. The fonts for many East Asian languages have two typeface names: an English name and a localized name. <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-createfonta">CreateFont</a> and <b>CreateFontIndirect</b> take the localized typeface name only on a system locale that matches the language, while they take the English typeface name on all other system locales. The best method is to try one name and, on failure, try the other. Note that <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-enumfontsa">EnumFonts</a>, <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-enumfontfamiliesa">EnumFontFamilies</a>, and <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-enumfontfamiliesexa">EnumFontFamiliesEx</a> return the English typeface name if the system locale does not match the language of the font. The font mapper for <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-createfonta">CreateFont</a>, <b>CreateFontIndirect</b>, and <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-createfontindirectexa">CreateFontIndirectEx</a> recognizes both the English and the localized typeface name, regardless of locale.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-createfontindirectw#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.CreateICW(System.String,System.String,System.String,System.Nullable{Windows.Win32.Graphics.Gdi.DEVMODEW})">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.CreateICW(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,Windows.Win32.Graphics.Gdi.DEVMODEW*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.CreateICW(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,Windows.Win32.Graphics.Gdi.DEVMODEW*)">
            <summary>The CreateIC function creates an information context for the specified device. (Unicode)</summary>
            <param name="pszDriver">A pointer to a null-terminated character string that specifies the name of the device driver (for example, Epson).</param>
            <param name="pszDevice">A pointer to a null-terminated character string that specifies the name of the specific output device being used, as shown by the Print Manager (for example, Epson FX-80). It is not the printer model name. The <i>lpszDevice</i> parameter must be used.</param>
            <param name="pszPort">This parameter is ignored and should be set to <b>NULL</b>. It is provided only for compatibility with 16-bit Windows.</param>
            <param name="pdm">A pointer to a <a href="https://docs.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodea">DEVMODE</a> structure containing device-specific initialization data for the device driver. The <a href="https://docs.microsoft.com/windows/desktop/printdocs/documentproperties">DocumentProperties</a> function retrieves this structure filled in for a specified device. The <i>lpdvmInit</i> parameter must be <b>NULL</b> if the device driver is to use the default initialization (if any) specified by the user.</param>
            <returns>
            <para>If the function succeeds, the return value is the handle to an information context. If the function fails, the return value is <b>NULL</b>.</para>
            </returns>
            <remarks>
            <para>When you no longer need the information DC, call the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-deletedc">DeleteDC</a> function.</para>
            <para>> [!NOTE] > The wingdi.h header defines CreateIC as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-createicw#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.CreateRectRgn(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The CreateRectRgn function creates a rectangular region.</summary>
            <param name="x1">Specifies the x-coordinate of the upper-left corner of the region in logical units.</param>
            <param name="y1">Specifies the y-coordinate of the upper-left corner of the region in logical units.</param>
            <param name="x2">Specifies the x-coordinate of the lower-right corner of the region in logical units.</param>
            <param name="y2">Specifies the y-coordinate of the lower-right corner of the region in logical units.</param>
            <returns>
            <para>If the function succeeds, the return value is the handle to the region. If the function fails, the return value is <b>NULL</b>.</para>
            </returns>
            <remarks>
            <para>When you no longer need the <b>HRGN</b> object, call the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-deleteobject">DeleteObject</a> function to delete it. Region coordinates are represented as 27-bit signed integers. Regions created by the Create&lt;shape&gt;Rgn methods (such as <b>CreateRectRgn</b> and <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-createpolygonrgn">CreatePolygonRgn</a>) only include the interior of the shape; the shape's outline is excluded from the region. This means that any point on a line between two sequential vertices is not included in the region. If you were to call <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-ptinregion">PtInRegion</a> for such a point, it would return zero as the result.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-createrectrgn#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.DeleteDC(Windows.Win32.Graphics.Gdi.HDC)">
            <summary>The DeleteDC function deletes the specified device context (DC).</summary>
            <param name="hdc">A handle to the device context.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
            </returns>
            <remarks>An application must not delete a DC whose handle was obtained by calling the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getdc">GetDC</a> function. Instead, it must call the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-releasedc">ReleaseDC</a> function to free the DC.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.DeleteEnhMetaFile(Windows.Win32.Graphics.Gdi.HENHMETAFILE)">
            <summary>The DeleteEnhMetaFile function deletes an enhanced-format metafile or an enhanced-format metafile handle.</summary>
            <param name="hmf">A handle to an enhanced metafile.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
            </returns>
            <remarks>If the <i>hemf</i> parameter identifies an enhanced metafile stored in memory, the <b>DeleteEnhMetaFile</b> function deletes the metafile. If <i>hemf</i> identifies a metafile stored on a disk, the function deletes the metafile handle but does not destroy the actual metafile. An application can retrieve the file by calling the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-getenhmetafilea">GetEnhMetaFile</a> function.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetClipRgn(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Graphics.Gdi.HRGN)">
            <summary>The GetClipRgn function retrieves a handle identifying the current application-defined clipping region for the specified device context.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="hrgn">A handle to an existing region before the function is called. After the function returns, this parameter is a handle to a copy of the current clipping region.</param>
            <returns>If the function succeeds and there is no clipping region for the given device context, the return value is zero. If the function succeeds and there is a clipping region for the given device context, the return value is 1. If an error occurs, the return value is -1.</returns>
            <remarks>
            <para>An application-defined clipping region is a clipping region identified by the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-selectcliprgn">SelectClipRgn</a> function. It is not a clipping region created when the application calls the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-beginpaint">BeginPaint</a> function. If the function succeeds, the <i>hrgn</i> parameter is a handle to a copy of the current clipping region. Subsequent changes to this copy will not affect the current clipping region.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-getcliprgn#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetDeviceCaps(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Graphics.Gdi.GET_DEVICE_CAPS_INDEX)">
            <summary>The GetDeviceCaps function retrieves device-specific information for the specified device.</summary>
            <param name="hdc">A handle to the DC.</param>
            <param name="index"></param>
            <returns>
            <para>The return value specifies the value of the desired item. When <i>nIndex</i> is BITSPIXEL and the device has 15bpp or 16bpp, the return value is 16.</para>
            </returns>
            <remarks>
            <para>When <i>nIndex</i> is SHADEBLENDCAPS: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-getdevicecaps#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetObject(Windows.Win32.Graphics.Gdi.HGDIOBJ,System.Int32,System.Void*)">
            <summary>The GetObjectW (Unicode) function (wingdi.h) retrieves information for the specified graphics object.</summary>
            <returns>
            <para>If the function succeeds, and <i>lpvObject</i> is a valid pointer, the return value is the number of bytes stored into the buffer. If the function succeeds, and <i>lpvObject</i> is <b>NULL</b>, the return value is the number of bytes required to hold the information the function would store into the buffer. If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The buffer pointed to by the <i>lpvObject</i> parameter must be sufficiently large to receive the information about the graphics object. Depending on the graphics object, the function uses a <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-bitmap">BITMAP</a>, <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-dibsection">DIBSECTION</a>, <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-extlogpen">EXTLOGPEN</a>, <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-logbrush">LOGBRUSH</a>, <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-logfonta">LOGFONT</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-logpen">LOGPEN</a> structure, or a count of table entries (for a logical palette). If <i>hgdiobj</i> is a handle to a bitmap created by calling <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-createdibsection">CreateDIBSection</a>, and the specified buffer is large enough, the <b>GetObject</b> function returns a <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-dibsection">DIBSECTION</a> structure. In addition, the <b>bmBits</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-bitmap">BITMAP</a> structure contained within the <b>DIBSECTION</b> will contain a pointer to the bitmap's bit values. If <i>hgdiobj</i> is a handle to a bitmap created by any other means, <b>GetObject</b> returns only the width, height, and color format information of the bitmap. You can obtain the bitmap's bit values by calling the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-getdibits">GetDIBits</a> or <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-getbitmapbits">GetBitmapBits</a> function. If <i>hgdiobj</i> is a handle to a logical palette, <b>GetObject</b> retrieves a 2-byte integer that specifies the number of entries in the palette. The function does not retrieve the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-logpalette">LOGPALETTE</a> structure defining the palette. To retrieve information about palette entries, an application can call the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-getpaletteentries">GetPaletteEntries</a> function. If <i>hgdiobj</i> is a handle to a font, the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-logfonta">LOGFONT</a> that is returned is the <b>LOGFONT</b> used to create the font. If Windows had to make some interpolation of the font because the precise <b>LOGFONT</b> could not be represented, the interpolation will not be reflected in the <b>LOGFONT</b>. For example, if you ask for a vertical version of a font that doesn't support vertical painting, the <b>LOGFONT</b> indicates the font is vertical, but Windows will paint it horizontally.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-getobjectw#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetObjectType(Windows.Win32.Graphics.Gdi.HGDIOBJ)">
            <summary>The GetObjectType retrieves the type of the specified object.</summary>
            <param name="h">A handle to the graphics object.</param>
            <returns>
            <para>If the function succeeds, the return value identifies the object. This value can be one of the following. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-getobjecttype">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetPaletteEntries(Windows.Win32.Graphics.Gdi.HPALETTE,System.UInt32,System.Span{Windows.Win32.Graphics.Gdi.PALETTEENTRY})">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GetPaletteEntries(Windows.Win32.Graphics.Gdi.HPALETTE,System.UInt32,System.UInt32,Windows.Win32.Graphics.Gdi.PALETTEENTRY*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetPaletteEntries(Windows.Win32.Graphics.Gdi.HPALETTE,System.UInt32,System.UInt32,Windows.Win32.Graphics.Gdi.PALETTEENTRY*)">
            <summary>The GetPaletteEntries function retrieves a specified range of palette entries from the given logical palette.</summary>
            <param name="hpal">A handle to the logical palette.</param>
            <param name="iStart">The first entry in the logical palette to be retrieved.</param>
            <param name="cEntries">The number of entries in the logical palette to be retrieved.</param>
            <param name="pPalEntries">A pointer to an array of <a href="https://docs.microsoft.com/previous-versions/dd162769(v=vs.85)">PALETTEENTRY</a> structures to receive the palette entries. The array must contain at least as many structures as specified by the <i>nEntries</i> parameter.</param>
            <returns>
            <para>If the function succeeds and the handle to the logical palette is a valid pointer (not <b>NULL</b>), the return value is the number of entries retrieved from the logical palette. If the function succeeds and handle to the logical palette is <b>NULL</b>, the return value is the number of entries in the given palette. If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>An application can determine whether a device supports palette operations by calling the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-getdevicecaps">GetDeviceCaps</a> function and specifying the RASTERCAPS constant. If the <i>nEntries</i> parameter specifies more entries than exist in the palette, the remaining members of the <a href="https://docs.microsoft.com/previous-versions/dd162769(v=vs.85)">PALETTEENTRY</a> structure are not altered.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-getpaletteentries#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetRegionData(Windows.Win32.Graphics.Gdi.HRGN,System.UInt32,Windows.Win32.Graphics.Gdi.RGNDATA*)">
            <summary>The GetRegionData function fills the specified buffer with data describing a region. This data includes the dimensions of the rectangles that make up the region.</summary>
            <param name="hrgn">A handle to the region.</param>
            <param name="nCount">The size, in bytes, of the <i>lpRgnData</i> buffer.</param>
            <param name="lpRgnData">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-rgndata">RGNDATA</a> structure that receives the information. The dimensions of the region are in logical units. If this parameter is <b>NULL</b>, the return value contains the number of bytes needed for the region data.</param>
            <returns>
            <para>If the function succeeds and <i>dwCount</i> specifies an adequate number of bytes, the return value is always <i>dwCount</i>. If <i>dwCount</i> is too small or the function fails, the return value is 0. If <i>lpRgnData</i> is <b>NULL</b>, the return value is the required number of bytes. If the function fails, the return value is zero.</para>
            </returns>
            <remarks>The <b>GetRegionData</b> function is used in conjunction with the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-extcreateregion">ExtCreateRegion</a> function.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetStockObject(Windows.Win32.Graphics.Gdi.GET_STOCK_OBJECT_FLAGS)">
            <summary>The GetStockObject function retrieves a handle to one of the stock pens, brushes, fonts, or palettes.</summary>
            <param name="i"></param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the requested logical object. If the function fails, the return value is <b>NULL</b>.</para>
            </returns>
            <remarks>
            <para>It is not recommended that you employ this method to obtain the current font used by dialogs and windows. Instead, use the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-systemparametersinfoa">SystemParametersInfo</a> function with the SPI_GETNONCLIENTMETRICS parameter to retrieve the current font. <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-systemparametersinfoa">SystemParametersInfo</a> will take into account the current theme and provides font information for captions, menus, and message dialogs. Use the DKGRAY_BRUSH, GRAY_BRUSH, and LTGRAY_BRUSH stock objects only in windows with the CS_HREDRAW and CS_VREDRAW styles. Using a gray stock brush in any other style of window can lead to misalignment of brush patterns after a window is moved or sized. The origins of stock brushes cannot be adjusted. The HOLLOW_BRUSH and NULL_BRUSH stock objects are equivalent. It is not necessary (but it is not harmful) to delete stock objects by calling <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-deleteobject">DeleteObject</a>. Both DC_BRUSH and DC_PEN can be used interchangeably with other stock objects like BLACK_BRUSH and BLACK_PEN. For information on retrieving the current pen or brush color, see <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-getdcbrushcolor">GetDCBrushColor</a> and <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-getdcpencolor">GetDCPenColor</a>. See <a href="https://docs.microsoft.com/windows/desktop/gdi/setting-the-pen-or-brush-color">Setting the Pen or Brush Color</a> for an example of setting colors. The <b>GetStockObject</b> function with an argument of DC_BRUSH or DC_PEN can be used interchangeably with the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-setdcpencolor">SetDCPenColor</a> and <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-setdcbrushcolor">SetDCBrushColor</a> functions.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-getstockobject#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetViewportExtEx(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Foundation.SIZE@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GetViewportExtEx(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Foundation.SIZE*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetViewportExtEx(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Foundation.SIZE*)">
            <summary>The GetViewportExtEx function retrieves the x-extent and y-extent of the current viewport for the specified device context.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lpsize">A pointer to a <a href="https://docs.microsoft.com/windows/win32/api/windef/ns-windef-size">SIZE</a> structure that receives the x- and y-extents, in device units.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-getviewportextex">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetViewportOrgEx(Windows.Win32.Graphics.Gdi.HDC,System.Drawing.Point@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GetViewportOrgEx(Windows.Win32.Graphics.Gdi.HDC,System.Drawing.Point*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetViewportOrgEx(Windows.Win32.Graphics.Gdi.HDC,System.Drawing.Point*)">
            <summary>The GetViewportOrgEx function retrieves the x-coordinates and y-coordinates of the viewport origin for the specified device context.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lppoint">A pointer to a <a href="https://docs.microsoft.com/windows/win32/api/windef/ns-windef-point">POINT</a> structure that receives the coordinates of the origin, in device units.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-getviewportorgex">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.IntersectClipRect(Windows.Win32.Graphics.Gdi.HDC,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The IntersectClipRect function creates a new clipping region from the intersection of the current clipping region and the specified rectangle.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="left">The x-coordinate, in logical units, of the upper-left corner of the rectangle.</param>
            <param name="top">The y-coordinate, in logical units, of the upper-left corner of the rectangle.</param>
            <param name="right">The x-coordinate, in logical units, of the lower-right corner of the rectangle.</param>
            <param name="bottom">The y-coordinate, in logical units, of the lower-right corner of the rectangle.</param>
            <returns>
            <para>The return value specifies the new clipping region's type and can be one of the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>The lower and right-most edges of the given rectangle are excluded from the clipping region. If a clipping region does not already exist then the system may apply a default clipping region to the specified HDC. A clipping region is then created from the intersection of that default clipping region and the rectangle specified in the function parameters.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-intersectcliprect#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.OffsetViewportOrgEx(Windows.Win32.Graphics.Gdi.HDC,System.Int32,System.Int32,System.Drawing.Point*)">
            <summary>The OffsetViewportOrgEx function modifies the viewport origin for a device context using the specified horizontal and vertical offsets.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="x">The horizontal offset, in device units.</param>
            <param name="y">The vertical offset, in device units.</param>
            <param name="lppt">A pointer to a <a href="https://docs.microsoft.com/windows/win32/api/windef/ns-windef-point">POINT</a> structure. The previous viewport origin, in device units, is placed in this structure. If <i>lpPoint</i> is <b>NULL</b>, the previous viewport origin is not returned.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
            </returns>
            <remarks>The new origin is the sum of the current origin and the horizontal and vertical offsets.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.DeleteMetaFile(Windows.Win32.Graphics.Gdi.HMETAFILE)">
            <summary>The DeleteMetaFile function deletes a Windows-format metafile or Windows-format metafile handle.</summary>
            <param name="hmf">A handle to a Windows-format metafile.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
            </returns>
            <remarks>If the metafile identified by the <i>hmf</i> parameter is stored in memory (rather than on a disk), its content is lost when it is deleted by using the <b>DeleteMetaFile</b> function.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.RestoreDC(Windows.Win32.Graphics.Gdi.HDC,System.Int32)">
            <summary>The RestoreDC function restores a device context (DC) to the specified state. The DC is restored by popping state information off a stack created by earlier calls to the SaveDC function.</summary>
            <param name="hdc">A handle to the DC.</param>
            <param name="nSavedDC">The saved state to be restored. If this parameter is positive, <i>nSavedDC</i> represents a specific instance of the state to be restored. If this parameter is negative, <i>nSavedDC</i> represents an instance relative to the current state. For example, -1 restores the most recently saved state.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
            </returns>
            <remarks>Each DC maintains a stack of saved states. The <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-savedc">SaveDC</a> function pushes the current state of the DC onto its stack of saved states. That state can be restored only to the same DC from which it was created. After a state is restored, the saved state is destroyed and cannot be reused. Furthermore, any states saved after the restored state was created are also destroyed and cannot be used. In other words, the <b>RestoreDC</b> function pops the restored state (and any subsequent states) from the state information stack.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SaveDC(Windows.Win32.Graphics.Gdi.HDC)">
            <summary>The SaveDC function saves the current state of the specified device context (DC) by copying data describing selected objects and graphic modes (such as the bitmap, brush, palette, font, pen, region, drawing mode, and mapping mode) to a context stack.</summary>
            <param name="hdc">A handle to the DC whose state is to be saved.</param>
            <returns>
            <para>If the function succeeds, the return value identifies the saved state. If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The <b>SaveDC</b> function can be used any number of times to save any number of instances of the DC state. A saved state can be restored by using the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-restoredc">RestoreDC</a> function.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-savedc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SelectClipRgn(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Graphics.Gdi.HRGN)">
            <summary>The SelectClipRgn function selects a region as the current clipping region for the specified device context.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="hrgn">A handle to the region to be selected.</param>
            <returns>
            <para>The return value specifies the region's complexity and can be one of the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>Only a copy of the selected region is used. The region itself can be selected for any number of other device contexts or it can be deleted. The <b>SelectClipRgn</b> function assumes that the coordinates for a region are specified in device units. To remove a device-context's clipping region, specify a <b>NULL</b> region handle.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-selectcliprgn#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SelectObject(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Graphics.Gdi.HGDIOBJ)">
            <summary>The SelectObject function selects an object into the specified device context (DC). The new object replaces the previous object of the same type.</summary>
            <param name="hdc">A handle to the DC.</param>
            <param name="h">
            <para>A handle to the object to be selected. The specified object must have been created by using one of the following functions. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-selectobject#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the selected object is not a region and the function succeeds, the return value is a handle to the object being replaced. If the selected object is a region and the function succeeds, the return value is one of the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>This function returns the previously selected object of the specified type. An application should always replace a new object with the original, default object after it has finished drawing with the new object. An application cannot select a single bitmap into more than one DC at a time. <b>ICM:</b> If the object being selected is a brush or a pen, color management is performed.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-selectobject#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GdipBitmapLockBits(Windows.Win32.Graphics.GdiPlus.GpBitmap@,Windows.Win32.Graphics.GdiPlus.Rect@,System.UInt32,System.Int32,Windows.Win32.Graphics.GdiPlus.BitmapData@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GdipBitmapLockBits(Windows.Win32.Graphics.GdiPlus.GpBitmap*,Windows.Win32.Graphics.GdiPlus.Rect*,System.UInt32,System.Int32,Windows.Win32.Graphics.GdiPlus.BitmapData*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GdipBitmapUnlockBits(Windows.Win32.Graphics.GdiPlus.GpBitmap@,Windows.Win32.Graphics.GdiPlus.BitmapData@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GdipBitmapUnlockBits(Windows.Win32.Graphics.GdiPlus.GpBitmap*,Windows.Win32.Graphics.GdiPlus.BitmapData*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GdipCreateFromHWND(Windows.Win32.Foundation.HWND,Windows.Win32.Graphics.GdiPlus.GpGraphics*@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GdipCreateFromHWND(Windows.Win32.Foundation.HWND,Windows.Win32.Graphics.GdiPlus.GpGraphics**)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GdipDeleteGraphics(Windows.Win32.Graphics.GdiPlus.GpGraphics@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GdipDeleteGraphics(Windows.Win32.Graphics.GdiPlus.GpGraphics*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GdipCreateHBITMAPFromBitmap(Windows.Win32.Graphics.GdiPlus.GpBitmap@,Windows.Win32.Graphics.Gdi.HBITMAP@,System.UInt32)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GdipCreateHBITMAPFromBitmap(Windows.Win32.Graphics.GdiPlus.GpBitmap*,Windows.Win32.Graphics.Gdi.HBITMAP*,System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GdipGetHemfFromMetafile(Windows.Win32.Graphics.GdiPlus.GpMetafile@,Windows.Win32.Graphics.Gdi.HENHMETAFILE@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GdipGetHemfFromMetafile(Windows.Win32.Graphics.GdiPlus.GpMetafile*,Windows.Win32.Graphics.Gdi.HENHMETAFILE*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GdipGetImageBounds(Windows.Win32.Graphics.GdiPlus.GpImage@,Windows.Win32.Graphics.GdiPlus.RectF@,Windows.Win32.Graphics.GdiPlus.Unit@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GdipGetImageBounds(Windows.Win32.Graphics.GdiPlus.GpImage*,Windows.Win32.Graphics.GdiPlus.RectF*,Windows.Win32.Graphics.GdiPlus.Unit*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GdipGetImageEncoders(System.UInt32,System.UInt32,Windows.Win32.Graphics.GdiPlus.ImageCodecInfo@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GdipGetImageEncoders(System.UInt32,System.UInt32,Windows.Win32.Graphics.GdiPlus.ImageCodecInfo*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GdipGetImageEncodersSize(System.UInt32@,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GdipGetImageEncodersSize(System.UInt32*,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GdipGetImagePixelFormat(Windows.Win32.Graphics.GdiPlus.GpImage@,System.Int32@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GdipGetImagePixelFormat(Windows.Win32.Graphics.GdiPlus.GpImage*,System.Int32*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GdipGetImageRawFormat(Windows.Win32.Graphics.GdiPlus.GpImage@,System.Guid@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GdipGetImageRawFormat(Windows.Win32.Graphics.GdiPlus.GpImage*,System.Guid*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GdipGetRegionHRgn(Windows.Win32.Graphics.GdiPlus.GpRegion@,Windows.Win32.Graphics.GdiPlus.GpGraphics@,Windows.Win32.Graphics.Gdi.HRGN@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GdipGetRegionHRgn(Windows.Win32.Graphics.GdiPlus.GpRegion*,Windows.Win32.Graphics.GdiPlus.GpGraphics*,Windows.Win32.Graphics.Gdi.HRGN*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GdipIsInfiniteRegion(Windows.Win32.Graphics.GdiPlus.GpRegion@,Windows.Win32.Graphics.GdiPlus.GpGraphics@,Windows.Win32.Foundation.BOOL@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GdipIsInfiniteRegion(Windows.Win32.Graphics.GdiPlus.GpRegion*,Windows.Win32.Graphics.GdiPlus.GpGraphics*,Windows.Win32.Foundation.BOOL*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GdiplusStartup(System.UIntPtr@,Windows.Win32.Graphics.GdiPlus.GdiplusStartupInput@,Windows.Win32.Graphics.GdiPlus.GdiplusStartupOutput@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GdiplusStartup(System.UIntPtr*,Windows.Win32.Graphics.GdiPlus.GdiplusStartupInput*,Windows.Win32.Graphics.GdiPlus.GdiplusStartupOutput*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GdipSaveImageToStream(Windows.Win32.Graphics.GdiPlus.GpImage@,Windows.Win32.System.Com.IStream*,System.Guid@,Windows.Win32.Graphics.GdiPlus.EncoderParameters*)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GdipSaveImageToStream(Windows.Win32.Graphics.GdiPlus.GpImage*,Windows.Win32.System.Com.IStream*,System.Guid*,Windows.Win32.Graphics.GdiPlus.EncoderParameters*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.CloseHandle(Windows.Win32.Foundation.HANDLE)">
            <summary>Closes an open object handle.</summary>
            <param name="hObject">A valid handle to an open object.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If the application is running under a debugger,  the function will throw an exception if it receives either a  handle value that is not valid  or a pseudo-handle value. This can happen if you close a handle twice, or if you  call <b>CloseHandle</b> on a handle returned by the <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-findfirstfilea">FindFirstFile</a> function instead of calling the <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-findclose">FindClose</a> function.</para>
            </returns>
            <remarks>
            <para>The <b>CloseHandle</b> function closes handles to the following objects: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/handleapi/nf-handleapi-closehandle#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetSystemDefaultLCID">
            <summary>Returns the locale identifier for the system locale.Note  Any application that runs only on Windows Vista and later should use GetSystemDefaultLocaleName in preference to this function.</summary>
            <returns>Returns the locale identifier for the system default locale, identified by <a href="https://docs.microsoft.com/windows/desktop/Intl/locale-system-default">LOCALE_SYSTEM_DEFAULT</a>.</returns>
            <remarks>This function can retrieve data from <a href="https://docs.microsoft.com/windows/desktop/Intl/custom-locales">custom locales</a>. Data is not guaranteed to be the same from computer to computer or between runs of an application. If your application must persist or transmit data, see <a href="https://docs.microsoft.com/windows/desktop/Intl/using-persistent-locale-data">Using Persistent Locale Data</a>.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetThreadLocale">
            <summary>Returns the locale identifier of the current locale for the calling thread.Note  This function can retrieve data that changes between releases, for example, due to a custom locale.</summary>
            <returns>
            <para>Returns the <a href="https://docs.microsoft.com/windows/desktop/Intl/locale-identifiers">locale identifier</a> of the locale associated with the current thread. <b>Windows Vista</b>: This function can return the identifier of a <a href="https://docs.microsoft.com/windows/desktop/Intl/custom-locales">custom locale</a>. If the current thread locale is a custom locale, the function returns <a href="https://docs.microsoft.com/windows/desktop/Intl/locale-custom-constants">LOCALE_CUSTOM_DEFAULT</a>. If the current thread locale is a supplemental custom locale, the function can return <a href="https://docs.microsoft.com/windows/desktop/Intl/locale-custom-constants">LOCALE_CUSTOM_UNSPECIFIED</a>. All supplemental locales share this locale identifier.</para>
            </returns>
            <remarks>
            <para>When an application process launches, it uses the Standards and Formats variable for the locale. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Intl/nls-terminology">NLS Terminology</a>. When a new thread is created in a process, it inherits the locale of the creating thread. This locale can be either the default Standards and Formats locale or a different locale set for the creating thread in a call to <a href="https://docs.microsoft.com/windows/desktop/api/winnls/nf-winnls-setthreadlocale">SetThreadLocale</a>. <b>GetThreadLocale</b> and <b>SetThreadLocale</b> can be used to modify the locale of the new thread.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winnls/nf-winnls-getthreadlocale#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GlobalFree(Windows.Win32.Foundation.HGLOBAL)">
            <summary>Frees the specified global memory object and invalidates its handle.</summary>
            <param name="hMem">
            <para>A handle to the global memory object. This handle is returned by either the <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-globalalloc">GlobalAlloc</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-globalrealloc">GlobalReAlloc</a> function. It is not safe to free memory allocated with <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-localalloc">LocalAlloc</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-globalfree#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <b>NULL</b>. If the function fails, the return value is equal to a handle to the global memory object. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para>If the process examines or modifies the memory after it has been freed, heap corruption may occur or an access violation exception (EXCEPTION_ACCESS_VIOLATION) may be generated. The <b>GlobalFree</b> function will free a locked memory object. A locked memory object has a lock count greater than zero. The <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-globallock">GlobalLock</a> function locks a global memory object and increments the lock count by one. The <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-globalunlock">GlobalUnlock</a> function unlocks it and decrements the lock count by one. To get the lock count of a global memory object, use the <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-globalflags">GlobalFlags</a> function. If an application is running under a debug version of the system, <b>GlobalFree</b> will issue a message that tells you that a locked object is being freed. If you are debugging the application, <b>GlobalFree</b> will enter a breakpoint just before freeing a locked object. This allows you to verify the intended behavior, then continue execution.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-globalfree#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GlobalAlloc(Windows.Win32.System.Memory.GLOBAL_ALLOC_FLAGS,System.UIntPtr)">
            <summary>Allocates the specified number of bytes from the heap. (GlobalAlloc)</summary>
            <param name="uFlags"></param>
            <param name="dwBytes">The number of bytes to allocate. If this parameter is zero and the <i>uFlags</i> parameter specifies <b>GMEM_MOVEABLE</b>, the function returns a handle to a memory object that is marked as discarded.</param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the newly allocated memory object. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para>Windows memory management does not provide a separate local heap and global heap. Therefore, the <b>GlobalAlloc</b> and <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-localalloc">LocalAlloc</a> functions are essentially the same. The movable-memory flags <b>GHND</b> and <b>GMEM_MOVABLE</b> add unnecessary overhead and require locking to be used safely. They should be avoided unless documentation specifically states that they should be used. New applications should use the <a href="https://docs.microsoft.com/windows/desktop/Memory/heap-functions">heap functions</a> to allocate and manage memory unless the documentation specifically states that a global function should be used. For example, the global functions are still used with Dynamic Data Exchange (DDE), the clipboard functions, and OLE data objects. If the <b>GlobalAlloc</b> function succeeds, it allocates at least the amount of memory requested. If the actual amount allocated is greater than the amount requested, the process can use the entire amount. To determine the actual number of bytes allocated, use the <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-globalsize">GlobalSize</a> function. If the heap does not contain sufficient free space to satisfy the request, <b>GlobalAlloc</b> returns <b>NULL</b>. Because <b>NULL</b> is used to indicate an error, virtual address zero is never allocated. It is, therefore, easy to detect the use of a <b>NULL</b> pointer. Memory allocated with this function is guaranteed to be aligned on an 8-byte boundary. To execute dynamically generated code, use the <a href="https://docs.microsoft.com/windows/desktop/api/memoryapi/nf-memoryapi-virtualalloc">VirtualAlloc</a> function to allocate memory and the <a href="https://docs.microsoft.com/windows/desktop/api/memoryapi/nf-memoryapi-virtualprotect">VirtualProtect</a> function to grant  <b>PAGE_EXECUTE</b> access. To free the memory, use the <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-globalfree">GlobalFree</a> function. It is not safe to free memory allocated with <b>GlobalAlloc</b> using <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-localfree">LocalFree</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-globalalloc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GlobalLock(Windows.Win32.Foundation.HGLOBAL)">
            <summary>Locks a global memory object and returns a pointer to the first byte of the object's memory block.</summary>
            <param name="hMem">
            <para>A handle to the global memory object. This handle is returned by either the <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-globalalloc">GlobalAlloc</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-globalrealloc">GlobalReAlloc</a> function.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-globallock#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is a pointer to the first byte of the memory block. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para>The internal data structures for each memory object include a lock count that is initially zero. For movable memory objects, <b>GlobalLock</b> increments the count by one, and the <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-globalunlock">GlobalUnlock</a> function decrements the count by one. Each successful call that a process makes to <b>GlobalLock</b> for an object must be matched by a corresponding call to <b>GlobalUnlock</b>. Locked memory will not be moved or discarded, unless the memory object is reallocated by using the <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-globalrealloc">GlobalReAlloc</a> function. The memory block of a locked memory object remains locked until its lock count is decremented to zero, at which time it can be moved or discarded. Memory objects allocated with <b>GMEM_FIXED</b> always have a lock count of zero. For these objects, the value of the returned pointer is equal to the value of the specified handle. If the specified memory block has been discarded or if the memory block has a zero-byte size, this function returns <b>NULL</b>. Discarded objects always have a lock count of zero.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-globallock#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GlobalReAlloc(Windows.Win32.Foundation.HGLOBAL,System.UIntPtr,System.UInt32)">
            <summary>Changes the size or attributes of a specified global memory object. The size can increase or decrease.</summary>
            <param name="hMem">
            <para>A handle to the global memory object to be reallocated. This handle is returned by either the <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-globalalloc">GlobalAlloc</a> or <b>GlobalReAlloc</b> function.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-globalrealloc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="dwBytes">The new size of the memory block, in bytes. If <i>uFlags</i> specifies <b>GMEM_MODIFY</b>, this parameter is ignored.</param>
            <param name="uFlags">
            <para>The reallocation options. If <b>GMEM_MODIFY</b> is specified, the function modifies the attributes of the memory object only (the <i>dwBytes</i> parameter is ignored.) Otherwise, the function reallocates the memory object. You can optionally combine <b>GMEM_MODIFY</b> with the following value. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-globalrealloc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the reallocated memory object. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para>If <b>GlobalReAlloc</b> reallocates a movable object, the return value is a handle to the memory object. To convert the handle to a pointer, use the <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-globallock">GlobalLock</a> function. If <b>GlobalReAlloc</b> reallocates a fixed object, the value of the handle returned is the address of the first byte of the memory block. To access the memory, a process can simply cast the return value to a pointer. If <b>GlobalReAlloc</b> fails, the original memory is not freed, and the original handle and pointer are still valid.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-globalrealloc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GlobalSize(Windows.Win32.Foundation.HGLOBAL)">
            <summary>Retrieves the current size of the specified global memory object, in bytes.</summary>
            <param name="hMem">
            <para>A handle to the global memory object. This handle is returned by either the <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-globalalloc">GlobalAlloc</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-globalrealloc">GlobalReAlloc</a> function.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-globalsize#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is the size of the specified global memory object, in bytes. If the specified handle is not valid or if the object has been discarded, the return value is zero. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para>The size of a memory block may be larger than the size requested when the memory was allocated. To verify that the specified object's memory block has not been discarded, use the <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-globalflags">GlobalFlags</a> function before calling <b>GlobalSize</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-globalsize#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GlobalUnlock(Windows.Win32.Foundation.HGLOBAL)">
            <summary>Decrements the lock count associated with a memory object that was allocated with GMEM_MOVEABLE.</summary>
            <param name="hMem">
            <para>A handle to the global memory object. This handle is returned by either the <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-globalalloc">GlobalAlloc</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-globalrealloc">GlobalReAlloc</a> function.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-globalunlock#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the memory object is still locked after decrementing the lock count, the return value is a nonzero value. If the memory object is unlocked after decrementing the lock count, the function returns zero and <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> returns <b>NO_ERROR</b>. If the function fails, the return value is zero and <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> returns a value other than <b>NO_ERROR</b>.</para>
            </returns>
            <remarks>
            <para>The internal data structures for each memory object include a lock count that is initially zero. For movable memory objects, the <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-globallock">GlobalLock</a> function increments the count by one, and <b>GlobalUnlock</b> decrements the count by one. For each call that a process makes to <b>GlobalLock</b> for an object, it must eventually call <b>GlobalUnlock</b>. Locked memory will not be moved or discarded, unless the memory object is reallocated by using the <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-globalrealloc">GlobalReAlloc</a> function. The memory block of a locked memory object remains locked until its lock count is decremented to zero, at which time it can be moved or discarded. Memory objects allocated with <b>GMEM_FIXED</b> always have a lock count of zero. If the specified memory block is fixed memory, this function returns <b>TRUE</b>. If the memory object is already unlocked, <b>GlobalUnlock</b> returns <b>FALSE</b> and <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> reports <b>ERROR_NOT_LOCKED</b>. A process should not rely on the return value to determine the number of times it must subsequently call <b>GlobalUnlock</b> for a memory object.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-globalunlock#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.FreeLibrary(Windows.Win32.Foundation.HMODULE)">
            <summary>Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count.</summary>
            <param name="hLibModule">
            <para>A handle to the loaded library module. The <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibrarya">LoadLibrary</a>, <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibraryexa">LoadLibraryEx</a>, <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-getmodulehandlea">GetModuleHandle</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-getmodulehandleexa">GetModuleHandleEx</a> function returns this handle.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/libloaderapi/nf-libloaderapi-freelibrary#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call the <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
            </returns>
            <remarks>
            <para>The system maintains a per-process reference count for each loaded module. A  module that was loaded at process initialization due to load-time dynamic linking has a reference count of one. The reference count for a module is incremented each time the  module is loaded by a call to <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibrarya">LoadLibrary</a>. The reference count is also incremented by a call to <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibraryexa">LoadLibraryEx</a> unless the  module  is being loaded for the first time and is being loaded as   a data or image file. The reference count is decremented each time the <b>FreeLibrary</b> or <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-freelibraryandexitthread">FreeLibraryAndExitThread</a> function is called for the module. When a  module's reference count reaches zero or the process terminates, the system unloads the module from the address space of the  process. Before unloading a library module, the system enables the module to detach from the process by calling the module's <a href="https://docs.microsoft.com/windows/desktop/Dlls/dllmain">DllMain</a> function, if it has one, with the DLL_PROCESS_DETACH value. Doing so gives the library module an opportunity to clean up resources allocated on behalf of the current process. After the entry-point function returns, the library module is removed from the address space of the current process. It is not safe to call <b>FreeLibrary</b> from <a href="https://docs.microsoft.com/windows/desktop/Dlls/dllmain">DllMain</a>. For more information, see the Remarks section in <a href="https://docs.microsoft.com/windows/desktop/Dlls/dllmain">DllMain</a>. Calling <b>FreeLibrary</b> does not affect other processes that are using the same module. Use caution when calling <b>FreeLibrary</b> with a handle returned by <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-getmodulehandlea">GetModuleHandle</a>. The <b>GetModuleHandle</b> function does not increment a module's reference count, so passing this handle to <b>FreeLibrary</b> can cause a module to be unloaded prematurely. A thread that must unload the DLL in which it is executing and then terminate itself should call <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-freelibraryandexitthread">FreeLibraryAndExitThread</a> instead of calling <b>FreeLibrary</b> and <b>ExitThread</b> separately. Otherwise, a race condition can occur. For details, see the Remarks section of <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-freelibraryandexitthread">FreeLibraryAndExitThread</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/libloaderapi/nf-libloaderapi-freelibrary#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.CoCreateInstance``1(System.Guid@,Windows.Win32.System.Com.IUnknown*,Windows.Win32.System.Com.CLSCTX,``0*@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.CoCreateInstance(System.Guid*,Windows.Win32.System.Com.IUnknown*,Windows.Win32.System.Com.CLSCTX,System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.CoCreateInstance(System.Guid@,Windows.Win32.System.Com.IUnknown*,Windows.Win32.System.Com.CLSCTX,System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.CoCreateInstance(System.Guid*,Windows.Win32.System.Com.IUnknown*,Windows.Win32.System.Com.CLSCTX,System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.CoCreateInstance(System.Guid*,Windows.Win32.System.Com.IUnknown*,Windows.Win32.System.Com.CLSCTX,System.Guid*,System.Void**)">
            <summary>Creates a single uninitialized object of the class associated with a specified CLSID.</summary>
            <param name="rclsid">The CLSID associated with the data and code that will be used to create the object.</param>
            <param name="pUnkOuter">If <b>NULL</b>, indicates that the object is not being created as part of an aggregate. If non-<b>NULL</b>, pointer to the aggregate object's <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a> interface (the controlling <b>IUnknown</b>).</param>
            <param name="dwClsContext">Context in which the code that manages the newly created object will run. The values are taken from the enumeration <a href="https://docs.microsoft.com/windows/desktop/api/wtypesbase/ne-wtypesbase-clsctx">CLSCTX</a>.</param>
            <param name="riid">A reference to the identifier of the interface to be used to communicate with the object.</param>
            <param name="ppv">Address of pointer variable that receives the interface pointer requested in <i>riid</i>. Upon successful return, *<i>ppv</i> contains the requested interface pointer. Upon failure, *<i>ppv</i> contains <b>NULL</b>.</param>
            <returns>
            <para>This function can return the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>The <b>CoCreateInstance</b> function provides a convenient shortcut by connecting to the class object associated with the specified CLSID, creating a default-initialized instance, and releasing the class object. As such, it encapsulates the following functionality:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/combaseapi/nf-combaseapi-cocreateinstance#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.PropVariantClear(Windows.Win32.System.Com.StructuredStorage.PROPVARIANT@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.PropVariantClear(Windows.Win32.System.Com.StructuredStorage.PROPVARIANT*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.PropVariantClear(Windows.Win32.System.Com.StructuredStorage.PROPVARIANT*)">
            <summary>Frees all elements that can be freed in a given PROPVARIANT structure.</summary>
            <param name="pvar">
            <para>A pointer to an initialized <a href="https://docs.microsoft.com/windows/desktop/api/propidl/ns-propidl-propvariant">PROPVARIANT</a> structure for which any deallocatable elements are to be freed. On return, all zeroes are written to the <b>PROPVARIANT</b> structure.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/combaseapi/nf-combaseapi-propvariantclear#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>This function returns HRESULT.</returns>
            <remarks>
            <para>At any level of indirection, <b>NULL</b> pointers are ignored. For example, the <i>pvar</i> parameter  points to a <a href="https://docs.microsoft.com/windows/desktop/api/propidl/ns-propidl-propvariant">PROPVARIANT</a> structure of type <b>VT_CF</b>. The  <b>pclipdata</b> member of the <b>PROPVARIANT</b> structure points to a <b>CLIPDATA</b> structure. The <i>pClipData</i> pointer in the <b>CLIPDATA</b> structure is  <b>NULL</b>.  In this example, the <i>pClipData</i> pointer is ignored.  However, the <b>CLIPDATA</b> structure pointed to by the <b>pclipdata</b> member of the <b>PROPVARIANT</b> structure is freed. On return, this function writes zeroes to the specified <a href="https://docs.microsoft.com/windows/desktop/api/propidl/ns-propidl-propvariant">PROPVARIANT</a> structure, so the VT-type is <b>VT_EMPTY</b>. Passing <b>NULL</b> as the <i>pvar</i> parameter produces a return code of S_OK. <div class="alert"><b>Note</b>  Do not use this function to initialize <a href="https://docs.microsoft.com/windows/desktop/api/propidl/ns-propidl-propvariant">PROPVARIANT</a> structures. Instead, initialize these structures using the <a href="https://docs.microsoft.com/windows/desktop/api/propidl/nf-propidl-propvariantinit">PropVariantInit</a> macro (defined in Propidl.h).</div> <div> </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/combaseapi/nf-combaseapi-propvariantclear#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SysFreeString(Windows.Win32.Foundation.BSTR)">
            <summary>Deallocates a string allocated previously by SysAllocString, SysAllocStringByteLen, SysReAllocString, SysAllocStringLen, or SysReAllocStringLen.</summary>
            <param name="bstrString">The previously allocated string. If this parameter is <b>NULL</b>, the function simply returns.</param>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oleauto/nf-oleauto-sysfreestring">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.LoadRegTypeLib(System.Guid@,System.UInt16,System.UInt16,System.UInt32,Windows.Win32.System.Com.ITypeLib**)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.LoadRegTypeLib(System.Guid*,System.UInt16,System.UInt16,System.UInt32,Windows.Win32.System.Com.ITypeLib**)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.LoadRegTypeLib(System.Guid*,System.UInt16,System.UInt16,System.UInt32,Windows.Win32.System.Com.ITypeLib**)">
            <summary>Uses registry information to load a type library.</summary>
            <param name="rguid">The GUID of the library.</param>
            <param name="wVerMajor">The major version of the library.</param>
            <param name="wVerMinor">The minor version of the library.</param>
            <param name="lcid">The national language code of the library.</param>
            <param name="pptlib">The loaded type library.</param>
            <returns>
            <para>This function can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>The function <b>LoadRegTypeLib</b> defers to <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-loadtypelib">LoadTypeLib</a> to load the file.</para>
            <para><b>LoadRegTypeLib</b> compares the requested version numbers against those found in the system registry, and takes one of the following actions:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oleauto/nf-oleauto-loadregtypelib#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.OleCreatePictureIndirect(Windows.Win32.System.Ole.PICTDESC@,System.Guid@,Windows.Win32.Foundation.BOOL,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.OleCreatePictureIndirect(Windows.Win32.System.Ole.PICTDESC*,System.Guid*,Windows.Win32.Foundation.BOOL,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.OleCreatePictureIndirect(Windows.Win32.System.Ole.PICTDESC*,System.Guid*,Windows.Win32.Foundation.BOOL,System.Void**)">
            <summary>Creates a new picture object initialized according to a PICTDESC structure.</summary>
            <param name="lpPictDesc">Pointer to a caller-allocated structure containing the initial state of the picture. The specified structure can be <b>NULL</b> to create an uninitialized object, in the event the picture needs to initialize via <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ipersiststream-load">IPersistStream::Load</a>.</param>
            <param name="riid">Reference to the identifier of the interface describing the type of interface pointer to return in <i>lplpvObj</i>.</param>
            <param name="fOwn">If <b>TRUE</b>, the picture object is to destroy its picture when the object is destroyed. If <b>FALSE</b>, the caller is responsible for destroying the picture.</param>
            <param name="lplpvObj">Address of pointer variable that receives the interface pointer requested in riid. Upon successful return, this parameter contains the requested interface pointer on the newly created object. If the call is successful, the caller is responsible for calling <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a> through this interface pointer when the new object is no longer needed. If the call fails, the value is set to <b>NULL</b>.</param>
            <returns>
            <para>This function returns S_OK on success. Other possible values include the following. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>The <i>fOwn</i> parameter indicates whether the picture is to own the GDI picture handle for the picture it contains, so that the picture object will destroy its picture when the object itself is destroyed. The function returns an interface pointer to the new picture object specified by the caller in the <i>riid</i> parameter. A <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-queryinterface(q)">QueryInterface</a> is built into this call. The caller is responsible for calling <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a> through the interface pointer returned.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SafeArrayCreate(Windows.Win32.System.Variant.VARENUM,System.UInt32,Windows.Win32.System.Com.SAFEARRAYBOUND@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.SafeArrayCreate(Windows.Win32.System.Variant.VARENUM,System.UInt32,Windows.Win32.System.Com.SAFEARRAYBOUND*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SafeArrayCreate(Windows.Win32.System.Variant.VARENUM,System.UInt32,Windows.Win32.System.Com.SAFEARRAYBOUND*)">
            <summary>Creates a new array descriptor, allocates and initializes the data for the array, and returns a pointer to the new array descriptor.</summary>
            <param name="vt">The base type of the array (the VARTYPE of each element of the array). The VARTYPE is restricted to a subset of the variant types. Neither the VT_ARRAY nor the VT_BYREF flag can be set. VT_EMPTY and VT_NULL are not valid base types for the array. All other types are legal.</param>
            <param name="cDims">The number of dimensions in the array. The number cannot be changed after the array is created.</param>
            <param name="rgsabound">A vector of bounds (one for each dimension) to allocate for the array.</param>
            <returns>A safe array descriptor, or null if the array could not be created.</returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oleauto/nf-oleauto-safearraycreate">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SafeArrayCreateEx(Windows.Win32.System.Variant.VARENUM,System.UInt32,Windows.Win32.System.Com.SAFEARRAYBOUND@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.SafeArrayCreateEx(Windows.Win32.System.Variant.VARENUM,System.UInt32,Windows.Win32.System.Com.SAFEARRAYBOUND*,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SafeArrayCreateEx(Windows.Win32.System.Variant.VARENUM,System.UInt32,Windows.Win32.System.Com.SAFEARRAYBOUND*,System.Void*)">
            <summary>Creates and returns a safe array descriptor from the specified VARTYPE, number of dimensions and bounds.</summary>
            <param name="vt">The base type or the VARTYPE of each element of the array. The FADF_RECORD flag can be set for a variant type VT_RECORD, The FADF_HAVEIID flag can be set for VT_DISPATCH or VT_UNKNOWN, and FADF_HAVEVARTYPE can be set for all other VARTYPEs.</param>
            <param name="cDims">The number of dimensions in the array.</param>
            <param name="rgsabound">A vector of bounds (one for each dimension) to allocate for the array.</param>
            <param name="pvExtra">the type information of the user-defined type, if you are creating a safe array of user-defined types. If the vt parameter is VT_RECORD, then <i>pvExtra</i> will be a pointer to an <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-irecordinfo">IRecordInfo</a> describing the record. If the <i>vt</i> parameter is VT_DISPATCH or VT_UNKNOWN, then <i>pvExtra</i> will contain a pointer to a GUID representing the type of interface being passed to the array.</param>
            <returns>A safe array descriptor, or null if the array could not be created.</returns>
            <remarks>If the VARTYPE is VT_RECORD then <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-safearraysetrecordinfo">SafeArraySetRecordInfo</a> is called. If the VARTYPE is VT_DISPATCH or VT_UNKNOWN then the elements of the array must contain interfaces of the same type. Part of the process of marshaling this array to other processes does include generating the proxy/stub code of the IID pointed to by the <i>pvExtra</i> parameter. To actually pass heterogeneous interfaces one will need to specify either IID_IUnknown or IID_IDispatch in <i>pvExtra</i> and provide some other means for the caller to identify how to query for the actual interface.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SafeArrayDestroy(Windows.Win32.System.Com.SAFEARRAY*)">
            <summary>Destroys an existing array descriptor and all of the data in the array.</summary>
            <param name="psa">An array descriptor created by <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-safearraycreate">SafeArrayCreate</a>.</param>
            <returns>
            <para>This function can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>Safe arrays of variant will have the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-variantclear">VariantClear</a> function called on each member and safe arrays of BSTR will have the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-sysfreestring">SysFreeString</a> function called on each element. <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-irecordinfo-recordclear">IRecordInfo::RecordClear</a> will be called to release object references and other values of a record without deallocating the record.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SafeArrayGetElement(Windows.Win32.System.Com.SAFEARRAY*,System.Int32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.SafeArrayGetElement(Windows.Win32.System.Com.SAFEARRAY*,System.Int32*,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SafeArrayGetElement(Windows.Win32.System.Com.SAFEARRAY*,System.Int32*,System.Void*)">
            <summary>Retrieves a single element of the array.</summary>
            <param name="psa">An array descriptor created by <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-safearraycreate">SafeArrayCreate</a>.</param>
            <param name="rgIndices">A vector of indexes for each dimension of the array. The right-most (least significant) dimension is rgIndices[0]. The left-most dimension is stored at <c>rgIndices[psa-&gt;cDims – 1]</c>.</param>
            <param name="pv">The element of the array.</param>
            <returns>
            <para>This function can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>This function calls <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-safearraylock">SafeArrayLock</a> and <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-safearrayunlock">SafeArrayUnlock</a> automatically, before and after retrieving the element. The caller must provide a storage area of the correct size to receive the data. If the data element is a string, object, or variant, the function copies the element in the correct way.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SafeArrayGetRecordInfo(Windows.Win32.System.Com.SAFEARRAY*,Windows.Win32.System.Ole.IRecordInfo**)">
            <summary>Retrieves the IRecordInfo interface of the UDT contained in the specified safe array.</summary>
            <param name="psa">An array descriptor created by <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-safearraycreate">SafeArrayCreate</a>.</param>
            <param name="prinfo">The <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-irecordinfo">IRecordInfo</a> interface.</param>
            <returns>
            <para>This function can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oleauto/nf-oleauto-safearraygetrecordinfo">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SafeArrayGetVartype(Windows.Win32.System.Com.SAFEARRAY*,Windows.Win32.System.Variant.VARENUM@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.SafeArrayGetVartype(Windows.Win32.System.Com.SAFEARRAY*,Windows.Win32.System.Variant.VARENUM*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SafeArrayGetVartype(Windows.Win32.System.Com.SAFEARRAY*,Windows.Win32.System.Variant.VARENUM*)">
            <summary>Gets the VARTYPE stored in the specified safe array.</summary>
            <param name="psa">An array descriptor created by <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-safearraycreate">SafeArrayCreate</a>.</param>
            <param name="pvt">The VARTYPE.</param>
            <returns>
            <para>This function can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>If FADF_HAVEVARTYPE is set, <b>SafeArrayGetVartype</b> returns the VARTYPE stored in the array descriptor. If FADF_RECORD is set, it returns VT_RECORD; if FADF_DISPATCH is set, it returns VT_DISPATCH; and if FADF_UNKNOWN is set, it returns VT_UNKNOWN. <b>SafeArrayGetVartype</b> can fail to return VT_UNKNOWN for SAFEARRAY types that are based on <b>IUnknown</b>. Callers should additionally check whether the SAFEARRAY type's <b>fFeatures</b> field has the FADF_UNKNOWN flag set.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oleauto/nf-oleauto-safearraygetvartype#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SafeArrayLock(Windows.Win32.System.Com.SAFEARRAY*)">
            <summary>Increments the lock count of an array, and places a pointer to the array data in pvData of the array descriptor.</summary>
            <param name="psa">An array descriptor created by <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-safearraycreate">SafeArrayCreate</a>.</param>
            <returns>
            <para>This function can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>The pointer in the array descriptor is valid until the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-safearrayunlock">SafeArrayUnlock</a> function is called. Calls to <b>SafeArrayLock</b> can be nested, in which case an equal number of calls to <b>SafeArrayUnlock</b> are required. An array cannot be deleted while it is locked.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oleauto/nf-oleauto-safearraylock#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SafeArrayPutElement(Windows.Win32.System.Com.SAFEARRAY*,System.Int32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.SafeArrayPutElement(Windows.Win32.System.Com.SAFEARRAY*,System.Int32*,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SafeArrayPutElement(Windows.Win32.System.Com.SAFEARRAY*,System.Int32*,System.Void*)">
            <summary>Stores the data element at the specified location in the array.</summary>
            <param name="psa">An array descriptor created by <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-safearraycreate">SafeArrayCreate</a>.</param>
            <param name="rgIndices">A vector of indexes for each dimension of the array. The right-most (least significant) dimension is rgIndices[0]. The left-most dimension is stored at <c>rgIndices[psa-&gt;cDims – 1]</c>.</param>
            <param name="pv">The data to assign to the array. The variant types VT_DISPATCH, VT_UNKNOWN, and VT_BSTR are pointers, and do not require another level of indirection.</param>
            <returns>
            <para>This function can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>This function automatically calls <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-safearraylock">SafeArrayLock</a> and <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-safearrayunlock">SafeArrayUnlock</a> before and after assigning the element. If the data element is a string, object, or variant, the function copies it correctly when the safe array is destroyed. If the existing element is a string, object, or variant, it is cleared correctly.  If the data element is a VT_DISPATCH or VT_UNKNOWN, <b>AddRef</b> is called to increment the object's reference count. <div class="alert"><b>Note</b>  Multiple locks can be on an array. Elements can be put into an array while the array is locked by other operations.</div> <div> </div> For an example that demonstrates calling <b>SafeArrayPutElement</b>, see the COM Fundamentals Lines sample (CLines::Add in Lines.cpp).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oleauto/nf-oleauto-safearrayputelement#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SafeArrayUnlock(Windows.Win32.System.Com.SAFEARRAY*)">
            <summary>Decrements the lock count of an array so it can be freed or resized.</summary>
            <param name="psa">An array descriptor created by <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-safearraycreate">SafeArrayCreate</a>.</param>
            <returns>
            <para>This function can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>This function is called after access to the data in an array is finished.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.CopyImage(Windows.Win32.Foundation.HANDLE,Windows.Win32.UI.WindowsAndMessaging.GDI_IMAGE_TYPE,System.Int32,System.Int32,Windows.Win32.UI.WindowsAndMessaging.IMAGE_FLAGS)">
            <summary>Creates a new image (icon, cursor, or bitmap) and copies the attributes of the specified image to the new one. If necessary, the function stretches the bits to fit the desired size of the new image.</summary>
            <param name="h">
            <para>Type: <b>HANDLE</b> A handle to the image to be copied.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-copyimage#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="type">Type: <b>UINT</b></param>
            <param name="cx">
            <para>Type: <b>int</b> The desired width, in pixels, of the image. If this is zero, then the returned image will have the same width as the original <i>hImage</i>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-copyimage#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="cy">
            <para>Type: <b>int</b> The desired height, in pixels, of the image. If this is zero, then the returned image will have the same height as the original <i>hImage</i>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-copyimage#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="flags">Type: <b>UINT</b></param>
            <returns>
            <para>Type: <b>HANDLE</b> If the function succeeds, the return value is the handle to the newly created image. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para>When you are finished using the resource, you can release its associated memory by calling one of the functions in the following table. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-copyimage#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.DestroyIcon(Windows.Win32.UI.WindowsAndMessaging.HICON)">
            <summary>Destroys an icon and frees any memory the icon occupied.</summary>
            <param name="hIcon">
            <para>Type: <b>HICON</b> A handle to the icon to be destroyed. The icon must not be in use.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-destroyicon#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para>It is only necessary to call <b>DestroyIcon</b> for icons and cursors created with the following functions: <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createiconfromresourceex">CreateIconFromResourceEx</a> (if called without the <b>LR_SHARED</b> flag), <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createiconindirect">CreateIconIndirect</a>, and <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-copyicon">CopyIcon</a>. Do not use this function to destroy a shared icon. A shared icon is valid as long as the module from which it was loaded remains in memory. The following functions obtain a shared icon. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-destroyicon#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.DrawIconEx(Windows.Win32.Graphics.Gdi.HDC,System.Int32,System.Int32,Windows.Win32.UI.WindowsAndMessaging.HICON,System.Int32,System.Int32,System.UInt32,Windows.Win32.Graphics.Gdi.HBRUSH,Windows.Win32.UI.WindowsAndMessaging.DI_FLAGS)">
            <summary>Draws an icon or cursor into the specified device context, performing the specified raster operations, and stretching or compressing the icon or cursor as specified.</summary>
            <param name="hdc">
            <para>Type: <b>HDC</b> A handle to the device context into which the icon or cursor will be drawn.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-drawiconex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="xLeft">
            <para>Type: <b>int</b> The logical x-coordinate of the upper-left corner of the icon or cursor.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-drawiconex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="yTop">
            <para>Type: <b>int</b> The logical y-coordinate of the upper-left corner of the icon or cursor.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-drawiconex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="hIcon">
            <para>Type: <b>HICON</b> A handle to the icon or cursor to be drawn. This parameter can identify an animated cursor.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-drawiconex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="cxWidth">
            <para>Type: <b>int</b> The logical width of the icon or cursor. If this parameter is zero and the <i>diFlags</i> parameter is <b>DI_DEFAULTSIZE</b>, the function uses the <b>SM_CXICON</b> system metric value to set the width. If this parameter is zero and <b>DI_DEFAULTSIZE</b> is not used, the function uses the actual resource width.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-drawiconex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="cyWidth">
            <para>Type: <b>int</b> The logical height of the icon or cursor. If this parameter is zero and the <i>diFlags</i> parameter is <b>DI_DEFAULTSIZE</b>, the function uses the <b>SM_CYICON</b> system metric value to set the width. If this parameter is zero and <b>DI_DEFAULTSIZE</b> is not used, the function uses the actual resource height.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-drawiconex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="istepIfAniCur">
            <para>Type: <b>UINT</b> The index of the frame to draw, if <i>hIcon</i> identifies an animated cursor. This parameter is ignored if <i>hIcon</i> does not identify an animated cursor.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-drawiconex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="hbrFlickerFreeDraw">
            <para>Type: <b>HBRUSH</b> A handle to a brush that the system uses for flicker-free drawing. If <i>hbrFlickerFreeDraw</i> is a valid brush handle, the system creates an offscreen bitmap using the specified brush for the background color, draws the icon or cursor into the bitmap, and then copies the bitmap into the device context identified by <i>hdc</i>. If <i>hbrFlickerFreeDraw</i> is <b>NULL</b>, the system draws the icon or cursor directly into the device context.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-drawiconex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="diFlags">Type: <b>UINT</b></param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para>The <b>DrawIconEx</b> function places the icon's upper-left corner at the location specified by the <i>xLeft</i> and <i>yTop</i> parameters. The location is subject to the current mapping mode of the device context. If only one of the <b>DI_IMAGE</b> and <b>DI_MASK</b> flags is set, then the corresponding bitmap is drawn with the <b>SRCCOPY</b> <a href="https://docs.microsoft.com/windows/win32/api/wingdi/nf-wingdi-bitblt">raster operation code</a>. If both the <b>DI_IMAGE</b> and <b>DI_MASK</b> flags are set: * If the icon or cursor is a 32-bit alpha-blended icon or cursor, then the image is drawn with <b>AC_SRC_OVER</b> <a href="https://docs.microsoft.com/windows/win32/api/wingdi/ns-wingdi-blendfunction">blend function</a> and the mask is ignored. * For all other icons or cursors, the mask is drawn with the <b>SRCAND</b> <a href="https://docs.microsoft.com/windows/win32/api/wingdi/nf-wingdi-bitblt">raster operation code</a>, and the image is drawn with the <b>SRCINVERT</b> <a href="https://docs.microsoft.com/windows/win32/api/wingdi/nf-wingdi-bitblt">raster operation code</a> To duplicate <c>DrawIcon (hDC, X, Y, hIcon)</c>, call <b>DrawIconEx</b> as follows: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-drawiconex#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetClientRect(Windows.Win32.Foundation.HWND,Windows.Win32.Foundation.RECT@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GetClientRect(Windows.Win32.Foundation.HWND,Windows.Win32.Foundation.RECT*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetClientRect(Windows.Win32.Foundation.HWND,Windows.Win32.Foundation.RECT*)">
            <summary>Retrieves the coordinates of a window's client area.</summary>
            <param name="hWnd">
            <para>Type: <b>HWND</b> A handle to the window whose client coordinates are to be retrieved.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getclientrect#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpRect">
            <para>Type: <b>LPRECT</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that receives the client coordinates. The <b>left</b> and <b>top</b> members are zero. The <b>right</b> and <b>bottom</b> members contain the width and height of the window.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getclientrect#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>In conformance with conventions for the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure, the bottom-right coordinates of the returned rectangle are exclusive. In other words, the pixel at (<b>right</b>, <b>bottom</b>) lies immediately outside the rectangle.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetDC(Windows.Win32.Foundation.HWND)">
            <summary>The GetDC function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen.</summary>
            <param name="hWnd">A handle to the window whose DC is to be retrieved. If this value is <b>NULL</b>, <b>GetDC</b> retrieves the DC for the entire screen.</param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the DC for the specified window's client area. If the function fails, the return value is <b>NULL</b>.</para>
            </returns>
            <remarks>
            <para>The <b>GetDC</b> function retrieves a common, class, or private DC depending on the class style of the specified window. For class and private DCs, <b>GetDC</b> leaves the previously assigned attributes unchanged. However, for common DCs, <b>GetDC</b> assigns default attributes to the DC each time it is retrieved. For example, the default font is System, which is a bitmap font. Because of this, the handle to a common DC returned by <b>GetDC</b> does not tell you what font, color, or brush was used when the window was drawn. To determine the font, call <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-gettextfacea">GetTextFace</a>. Note that the handle to the DC can only be used by a single thread at any one time. After painting with a common DC, the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-releasedc">ReleaseDC</a> function must be called to release the DC. Class and private DCs do not have to be released. <b>ReleaseDC</b> must be called from the same thread that called <b>GetDC</b>. The number of DCs is limited only by available memory.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getdc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetDCEx(Windows.Win32.Foundation.HWND,Windows.Win32.Graphics.Gdi.HRGN,Windows.Win32.Graphics.Gdi.GET_DCX_FLAGS)">
            <summary>The GetDCEx function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen.</summary>
            <param name="hWnd">A handle to the window whose DC is to be retrieved. If this value is <b>NULL</b>, <b>GetDCEx</b> retrieves the DC for the entire screen.</param>
            <param name="hrgnClip">A clipping region that may be combined with the visible region of the DC. If the value of <i>flags</i> is DCX_INTERSECTRGN or DCX_EXCLUDERGN, then the operating system assumes ownership of the region and will automatically delete it when it is no longer needed. In this case, the application should not use or delete the region after a successful call to <b>GetDCEx</b>.</param>
            <param name="flags"></param>
            <returns>
            <para>If the function succeeds, the return value is the handle to the DC for the specified window. If the function fails, the return value is <b>NULL</b>. An invalid value for the <i>hWnd</i> parameter will cause the function to fail.</para>
            </returns>
            <remarks>
            <para>Unless the display DC belongs to a window class, the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-releasedc">ReleaseDC</a> function must be called to release the DC after painting. Also, <b>ReleaseDC</b> must be called from the same thread that called <b>GetDCEx</b>. The number of DCs is limited only by available memory. The function returns a handle to a DC that belongs to the window's class if CS_CLASSDC, CS_OWNDC or CS_PARENTDC was specified as a style in the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-wndclassa">WNDCLASS</a> structure when the class was registered.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getdcex#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetDesktopWindow">
            <summary>Retrieves a handle to the desktop window. The desktop window covers the entire screen. The desktop window is the area on top of which other windows are painted.</summary>
            <returns>
            <para>Type: <b>HWND</b> The return value is a handle to the desktop window.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getdesktopwindow">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetForegroundWindow">
            <summary>Retrieves a handle to the foreground window (the window with which the user is currently working). The system assigns a slightly higher priority to the thread that creates the foreground window than it does to other threads.</summary>
            <returns>
            <para>Type: <b>HWND</b> The return value is a handle to the foreground window. The foreground window can be <b>NULL</b> in certain circumstances, such as when a window is losing activation.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getforegroundwindow">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetGuiResources(Windows.Win32.Foundation.HANDLE,Windows.Win32.System.Threading.GET_GUI_RESOURCES_FLAGS)">
            <summary>Retrieves the count of handles to graphical user interface (GUI) objects in use by the specified process.</summary>
            <param name="hProcess">
            <para>A handle to the process. The handle must refer to a process in the current session, and must have the **PROCESS_QUERY_LIMITED_INFORMATION** access right (see [Process security and access rights](/windows/win32/procthread/process-security-and-access-rights)). If this parameter is the special value **GR_GLOBAL**, then the resource usage is reported across all processes in the current session. **Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:** The **GR_GLOBAL** value is not supported until Windows 7 and Windows Server 2008 R2. **Windows Server 2003 and Windows XP:** The handle must have the **PROCESS_QUERY_INFORMATION** access right.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getguiresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="uiFlags"></param>
            <returns>
            <para>If the function succeeds, the return value is the count of handles to GUI objects in use by the process. If no GUI objects are in use, the return value is zero. If the function fails, the return value is zero. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para>A process without a graphical user interface does not use GUI resources, therefore, <b>GetGuiResources</b> will return zero.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getguiresources#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetIconInfo(Windows.Win32.UI.WindowsAndMessaging.HICON,Windows.Win32.UI.WindowsAndMessaging.ICONINFO@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GetIconInfo(Windows.Win32.UI.WindowsAndMessaging.HICON,Windows.Win32.UI.WindowsAndMessaging.ICONINFO*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetIconInfo(Windows.Win32.UI.WindowsAndMessaging.HICON,Windows.Win32.UI.WindowsAndMessaging.ICONINFO*)">
            <summary>Retrieves information about the specified icon or cursor.</summary>
            <param name="hIcon">Type: <b>HICON</b></param>
            <param name="piconinfo">
            <para>Type: <b>PICONINFO</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-iconinfo">ICONINFO</a> structure. The function fills in the structure's members.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfo#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero and the function fills in the members of the specified <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-iconinfo">ICONINFO</a> structure. If the function fails, the return value is zero. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><b>GetIconInfo</b> creates bitmaps for the <b>hbmMask</b> and <b>hbmColor</b> or members of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-iconinfo">ICONINFO</a>. The calling application must manage these bitmaps and delete them when they are no longer necessary. <h3><a id="DPI_Virtualization"></a><a id="dpi_virtualization"></a><a id="DPI_VIRTUALIZATION"></a>DPI Virtualization</h3> This API does not participate in DPI virtualization. The output returned is not affected by the DPI of the calling thread.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-geticoninfo#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetMonitorInfo(Windows.Win32.Graphics.Gdi.HMONITOR,Windows.Win32.Graphics.Gdi.MONITORINFO@)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.GetMonitorInfo(Windows.Win32.Graphics.Gdi.HMONITOR,Windows.Win32.Graphics.Gdi.MONITORINFO*)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetMonitorInfo(Windows.Win32.Graphics.Gdi.HMONITOR,Windows.Win32.Graphics.Gdi.MONITORINFO*)">
            <summary>The GetMonitorInfo function retrieves information about a display monitor. (Unicode)</summary>
            <param name="hMonitor">A handle to the display monitor of interest.</param>
            <param name="lpmi">
            <para>A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-monitorinfo">MONITORINFO</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-monitorinfoexa">MONITORINFOEX</a> structure that receives information about the specified display monitor. You must set the <b>cbSize</b> member of the structure to sizeof(MONITORINFO) or sizeof(MONITORINFOEX) before calling the <b>GetMonitorInfo</b> function. Doing so lets the function determine the type of structure you are passing to it. The <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-monitorinfoexa">MONITORINFOEX</a> structure is a superset of the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-monitorinfo">MONITORINFO</a> structure. It has one additional member: a string that contains a name for the display monitor. Most applications have no use for a display monitor name, and so can save some bytes by using a <b>MONITORINFO</b> structure.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getmonitorinfow#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>> [!NOTE] > The winuser.h header defines GetMonitorInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getmonitorinfow#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.GetSystemMetrics(Windows.Win32.UI.WindowsAndMessaging.SYSTEM_METRICS_INDEX)">
            <summary>Retrieves the specified system metric or system configuration setting.</summary>
            <param name="nIndex">Type: <b>int</b></param>
            <returns>
            <para>Type: <b>int</b> If the function succeeds, the return value is the requested system metric or configuration setting. If the function fails, the return value is 0. <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> does not provide extended error information.</para>
            </returns>
            <remarks>
            <para>System metrics can vary from display to display. <b>GetSystemMetrics</b>(SM_CMONITORS) counts only visible display monitors. This is different from <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-enumdisplaymonitors">EnumDisplayMonitors</a>, which enumerates both visible display monitors and invisible  pseudo-monitors that are associated with mirroring drivers. An invisible pseudo-monitor is associated with a pseudo-device used to mirror application drawing for remoting or other purposes. The SM_ARRANGE setting specifies how the system arranges minimized windows, and consists of a starting position and a direction. The starting position can be one of the following values.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getsystemmetrics#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.DestroyCursor(Windows.Win32.UI.WindowsAndMessaging.HCURSOR)">
            <summary>Destroys a cursor and frees any memory the cursor occupied. Do not use this function to destroy a shared cursor.</summary>
            <param name="hCursor">
            <para>Type: <b>HCURSOR</b> A handle to the cursor to be destroyed. The cursor must not be in use.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-destroycursor#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para>The <b>DestroyCursor</b> function destroys a nonshared cursor. Do not use this function to destroy a shared cursor. A shared cursor is valid as long as the module from which it was loaded remains in memory. The following functions obtain a shared cursor: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-destroycursor#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.LoadIcon(Windows.Win32.Foundation.HINSTANCE,System.String)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.LoadIcon(Windows.Win32.Foundation.HINSTANCE,Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.LoadIcon(Windows.Win32.Foundation.HINSTANCE,Windows.Win32.Foundation.PCWSTR)">
            <summary>Loads the specified icon resource from the executable (.exe) file associated with an application instance. (Unicode)</summary>
            <param name="hInstance">
            <para>Type: <b>HINSTANCE</b> A handle to an instance of the module whose executable file contains the icon to be loaded. This parameter must be <b>NULL</b> when a standard icon is being loaded.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadiconw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpIconName">
            <para>Type: <b>LPCTSTR</b> The name of the icon resource to be loaded. Alternatively, this parameter can contain the resource identifier in the low-order word and zero in the high-order word. Use the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-makeintresourcea">MAKEINTRESOURCE</a> macro to create this value.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadiconw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HICON</b> If the function succeeds, the return value is a handle to the newly loaded icon. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><b>LoadIcon</b> loads the icon resource only if it has not been loaded; otherwise, it retrieves a handle to the existing resource. The function searches the icon resource for the icon most appropriate for the current display. The icon resource can be a color or monochrome bitmap. <b>LoadIcon</b> can only load an icon whose size conforms to the <b>SM_CXICON</b> and <b>SM_CYICON</b> system metric values. Use the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-loadimagea">LoadImage</a> function to load icons of other sizes.</para>
            <para>> [!NOTE] > The winuser.h header defines LoadIcon as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-loadiconw#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.MonitorFromPoint(System.Drawing.Point,Windows.Win32.Graphics.Gdi.MONITOR_FROM_FLAGS)">
            <summary>The MonitorFromPoint function retrieves a handle to the display monitor that contains a specified point.</summary>
            <param name="pt">A <a href="https://docs.microsoft.com/windows/win32/api/windef/ns-windef-point">POINT</a> structure that specifies the point of interest in virtual-screen coordinates.</param>
            <param name="dwFlags">Determines the function's return value if the point is not contained within any display monitor.</param>
            <returns>
            <para>If the point is contained by a display monitor, the return value is an <b>HMONITOR</b> handle to that display monitor. If the point is not contained by a display monitor, the return value depends on the value of <i>dwFlags</i>.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-monitorfrompoint">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.MonitorFromRect(Windows.Win32.Foundation.RECT@,Windows.Win32.Graphics.Gdi.MONITOR_FROM_FLAGS)">
            <inheritdoc cref="M:Windows.Win32.PInvokeCore.MonitorFromRect(Windows.Win32.Foundation.RECT*,Windows.Win32.Graphics.Gdi.MONITOR_FROM_FLAGS)"/>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.MonitorFromRect(Windows.Win32.Foundation.RECT*,Windows.Win32.Graphics.Gdi.MONITOR_FROM_FLAGS)">
            <summary>The MonitorFromRect function retrieves a handle to the display monitor that has the largest area of intersection with a specified rectangle.</summary>
            <param name="lprc">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that specifies the rectangle of interest in virtual-screen coordinates.</param>
            <param name="dwFlags">Determines the function's return value if the rectangle does not intersect any display monitor.</param>
            <returns>
            <para>If the rectangle intersects one or more display monitor rectangles, the return value is an <b>HMONITOR</b> handle to the display monitor that has the largest area of intersection with the rectangle. If the rectangle does not intersect a display monitor, the return value depends on the value of <i>dwFlags</i>.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-monitorfromrect">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.MonitorFromWindow(Windows.Win32.Foundation.HWND,Windows.Win32.Graphics.Gdi.MONITOR_FROM_FLAGS)">
            <summary>The MonitorFromWindow function retrieves a handle to the display monitor that has the largest area of intersection with the bounding rectangle of a specified window.</summary>
            <param name="hwnd">A handle to the window of interest.</param>
            <param name="dwFlags">Determines the function's return value if the window does not intersect any display monitor.</param>
            <returns>
            <para>If the window intersects one or more display monitor rectangles, the return value is an <b>HMONITOR</b> handle to the display monitor that has the largest area of intersection with the window. If the window does not intersect a display monitor, the return value depends on the value of <i>dwFlags</i>.</para>
            </returns>
            <remarks>If the window is currently minimized, <b>MonitorFromWindow</b> uses the rectangle of the window before it was minimized.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.ReleaseDC(Windows.Win32.Foundation.HWND,Windows.Win32.Graphics.Gdi.HDC)">
            <summary>The ReleaseDC function releases a device context (DC), freeing it for use by other applications. The effect of the ReleaseDC function depends on the type of DC. It frees only common and window DCs. It has no effect on class or private DCs.</summary>
            <param name="hWnd">A handle to the window whose DC is to be released.</param>
            <param name="hDC">A handle to the DC to be released.</param>
            <returns>
            <para>The return value indicates whether the DC was released. If the DC was released, the return value is 1. If the DC was not released, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The application must call the <b>ReleaseDC</b> function for each call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getwindowdc">GetWindowDC</a> function and for each call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getdc">GetDC</a> function that retrieves a common DC. An application cannot use the <b>ReleaseDC</b> function to release a DC that was created by calling the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-createdca">CreateDC</a> function; instead, it must use the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-deletedc">DeleteDC</a> function. <b>ReleaseDC</b> must be called from the same thread that called <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getdc">GetDC</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-releasedc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SystemParametersInfo(Windows.Win32.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_ACTION,System.UInt32,System.Void*,Windows.Win32.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS)">
            <summary>Retrieves or sets the value of one of the system-wide parameters. (Unicode)</summary>
            <param name="uiAction">
            <para>Type: <b>UINT</b> The system-wide parameter to be retrieved or set. The possible values are organized in the following tables of related parameters: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-systemparametersinfow#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="uiParam">
            <para>Type: <b>UINT</b> A parameter whose usage and format depends on the system parameter being queried or set. For more information about system-wide parameters, see the <i>uiAction</i> parameter. If not otherwise indicated, you must specify zero for this parameter.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-systemparametersinfow#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pvParam">
            <para>Type: <b>PVOID</b> A parameter whose usage and format depends on the system parameter being queried or set. For more information about system-wide parameters, see the <i>uiAction</i> parameter. If not otherwise indicated, you must specify <b>NULL</b> for this parameter. For information on the <b>PVOID</b> datatype, see <a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">Windows Data Types</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-systemparametersinfow#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="fWinIni">
            <para>Type: <b>UINT</b> If a system parameter is being set, specifies whether the user profile is to be updated, and if so, whether the <a href="https://docs.microsoft.com/windows/desktop/winmsg/wm-settingchange">WM_SETTINGCHANGE</a> message is to be broadcast to all top-level windows to notify them of the change.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-systemparametersinfow#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is a nonzero value. If the function fails, the return value is zero. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para>This function is intended for use with applications that allow the user to customize the environment. A keyboard layout name should be derived from the hexadecimal value of the language identifier corresponding to the layout. For example, U.S. English has a language identifier of 0x0409, so the primary U.S. English layout is named "00000409". Variants of U.S. English layout, such as the Dvorak layout, are named "00010409", "00020409" and so on. For a list of the primary language identifiers and sublanguage identifiers that make up a language identifier, see the <b>MAKELANGID</b> macro. There is a difference between the High Contrast color scheme and the High Contrast Mode. The High Contrast color scheme changes the system colors to colors that have obvious contrast; you switch to this color scheme by using the Display Options in the control panel. The High Contrast Mode, which uses <b>SPI_GETHIGHCONTRAST</b> and <b>SPI_SETHIGHCONTRAST</b>, advises applications to modify their appearance for visually-impaired users. It involves such things as audible warning to users and customized color scheme (using the Accessibility Options in the control panel). For more information, see <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-highcontrasta">HIGHCONTRAST</a>. For more information on general accessibility features, see <a href="https://docs.microsoft.com/windows/desktop/accessibility">Accessibility</a>. During the time that the primary button is held down to activate the Mouse ClickLock feature, the user can move the mouse. After the primary button is locked down, releasing the primary button does not result in a <b>WM_LBUTTONUP</b> message. Thus, it will appear to an application that the primary button is still down. Any subsequent button message releases the primary button, sending a <b>WM_LBUTTONUP</b> message to the application, thus the button can be unlocked programmatically or through the user clicking any button. This API is not DPI aware, and should not be used if the calling thread is per-monitor DPI aware. For the DPI-aware version of this API, see <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-systemparametersinfofordpi">SystemParametersInfoForDPI</a>. For more information on DPI awareness, see <a href="https://docs.microsoft.com/windows/desktop/hidpi/high-dpi-desktop-application-development-on-windows">the Windows High DPI documentation.</a></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-systemparametersinfow#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.SystemParametersInfoForDpi(System.UInt32,System.UInt32,System.Void*,System.UInt32,System.UInt32)">
            <summary>Retrieves the value of one of the system-wide parameters, taking into account the provided DPI value.</summary>
            <param name="uiAction">The system-wide parameter to be retrieved. This function is only intended for use with <b>SPI_GETICONTITLELOGFONT</b>, <b>SPI_GETICONMETRICS</b>, or <b>SPI_GETNONCLIENTMETRICS</b>. See <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-systemparametersinfoa">SystemParametersInfo</a> for more information on these values.</param>
            <param name="uiParam">A parameter whose usage and format depends on the system parameter being queried. For more information about system-wide parameters, see the <i>uiAction</i> parameter. If not otherwise indicated, you must specify zero for this parameter.</param>
            <param name="pvParam">A parameter whose usage and format depends on the system parameter being queried. For more information about system-wide parameters, see the <i>uiAction</i> parameter. If not otherwise indicated, you must specify <b>NULL</b> for this parameter. For information on the <b>PVOID</b> datatype, see <a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">Windows Data Types</a>.</param>
            <param name="fWinIni">Has no effect for with this API. This parameter only has an effect if you're setting parameter.</param>
            <param name="dpi">The DPI to use for scaling the metric.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para>This function returns a similar result as <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-systemparametersinfoa">SystemParametersInfo</a>, but scales it according to an arbitrary DPI you provide (if appropriate). It only scales with the following possible values for <i>uiAction</i>: <b>SPI_GETICONTITLELOGFONT</b>, <b>SPI_GETICONMETRICS</b>, <b>SPI_GETNONCLIENTMETRICS</b>. Other possible <i>uiAction</i> values do not provide ForDPI behavior, and therefore this function returns 0 if called with them. For <i>uiAction</i> values that contain strings within their associated structures, only Unicode (<a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-logfonta">LOGFONTW</a>) strings are supported in this function.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-systemparametersinfofordpi#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvokeCore.WindowFromDC(Windows.Win32.Graphics.Gdi.HDC)">
            <summary>The WindowFromDC function returns a handle to the window associated with the specified display device context (DC). Output functions that use the specified device context draw into this window.</summary>
            <param name="hDC">Handle to the device context from which a handle to the associated window is to be retrieved.</param>
            <returns>The return value is a handle to the window associated with the specified DC. If no window is associated with the specified DC, the return value is <b>NULL</b>.</returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-windowfromdc">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ComInterfaceTable.Create``1">
            <summary>
             Create an interface table for the given interface.
            </summary>
        </member>
        <member name="M:Windows.Win32.System.Com.ComInterfaceTable.Create``2">
            <summary>
             Create an interface table for the given interfaces.
            </summary>
        </member>
        <member name="M:Windows.Win32.System.Com.ComInterfaceTable.Create``3">
            <summary>
             Create an interface table for the given interfaces.
            </summary>
        </member>
        <member name="M:Windows.Win32.System.Com.ComInterfaceTable.Create``4">
            <summary>
             Create an interface table for the given interfaces.
            </summary>
        </member>
        <member name="M:Windows.Win32.System.Com.ComInterfaceTable.Create``5">
            <summary>
             Create an interface table for the given interfaces.
            </summary>
        </member>
        <member name="M:Windows.Win32.System.Com.ComInterfaceTable.Create``6">
            <summary>
             Create an interface table for the given interfaces.
            </summary>
        </member>
        <member name="M:Windows.Win32.System.Com.ComInterfaceTable.Create``10">
            <summary>
             Create an interface table for the given interfaces.
            </summary>
        </member>
        <member name="M:Windows.Win32.System.Com.ComInterfaceTable.Create``27">
            <summary>
             Create an interface table for the given interfaces.
            </summary>
        </member>
        <member name="M:Windows.Win32.System.Com.ComManagedStream.Windows#Win32#System#Com#IStream#Interface#LockRegion(System.UInt64,System.UInt64,System.UInt32)">
            Returns HRESULT.STG_E_INVALIDFUNCTION as a documented way to say we don't support locking
        </member>
        <member name="M:Windows.Win32.System.Com.ComManagedStream.Windows#Win32#System#Com#IStream#Interface#UnlockRegion(System.UInt64,System.UInt64,System.UInt32)">
            Returns HRESULT.STG_E_INVALIDFUNCTION as a documented way to say we don't support locking
        </member>
        <member name="T:Windows.Win32.System.Com.CY">
            <summary>The CY structure is useful for calculations involving money, or for any fixed-point calculation where accuracy is particularly important.</summary>
            <remarks></remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.CY.int64">
            <summary></summary>
        </member>
        <member name="T:Windows.Win32.System.Com.IComCallableWrapper">
            <inheritdoc cref="T:Windows.Win32.System.Com.IComCallableWrapper.Interface"/>
        </member>
        <member name="T:Windows.Win32.System.Com.IComCallableWrapper.Interface">
            <summary>
             Used to flag that the COM object is a <see cref="T:System.Runtime.InteropServices.ComWrappers"/> generated object.
            </summary>
        </member>
        <member name="M:Windows.Win32.System.Com.IDispatch.TryGetProperty(System.UInt32,Windows.Win32.System.Variant.VARIANT*,System.UInt32)">
            <summary>
             Get the specified <paramref name="dispId"/> property.
            </summary>
        </member>
        <member name="M:Windows.Win32.System.Com.IDispatch.TryGetProperty(System.Int32,Windows.Win32.System.Variant.VARIANT*,System.UInt32)">
            <summary>
             Get the specified <paramref name="dispId"/> property.
            </summary>
        </member>
        <member name="M:Windows.Win32.System.Com.IDispatch.GetProperty(System.UInt32,System.UInt32)">
            <summary>
             Get the specified <paramref name="dispId"/> property.
            </summary>
        </member>
        <member name="M:Windows.Win32.System.Com.IDispatch.GetProperty(System.Int32,System.UInt32)">
            <summary>
             Get the specified <paramref name="dispId"/> property.
            </summary>
        </member>
        <member name="M:Windows.Win32.System.Com.IDispatch.GetIDOfName(System.String,System.Int32@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IDispatch.GetIDsOfNames(System.Guid*,Windows.Win32.Foundation.PWSTR*,System.UInt32,System.UInt32,System.Int32*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IDispatch.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IDispatch.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IDispatch.GetTypeInfoCount(System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IDispatch.GetTypeInfoCount(System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IDispatch.GetTypeInfoCount(System.UInt32*)">
            <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
            <param name="pctinfo">The number of type information interfaces provided by the object. If the object provides type information, this number is 1; otherwise the number is 0.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>The method may return zero, which indicates that the object does not provide any type information. In this case, the object may still be programmable through <b>IDispatch</b> or a VTBL, but does not provide run-time type information for browsers, compilers, or other programming tools that access type information. This can be useful for hiding an object from browsers.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IDispatch.GetTypeInfo(System.UInt32,System.UInt32,Windows.Win32.System.Com.ITypeInfo**)">
            <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
            <param name="iTInfo">The type information to return. Pass 0 to retrieve type information for the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-idispatch">IDispatch</a> implementation.</param>
            <param name="lcid">The locale identifier for the type information. An object may be able to return different type information for different languages. This is important for classes that support localized member names. For classes that do not support localized member names, this parameter can be ignored.</param>
            <param name="ppTInfo">The requested type information object.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-idispatch-gettypeinfo">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IDispatch.GetIDsOfNames(System.Guid@,System.Span{Windows.Win32.Foundation.PWSTR},System.UInt32,System.Span{System.Int32})">
            <inheritdoc cref="M:Windows.Win32.System.Com.IDispatch.GetIDsOfNames(System.Guid*,Windows.Win32.Foundation.PWSTR*,System.UInt32,System.UInt32,System.Int32*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IDispatch.GetIDsOfNames(System.Guid*,Windows.Win32.Foundation.PWSTR*,System.UInt32,System.UInt32,System.Int32*)">
            <summary>Maps a single member and an optional set of argument names to a corresponding set of integer DISPIDs, which can be used on subsequent calls to Invoke.</summary>
            <param name="riid">Reserved for future use. Must be IID_NULL.</param>
            <param name="rgszNames">The array of names to be mapped.</param>
            <param name="cNames">The count of the names to be mapped.</param>
            <param name="lcid">The locale context in which to interpret the names.</param>
            <param name="rgDispId">Caller-allocated array, each element of which contains an identifier (ID) corresponding to one of the names passed in the rgszNames array. The first element represents the member name. The subsequent elements represent each of the member's parameters.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>An <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-idispatch">IDispatch</a> implementation can associate any positive integer ID value with a given name. Zero is reserved for the default, or <b>Value</b> property; –1 is reserved to indicate an unknown name; and other negative values are defined for other purposes. For example, if <b>GetIDsOfNames</b> is called, and the implementation does not recognize one or more of the names, it returns DISP_E_UNKNOWNNAME, and the <i>rgDispId</i> array contains DISPID_UNKNOWN for the entries that correspond to the unknown names. The member and parameter DISPIDs must remain constant for the lifetime of the object. This allows a client to obtain the DISPIDs once, and cache them for later use. When <b>GetIDsOfNames</b> is called with more than one name, the first name (<i>rgszNames</i>[0]) corresponds to the member name, and subsequent names correspond to the names of the member's parameters. The same name may map to different DISPIDs, depending on context. For example, a name may have a DISPID when it is used as a member name with a particular interface, a different ID as a member of a different interface, and different mapping for each time it appears as a parameter. <b>GetIDsOfNames</b> is used when an <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-idispatch">IDispatch</a> client binds to names at run time. To bind at compile time instead, an <b>IDispatch</b> client can map names to DISPIDs by using the type information interfaces described in <a href="https://docs.microsoft.com/previous-versions/windows/desktop/automat/type-description-interfaces">Type Description Interfaces</a>. This allows a client to bind to members at compile time and avoid calling <b>GetIDsOfNames</b> at run time. For a description of binding at compile time, see Type Description Interfaces. The implementation of <b>GetIDsOfNames</b> is case insensitive. Users that need case-sensitive name mapping should use type information interfaces to map names to DISPIDs, rather than call <b>GetIDsOfNames</b>. <div class="alert"><b>Caution</b>  You cannot use this method to access values that have been added dynamically, such as values added through JavaScript. Instead, use the GetDispID of the IDispatchEx interface. For more information, see the <a href="https://docs.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/windows-scripting/reference/idispatchex-interface">IDispatchEx interface</a>.</div> <div> </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-idispatch-getidsofnames#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IDispatch.Invoke(System.Int32,System.Guid@,System.UInt32,Windows.Win32.System.Com.DISPATCH_FLAGS,Windows.Win32.System.Com.DISPPARAMS@,Windows.Win32.System.Variant.VARIANT*,Windows.Win32.System.Com.EXCEPINFO*,System.UInt32*)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IDispatch.Invoke(System.Int32,System.Guid*,System.UInt32,Windows.Win32.System.Com.DISPATCH_FLAGS,Windows.Win32.System.Com.DISPPARAMS*,Windows.Win32.System.Variant.VARIANT*,Windows.Win32.System.Com.EXCEPINFO*,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IDispatch.Invoke(System.Int32,System.Guid*,System.UInt32,Windows.Win32.System.Com.DISPATCH_FLAGS,Windows.Win32.System.Com.DISPPARAMS*,Windows.Win32.System.Variant.VARIANT*,Windows.Win32.System.Com.EXCEPINFO*,System.UInt32*)">
            <summary>Provides access to properties and methods exposed by an object.</summary>
            <param name="dispIdMember">Identifies the member. Use <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-idispatch-getidsofnames">GetIDsOfNames</a> or the object's documentation to obtain the dispatch identifier.</param>
            <param name="riid">Reserved for future use. Must be IID_NULL.</param>
            <param name="lcid">
            <para>The locale context in which to interpret arguments. The <i>lcid</i> is used by the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-idispatch-getidsofnames">GetIDsOfNames</a> function, and is also passed to <b>Invoke</b> to allow the object to interpret its arguments specific to a locale. Applications that do not support multiple national languages can ignore this parameter. For more information, refer to <a href="https://docs.microsoft.com/previous-versions/windows/desktop/automat/supporting-multiple-national-languages">Supporting Multiple National Languages</a> and <a href="https://docs.microsoft.com/previous-versions/windows/desktop/automat/exposing-activex-objects">Exposing ActiveX Objects</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-idispatch-invoke#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="wFlags">
            <para>Flags describing the context of the <b>Invoke</b> call. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-idispatch-invoke#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pDispParams">Pointer to a DISPPARAMS structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
            <param name="pVarResult">Pointer to the location where the result is to be stored, or NULL if the caller expects no result. This argument is ignored if DISPATCH_PROPERTYPUT or DISPATCH_PROPERTYPUTREF is specified.</param>
            <param name="pExcepInfo">Pointer to a structure that contains exception information. This structure should be filled in if DISP_E_EXCEPTION is returned. Can be NULL.</param>
            <param name="puArgErr">The index within rgvarg of the first argument that has an error. Arguments are stored in pDispParams-&gt;rgvarg in reverse order, so the first argument is the one with the highest index in the array. This parameter is returned only when the resulting return value is DISP_E_TYPEMISMATCH or DISP_E_PARAMNOTFOUND. This argument can be set to null. For details, see <a href="https://docs.microsoft.com/previous-versions/windows/desktop/automat/returning-errors">Returning Errors</a>.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>Generally, you should not implement <b>Invoke</b> directly. Instead, use the dispatch interface to create functions <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-createstddispatch">CreateStdDispatch</a> and <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-dispinvoke">DispInvoke</a>. For details, refer to <b>CreateStdDispatch</b>, <b>DispInvoke</b>, <a href="https://docs.microsoft.com/previous-versions/windows/desktop/automat/creating-the-idispatch-interface">Creating the IDispatch Interface</a> and <a href="https://docs.microsoft.com/previous-versions/windows/desktop/automat/exposing-activex-objects">Exposing ActiveX Objects</a>. If some application-specific processing needs to be performed before calling a member, the code should perform the necessary actions, and then call <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-itypeinfo-invoke">ITypeInfo::Invoke</a> to invoke the member. <b>ITypeInfo::Invoke</b> acts exactly like <b>Invoke</b>. The standard implementations of <b>Invoke</b> created by <b>CreateStdDispatch</b> and <b>DispInvoke</b> defer to <b>ITypeInfo::Invoke</b>. In an ActiveX client, <b>Invoke</b> should be used to get and set the values of properties, or to call a method of an ActiveX object. The <i>dispIdMember</i> argument identifies the member to invoke. The DISPIDs that identify members are defined by the implementer of the object and can be determined by using the object's documentation, the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-idispatch-getidsofnames">IDispatch::GetIDsOfNames</a> function, or the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</a> interface. When you use <b>IDispatch::Invoke()</b> with DISPATCH_PROPERTYPUT or DISPATCH_PROPERTYPUTREF, you have to specially initialize the <b>cNamedArgs</b> and <b>rgdispidNamedArgs</b> elements of your DISPPARAMS structure with the following:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-idispatch-invoke#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.IDispatch.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{00020400-0000-0000-c000-000000000046}</value>
        </member>
        <member name="T:Windows.Win32.System.Com.IManagedWrapper">
            <summary>
             An interface that provides a COM callable wrapper for the implementing class. The implementing class should not
             be public and unsealed as it can be derived from and COM interfaces can be added. This is meant to be a fixed
             set of interfaces.
            </summary>
            <remarks>
             <para>
              NET CCWs generated by built-in COM interop always support IMarshal, ISupportErrorInfo, IDispatchEx,
              IProvideClassInfo, and IConnectionPointContainer. They also usually expose IAgileObject. On Exception objects
              the CCW also supports IErrorInfo. These must explicitly be provided with this mechanism.
             </para>
             <para>
              .NET Framework also supported the following interfaces, which are not implemented on .NET Core:
             </para>
             <list type="bullet">
              <item><description>IManagedObject          - used .NET Remoting (not available on .NET Core)</description></item>
              <item><description>IObjectSafety           - for Code Access Security (not available on .NET Core)</description></item>
              <item><description>IWeakReferenceSource    - for WinRT</description></item>
              <item><description>ICustomPropertyProvider - for WinRT XAML (Jupiter)</description></item>
              <item><description>IReferenceTrackerTarget - for WinRT</description></item>
              <item><description>IStringable             - for WinRT</description></item>
             </list>
            </remarks>
        </member>
        <member name="T:Windows.Win32.System.Com.IManagedWrapper`1">
            <summary>
             Apply to a class to apply a COM callable wrapper of the given <typeparamref name="TComInterface"/>. The class
             must also derive from the given COM wrapper struct's nested Interface.
            </summary>
        </member>
        <member name="T:Windows.Win32.System.Com.IManagedWrapper`2">
            <summary>
             Apply to a class to apply a COM callable wrapper of the given <typeparamref name="TComInterface1"/> and <typeparamref name="TComInterface2"/>.
             The class must also derive from both of the given COM wrapper struct's nested Interface.
            </summary>
        </member>
        <member name="T:Windows.Win32.System.Com.IManagedWrapper`3">
            <summary>
             Apply to a class to apply a COM callable wrapper of the given interfaces. The class must also derive from the
             given COM wrapper structs' nested Interfaces.
            </summary>
        </member>
        <member name="T:Windows.Win32.System.Com.IManagedWrapper`4">
            <summary>
             Apply to a class to apply a COM callable wrapper of the given interfaces. The class must also derive from the
             given COM wrapper structs' nested Interfaces.
            </summary>
        </member>
        <member name="T:Windows.Win32.System.Com.IManagedWrapper`5">
            <summary>
             Apply to a class to apply a COM callable wrapper of the given interfaces. The class must also derive from the
             given COM wrapper structs' nested Interfaces.
            </summary>
        </member>
        <member name="T:Windows.Win32.System.Com.IManagedWrapper`6">
            <summary>
             Apply to a class to apply a COM callable wrapper of the given interfaces. The class must also derive from the
             given COM wrapper structs' nested Interfaces.
            </summary>
        </member>
        <member name="T:Windows.Win32.System.Com.IManagedWrapper`10">
            <summary>
             Apply to a class to apply a COM callable wrapper of the given interfaces. The class must also derive from the
             given COM wrapper structs' nested Interfaces.
            </summary>
        </member>
        <member name="T:Windows.Win32.System.Com.IManagedWrapper`27">
            <summary>
             Apply to a class to apply a COM callable wrapper of the given interfaces. The class must also derive from the
             given COM wrapper structs' nested Interfaces.
            </summary>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetIDOfName(System.String,System.Int32@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.GetIDsOfNames(Windows.Win32.Foundation.PWSTR*,System.UInt32,System.Int32*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetTypeAttr(Windows.Win32.System.Com.TYPEATTR*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.GetTypeAttr(Windows.Win32.System.Com.TYPEATTR**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetTypeAttr(Windows.Win32.System.Com.TYPEATTR**)">
            <summary>Retrieves a TYPEATTR structure that contains the attributes of the type description.</summary>
            <param name="ppTypeAttr">The attributes of this type description.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>To free the TYPEATTR structure, use <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-itypeinfo-releasetypeattr">ITypeInfo::ReleaseTypeAttr</a>.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetTypeComp(Windows.Win32.System.Com.ITypeComp**)">
            <summary>Retrieves the ITypeComp interface for the type description, which enables a client compiler to bind to the type description's members.</summary>
            <param name="ppTComp">The <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypecomp">ITypeComp</a> of the containing type library.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>A client compiler can use the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypecomp">ITypeComp</a> interface to bind to members of the type.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetFuncDesc(System.UInt32,Windows.Win32.System.Com.FUNCDESC*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.GetFuncDesc(System.UInt32,Windows.Win32.System.Com.FUNCDESC**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetFuncDesc(System.UInt32,Windows.Win32.System.Com.FUNCDESC**)">
            <summary>Retrieves the FUNCDESC structure that contains information about a specified function.</summary>
            <param name="index">The index of the function whose description is to be returned. The <i>index</i> should be in the range of 0 to 1 less than the number of functions in this type.</param>
            <param name="ppFuncDesc">A FUNCDESC structure that describes the specified function.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>The function <b>ITypeInfo::GetFuncDesc</b> provides access to a FUNCDESC structure that describes the function with the specified <i>index</i>. The FUNCDESC structure should be freed with <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-itypeinfo-releasefuncdesc">ITypeInfo::ReleaseFuncDesc</a>. The number of functions in the type is one of the attributes contained in the TYPEATTR structure.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetVarDesc(System.UInt32,Windows.Win32.System.Com.VARDESC*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.GetVarDesc(System.UInt32,Windows.Win32.System.Com.VARDESC**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetVarDesc(System.UInt32,Windows.Win32.System.Com.VARDESC**)">
            <summary>Retrieves a VARDESC structure that describes the specified variable.</summary>
            <param name="index">The index of the variable whose description is to be returned. The index should be in the range of 0 to 1 less than the number of variables in this type.</param>
            <param name="ppVarDesc">A VARDESC that describes the specified variable.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>To free the VARDESC structure, use <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-itypeinfo-releasevardesc">ReleaseVarDesc</a>.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetNames(System.Int32,Windows.Win32.Foundation.BSTR*,System.UInt32,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.GetNames(System.Int32,Windows.Win32.Foundation.BSTR*,System.UInt32,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetNames(System.Int32,Windows.Win32.Foundation.BSTR*,System.UInt32,System.UInt32*)">
            <summary>Retrieves the variable with the specified member ID or the name of the property or method and the parameters that correspond to the specified function ID.</summary>
            <param name="memid">The ID of the member whose name (or names) is to be returned.</param>
            <param name="rgBstrNames">The caller-allocated array. On return, each of the elements contains the name (or names) associated with the member.</param>
            <param name="cMaxNames">The length of the passed-in <i>rgBstrNames</i> array.</param>
            <param name="pcNames">The number of names in the <i>rgBstrNames</i> array.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>The caller must release the returned BSTR array.</para>
            <para>If the member ID identifies a property that is implemented with property functions, the property name is returned. For property get functions, the names of the function and its parameters are always returned.</para>
            <para>For property put and put reference functions, the right side of the assignment is unnamed. If <i>cMaxNames</i> is less than is required to return all of the names of the parameters of a function, then only the names of the first <i>cMaxNames</i> - 1 parameters are returned. The names of the parameters are returned in the array in the same order that they appear elsewhere in the interface (for example, the same order in the parameter array associated with the FUNCDESC enumeration).</para>
            <para>If the type description inherits from another type description, this function is recursive to the base type description, if necessary, to find the item with the requested member ID.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-itypeinfo-getnames#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetRefTypeOfImplType(System.UInt32,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.GetRefTypeOfImplType(System.UInt32,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetRefTypeOfImplType(System.UInt32,System.UInt32*)">
            <summary>If a type description describes a COM class, it retrieves the type description of the implemented interface types.</summary>
            <param name="index">The index of the implemented type whose handle is returned. The valid range is 0 to the <b>cImplTypes</b> field in the TYPEATTR structure.</param>
            <param name="pRefType">A handle for the implemented interface (if any). This handle can be passed to <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-itypeinfo-getreftypeinfo">ITypeInfo::GetRefTypeInfo</a> to get the type description.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>If the TKIND_DISPATCH type description is for a dual interface, the TKIND_INTERFACE type description can be obtained by calling <b>GetRefTypeOfImplType</b> with an <i>index</i> of –1, and by passing the returned <i>pRefTypehandle</i> to <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-itypeinfo-getreftypeinfo">GetRefTypeInfo</a> to retrieve the type information.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetImplTypeFlags(System.UInt32,Windows.Win32.System.Com.IMPLTYPEFLAGS@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.GetImplTypeFlags(System.UInt32,Windows.Win32.System.Com.IMPLTYPEFLAGS*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetImplTypeFlags(System.UInt32,Windows.Win32.System.Com.IMPLTYPEFLAGS*)">
            <summary>Retrieves the IMPLTYPEFLAGS enumeration for one implemented interface or base interface in a type description.</summary>
            <param name="index">The index of the implemented interface or base interface for which to get the flags.</param>
            <param name="pImplTypeFlags">The IMPLTYPEFLAGS enumeration value.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>The flags are associated with the act of inheritance, and not with the inherited interface.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetIDsOfNames(System.Span{Windows.Win32.Foundation.PWSTR},System.Span{System.Int32})">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.GetIDsOfNames(Windows.Win32.Foundation.PWSTR*,System.UInt32,System.Int32*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetIDsOfNames(Windows.Win32.Foundation.PWSTR*,System.UInt32,System.Int32*)">
            <summary>Maps between member names and member IDs, and parameter names and parameter IDs.</summary>
            <param name="rgszNames">An array of names to be mapped.</param>
            <param name="cNames">The count of the names to be mapped.</param>
            <param name="pMemId">Caller-allocated array in which name mappings are placed.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>The function <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-idispatch-getidsofnames">GetIDsOfNames</a> maps the name of a member (<b>rgszNames</b>[0]) and its parameters (<b>rgszNames</b>[1] ...<b>rgszNames</b>[<b>cNames</b>- 1]) to the ID of the member (<b>pMemId</b>[0]), and to the IDs of the specified parameters (<b>pMemId</b>[1] ... <b>pMemId</b>[<b>cNames</b>- 1]). The IDs of parameters are 0 for the first parameter in the member function's argument list, 1 for the second, and so on.</para>
            <para>If the type description inherits from another type description, this function is recursive to the base type description, if necessary, to find the item with the requested member ID.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-itypeinfo-getidsofnames#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.Invoke(System.Void*,System.Int32,Windows.Win32.System.Com.DISPATCH_FLAGS,Windows.Win32.System.Com.DISPPARAMS@,Windows.Win32.System.Variant.VARIANT@,Windows.Win32.System.Com.EXCEPINFO@,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.Invoke(System.Void*,System.Int32,Windows.Win32.System.Com.DISPATCH_FLAGS,Windows.Win32.System.Com.DISPPARAMS*,Windows.Win32.System.Variant.VARIANT*,Windows.Win32.System.Com.EXCEPINFO*,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.Invoke(System.Void*,System.Int32,Windows.Win32.System.Com.DISPATCH_FLAGS,Windows.Win32.System.Com.DISPPARAMS*,Windows.Win32.System.Variant.VARIANT*,Windows.Win32.System.Com.EXCEPINFO*,System.UInt32*)">
            <summary>Invokes a method, or accesses a property of an object, that implements the interface described by the type description.</summary>
            <param name="pvInstance">An instance of the interface described by this type description.</param>
            <param name="memid">The interface member.</param>
            <param name="wFlags">
            <para>Flags describing the context of the invoke call. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-itypeinfo-invoke#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pDispParams">An array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.</param>
            <param name="pVarResult">The result. Should be null if the caller does not expect any result. If <i>wFlags</i> specifies DISPATCH_PROPERTYPUT or DISPATCH_PROPERTYPUTREF, <i>pVarResultis</i> is ignored.</param>
            <param name="pExcepInfo">An exception information structure, which is filled in only if DISP_E_EXCEPTION is returned. If <i>pExcepInfo</i> is null on input, only an HRESULT error will be returned.</param>
            <param name="puArgErr">If Invoke returns DISP_E_TYPEMISMATCH, <i>puArgErr</i> indicates the index (within <i>rgvarg</i>) of the argument with incorrect type. If more than one argument returns an error, <i>puArgErr</i> indicates only the first argument with an error. Arguments in pDispParams-&gt;rgvarg appear in reverse order, so the first argument is the one having the highest index in the array. This parameter cannot be null.</param>
            <returns>
            <para></para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>Use the function <b>ITypeInfo::Invoke</b> to access a member of an object or invoke a method that implements the interface described by this type description. For objects that support the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-idispatch">IDispatch</a> interface, you can use <b>Invoke</b> to implement <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-idispatch-invoke">IDispatch::Invoke</a>.</para>
            <para><b>ITypeInfo::Invoke</b> takes a pointer to an instance of the class. Otherwise, its parameters are the same as <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-idispatch-invoke">IDispatch::Invoke</a>, except that <b>ITypeInfo::Invoke</b> omits the <i>refiid</i> and <i>lcid</i> parameters. When called, <b>ITypeInfo::Invoke</b> performs the actions described by the <b>IDispatch::Invoke</b> parameters on the specified instance.</para>
            <para>For VTBL interface members, <b>ITypeInfo::Invoke</b> passes the LCID of the type information into parameters tagged with the lcid attribute, and the returned value into the retval attribute.</para>
            <para>If the type description inherits from another type description, this function recurses on the base type description to find the item with the requested member ID.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-itypeinfo-invoke#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetDocumentation(System.Int32,Windows.Win32.Foundation.BSTR*,Windows.Win32.Foundation.BSTR*,System.UInt32@,Windows.Win32.Foundation.BSTR*)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.GetDocumentation(System.Int32,Windows.Win32.Foundation.BSTR*,Windows.Win32.Foundation.BSTR*,System.UInt32*,Windows.Win32.Foundation.BSTR*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetDocumentation(System.Int32,Windows.Win32.Foundation.BSTR*,Windows.Win32.Foundation.BSTR*,System.UInt32*,Windows.Win32.Foundation.BSTR*)">
            <summary>Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.</summary>
            <param name="memid">The ID of the member whose documentation is to be returned.</param>
            <param name="pBstrName">The name of the specified item. If the caller does not need the item name, <i>pBstrName</i> can be null.</param>
            <param name="pBstrDocString">The documentation string for the specified item. If the caller does not need the documentation string, <i>pBstrDocString</i> can be null.</param>
            <param name="pdwHelpContext">The Help localization context. If the caller does not need the Help context, it can be null.</param>
            <param name="pBstrHelpFile">The fully qualified name of the file containing the DLL used for Help file. If the caller does not need the file name, it can be null.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>The function <b>GetDocumentation</b> provides access to the documentation for the member specified by the <i>memid</i> parameter. If the passed-in <i>memid</i> is MEMBERID_NIL, then the documentation for the type description is returned.</para>
            <para>If the type description inherits from another type description, this function is recursive to the base type description, if necessary, to find the item with the requested member ID.</para>
            <para>The caller should use <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-sysfreestring">SysFreeString</a> to free the BSTRs referenced by <i>pBstrName</i>, <i>pBstrDocString</i>, and <i>pBstrHelpFile</i>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-itypeinfo-getdocumentation#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetDllEntry(System.Int32,Windows.Win32.System.Com.INVOKEKIND,Windows.Win32.Foundation.BSTR*,Windows.Win32.Foundation.BSTR*,System.UInt16@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.GetDllEntry(System.Int32,Windows.Win32.System.Com.INVOKEKIND,Windows.Win32.Foundation.BSTR*,Windows.Win32.Foundation.BSTR*,System.UInt16*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetDllEntry(System.Int32,Windows.Win32.System.Com.INVOKEKIND,Windows.Win32.Foundation.BSTR*,Windows.Win32.Foundation.BSTR*,System.UInt16*)">
            <summary>Retrieves a description or specification of an entry point for a function in a DLL.</summary>
            <param name="memid">The ID of the member function whose DLL entry description is to be returned.</param>
            <param name="invKind">The kind of member identified by <i>memid</i>. This is important for properties, because one <i>memid</i> can identify up to three separate functions.</param>
            <param name="pBstrDllName">If not null, the function sets <i>pBstrDllName</i> to the name of the DLL.</param>
            <param name="pBstrName">If not null, the function sets <i>pBstrName</i> to the name of the entry point. If the entry point is specified by an ordinal, this argument is null.</param>
            <param name="pwOrdinal">If not null, and if the function is defined by an ordinal, the function sets <i>pwOrdinal</i> to the ordinal.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>The caller passes in a member ID, which represents the member function whose entry description is desired. If the function has a DLL entry point, the name of the DLL that contains the function, as well as its name or ordinal identifier, are placed in the passed-in pointers allocated by the caller. If there is no DLL entry point for the function, an error is returned.</para>
            <para>If the type description inherits from another type description, this function is recursive to the base type description, if necessary, to find the item with the requested member ID.</para>
            <para>The caller should use <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-sysfreestring">SysFreeString</a> to free the BSTRs referenced by <i>pBstrName</i> and <i>pBstrDllName</i>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-itypeinfo-getdllentry#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetRefTypeInfo(System.UInt32,Windows.Win32.System.Com.ITypeInfo**)">
            <summary>If a type description references other type descriptions, it retrieves the referenced type descriptions.</summary>
            <param name="hRefType">A handle to the referenced type description to return.</param>
            <param name="ppTInfo">The referenced type description.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>On return, the second parameter contains a pointer to a pointer to a type description that is referenced by this type description. A type description must have a reference to each type description that occurs as the type of any of its variables, function parameters, or function return types. For example, if the type of a data member is a record type, the type description for that data member contains the <i>hRefType</i> of a referenced type description. To get a pointer to the type description, the reference is passed to <b>GetRefTypeInfo</b>.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.AddressOfMember(System.Int32,Windows.Win32.System.Com.INVOKEKIND,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.AddressOfMember(System.Int32,Windows.Win32.System.Com.INVOKEKIND,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.AddressOfMember(System.Int32,Windows.Win32.System.Com.INVOKEKIND,System.Void**)">
            <summary>Retrieves the addresses of static functions or variables, such as those defined in a DLL.</summary>
            <param name="memid">The member ID of the static member whose address is to be retrieved. The member ID is defined by the DISPID.</param>
            <param name="invKind">Indicates whether the member is a property, and if so, what kind.</param>
            <param name="ppv">The static member.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>The addresses are valid until the caller releases its reference to the type description. The <i>invKind</i> parameter can be ignored unless the address of a property function is being requested. If the type description inherits from another type description, this function is recursive to the base type description, if necessary, to find the item with the requested member ID.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-itypeinfo-addressofmember#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.CreateInstance(Windows.Win32.System.Com.IUnknown*,System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.CreateInstance(Windows.Win32.System.Com.IUnknown*,System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.CreateInstance(Windows.Win32.System.Com.IUnknown*,System.Guid*,System.Void**)">
            <summary>Creates a new instance of a type that describes a component object class (coclass).</summary>
            <param name="pUnkOuter">The controlling <b>IUnknown</b>. If Null, then a stand-alone instance is created. If valid, then an aggregate object is created.</param>
            <param name="riid">An ID for the interface that the caller will use to communicate with the resulting object.</param>
            <param name="ppvObj">An instance of the created object.</param>
            <returns>
            <para></para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>For types that describe a component object class (coclass), <b>CreateInstance</b> creates a new instance of the class. Normally, <b>CreateInstance</b> calls <b>CoCreateInstance</b> with the type description's GUID. For an Application object, it first calls <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-getactiveobject">GetActiveObject</a>. If the application is active, <b>GetActiveObject</b> returns the active object; otherwise, if <b>GetActiveObject</b> fails, <b>CreateInstance</b> calls <b>CoCreateInstance</b>.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetMops(System.Int32,Windows.Win32.Foundation.BSTR*)">
            <summary>Retrieves marshaling information.</summary>
            <param name="memid">The member ID that indicates which marshaling information is needed.</param>
            <param name="pBstrMops">The opcode string used in marshaling the fields of the structure described by the referenced type description, or null if there is no information to return.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>If the passed-in member ID is MEMBERID_NIL, the function returns the opcode string for marshaling the fields of the structure described by the type description. Otherwise, it returns the opcode string for marshaling the function specified by the index.</para>
            <para>If the type description inherits from another type description, this function recurses on the base type description, if necessary, to find the item with the requested member ID.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-itypeinfo-getmops#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetContainingTypeLib(Windows.Win32.System.Com.ITypeLib**,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.GetContainingTypeLib(Windows.Win32.System.Com.ITypeLib**,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.GetContainingTypeLib(Windows.Win32.System.Com.ITypeLib**,System.UInt32*)">
            <summary>Retrieves the containing type library and the index of the type description within that type library.</summary>
            <param name="ppTLib">The containing type library.</param>
            <param name="pIndex">The index of the type description within the containing type library.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-itypeinfo-getcontainingtypelib">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.ReleaseTypeAttr(Windows.Win32.System.Com.TYPEATTR@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.ReleaseTypeAttr(Windows.Win32.System.Com.TYPEATTR*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.ReleaseTypeAttr(Windows.Win32.System.Com.TYPEATTR*)">
            <summary>Releases a TYPEATTR previously returned by ITypeInfo::GetTypeAttr.</summary>
            <param name="pTypeAttr">The TYPEATTR to be freed.</param>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-itypeinfo-releasetypeattr">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.ReleaseFuncDesc(Windows.Win32.System.Com.FUNCDESC@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.ReleaseFuncDesc(Windows.Win32.System.Com.FUNCDESC*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.ReleaseFuncDesc(Windows.Win32.System.Com.FUNCDESC*)">
            <summary>Releases a FUNCDESC previously returned by ITypeInfo::GetFuncDesc.</summary>
            <param name="pFuncDesc">The FUNCDESC to be freed.</param>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-itypeinfo-releasefuncdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.ReleaseVarDesc(Windows.Win32.System.Com.VARDESC@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.ReleaseVarDesc(Windows.Win32.System.Com.VARDESC*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeInfo.ReleaseVarDesc(Windows.Win32.System.Com.VARDESC*)">
            <summary>Releases a VARDESC previously returned by ITypeInfo::GetVarDesc.</summary>
            <param name="pVarDesc">The VARDESC to be freed.</param>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-itypeinfo-releasevardesc">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.ITypeInfo.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{00020401-0000-0000-c000-000000000046}</value>
        </member>
        <member name="M:Windows.Win32.System.Com.IUnknown.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IUnknown.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Windows.Win32.System.Com.IUnknown.QueryInterface(System.Guid*,System.Void**)" -->
        <member name="M:Windows.Win32.System.Com.IUnknown.AddRef">
            <summary>Increments the reference count for an interface pointer to a COM object. You should call this method whenever you make a copy of an interface pointer.</summary>
            <returns>The method returns the new reference count. This value is intended to be used only for test purposes.</returns>
            <remarks>
            <para>A COM object uses a per-interface reference-counting mechanism to ensure that the object doesn't outlive references to it. You use **AddRef** to stabilize a copy of an interface pointer. It can also be called when the life of a cloned pointer must extend beyond the lifetime of the original pointer. The cloned pointer must be released by calling [IUnknown::Release](/windows/desktop/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void)) on it. The internal reference counter that **AddRef** maintains should be a 32-bit unsigned integer.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/unknwn/nf-unknwn-iunknown-addref#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IUnknown.Release">
            <summary>Decrements the reference count for an interface on a COM object.</summary>
            <returns>The method returns the new reference count. This value is intended to be used only for test purposes.</returns>
            <remarks>
            <para>When the reference count on an object reaches zero, **Release** must cause the interface pointer to free itself. When the released pointer is the only (formerly) outstanding reference to an object (whether the object supports single or multiple interfaces), the implementation must free the object. Note that aggregation of objects restricts the ability to recover interface pointers.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/unknwn/nf-unknwn-iunknown-release#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.IUnknown.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{00000000-0000-0000-c000-000000000046}</value>
        </member>
        <member name="T:Windows.Win32.System.Com.SAFEARRAY">
            <summary>Represents a safe array.</summary>
            <remarks>
            <para>The array <b>rgsabound</b> is stored with the left-most dimension in rgsabound[0] and the right-most dimension in <c>rgsabound[cDims - 1]</c>. If an array was specified in a C-like syntax as a [2][5], it would have two elements in the <b>rgsabound</b> vector. Element 0 has an <b>lLbound</b> of 0 and a <b>cElements</b> of 2. Element 1 has an <b>lLbound</b> of 0 and a <b>cElements</b> of 5.</para>
            <para>The <b>fFeatures</b> flags describe attributes of an array that can affect how the array is released. The <b>fFeatures</b> field describes what type of data is stored in the <b>SAFEARRAY</b> and how the array is allocated. This allows freeing the array without referencing its containing variant.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/ns-oaidl-safearray#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.SAFEARRAY.GetBounds(System.Int32)">
            <summary>
             Gets the <see cref="T:Windows.Win32.System.Com.SAFEARRAYBOUND"/> of the <paramref name="dimension"/>.
            </summary>
        </member>
        <member name="M:Windows.Win32.System.Com.SAFEARRAY.CreateEmpty(Windows.Win32.System.Variant.VARENUM)">
            <summary>
             Creates an empty one-dimensional SAFEARRAY of type <paramref name="arrayType"/>.
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.SAFEARRAY.cDims">
            <summary>The number of dimensions.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.SAFEARRAY.fFeatures">
            <summary>
            <para>Flags. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/ns-oaidl-safearray#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.SAFEARRAY.cbElements">
            <summary>The size of an array element.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.SAFEARRAY.cLocks">
            <summary>The number of times the array has been locked without a corresponding unlock.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.SAFEARRAY.pvData">
            <summary>The data.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.SAFEARRAY.rgsabound">
            <summary>One bound for each dimension.</summary>
        </member>
        <member name="M:Windows.Win32.System.Com.SAFEARRAY.SizeOf(System.Int32)">
            <summary>Computes the amount of memory that must be allocated to store this struct, including the specified number of elements in the variable length inline array at the end.</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.SafeArrayScope`1">
            <summary>
             Helper to scope lifetime of a <see cref="T:Windows.Win32.System.Com.SAFEARRAY"/> created via <see cref="M:Windows.Win32.PInvokeCore.SafeArrayCreate(Windows.Win32.System.Variant.VARENUM,System.UInt32,Windows.Win32.System.Com.SAFEARRAYBOUND*)"/>
             Destroys the <see cref="T:Windows.Win32.System.Com.SAFEARRAY"/> (if any) when disposed. Note that this scope currently only works for a one dimensional <see cref="T:Windows.Win32.System.Com.SAFEARRAY"/>.
            </summary>
            <remarks>
             <para>
              Use in a <see langword="using" /> statement to ensure the <see cref="T:Windows.Win32.System.Com.SAFEARRAY"/> gets disposed.
             </para>
             <para>
              If the <see cref="T:Windows.Win32.System.Com.SAFEARRAY"/> you are intending to scope the lifetime of has type <see cref="F:Windows.Win32.System.Variant.VARENUM.VT_UNKNOWN"/>,
              use <see cref="T:Windows.Win32.System.Com.ComSafeArrayScope`1"/> for better usability.
             </para>
            </remarks>
        </member>
        <member name="P:Windows.Win32.System.Com.SafeArrayScope`1.Item(System.Int32)">
            <remarks>
             <para>
              A copy will be made of anything that is put into the <see cref="T:Windows.Win32.System.Com.SAFEARRAY"/>
              and anything the <see cref="T:Windows.Win32.System.Com.SAFEARRAY"/> gives out is a copy and has been add ref appropriately if applicable.
              Be sure to dispose of items that are given to the <see cref="T:Windows.Win32.System.Com.SAFEARRAY"/> if necessary. All
              items given out by the <see cref="T:Windows.Win32.System.Com.SAFEARRAY"/> should be disposed.
             </para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.System.Com.StructuredStorage.CA">
            <summary>
             Untyped representation of CA* typed arrays in Windows. <see cref="T:Windows.Win32.System.Com.StructuredStorage.CAUB"/>, etc.
            </summary>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IEnumSTATSTG.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IEnumSTATSTG.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IEnumSTATSTG.Next(System.Span{Windows.Win32.System.Com.STATSTG},System.UInt32*)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IEnumSTATSTG.Next(System.UInt32,Windows.Win32.System.Com.STATSTG*,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IEnumSTATSTG.Next(System.UInt32,Windows.Win32.System.Com.STATSTG*,System.UInt32*)">
            <summary>Retrieves a specified number of STATSTG structures, that follow in the enumeration sequence.</summary>
            <param name="celt">The number of <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ns-objidl-statstg">STATSTG</a> structures requested.</param>
            <param name="rgelt">An array of <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ns-objidl-statstg">STATSTG</a> structures returned.</param>
            <param name="pceltFetched">The number of <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ns-objidl-statstg">STATSTG</a> structures  retrieved in the <i>rgelt</i> parameter.</param>
            <returns>
            <para>This method supports the following return values: </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ienumstatstg-next">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IEnumSTATSTG.Skip(System.UInt32)">
            <summary>Skips a specified number of STATSTG structures in the enumeration sequence.</summary>
            <param name="celt">The number of <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ns-objidl-statstg">STATSTG</a> structures to skip.</param>
            <returns>
            <para>This method supports the following return values: | Return code | Description | |----------------|---------------| | S_OK | The specified number of **STATSTG** structures that were successfully skipped. | | S_FALSE | The number of **STATSTG** structures skipped is less than the *celt* parameter. |</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ienumstatstg-skip">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IEnumSTATSTG.Reset">
            <summary>Resets the enumeration sequence to the beginning of the STATSTG structure array.</summary>
            <returns>
            <para>This method supports the S_OK return value. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ienumstatstg-reset">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IEnumSTATSTG.Clone(Windows.Win32.System.Com.StructuredStorage.IEnumSTATSTG**)">
            <summary>Creates a new enumerator that contains the same enumeration state as the current STATSTG structure enumerator.</summary>
            <param name="ppenum">
            <para>A pointer to the variable that receives the  <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ienumstatstg">IEnumSTATSTG</a> interface pointer. If the method is unsuccessful, the value of the <i>ppenum</i> parameter is undefined.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ienumstatstg-clone#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method supports the following return values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ienumstatstg-clone">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.StructuredStorage.IEnumSTATSTG.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{0000000d-0000-0000-c000-000000000046}</value>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.CreateStream(System.String,Windows.Win32.System.Com.STGM,System.UInt32,System.UInt32,Windows.Win32.System.Com.IStream**)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.CreateStream(Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Com.STGM,System.UInt32,System.UInt32,Windows.Win32.System.Com.IStream**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.CreateStream(Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Com.STGM,System.UInt32,System.UInt32,Windows.Win32.System.Com.IStream**)">
            <summary>Creates and opens a stream object with the specified name contained in this storage object.</summary>
            <param name="pwcsName">A pointer to a wide character null-terminated Unicode string that contains the name of the newly created stream. The name can be used later to open or reopen the stream. The name must not exceed 31 characters in length, not including the string terminator. The 000 through 01f characters, serving as the first character of the stream/storage name, are reserved for use by OLE. This is a compound file restriction, not a structured storage restriction.</param>
            <param name="grfMode">Specifies the access mode to use when opening the newly created stream. For more information and descriptions of the possible values, see <a href="https://docs.microsoft.com/windows/desktop/Stg/stgm-constants">STGM Constants</a>.</param>
            <param name="reserved1">Reserved for future use; must be zero.</param>
            <param name="reserved2">Reserved for future use; must be zero.</param>
            <param name="ppstm">
            <para>On return, pointer to the location of the new <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istream">IStream</a> interface pointer. This is only valid if the operation is successful. When an error occurs, this parameter is set to <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-createstream#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The new stream was successfully created.| |E_PENDING | Asynchronous Storage only: Part or all of the necessary data is currently unavailable. | |STG_E_ACCESSDENIED | Not enough permissions to create stream.| |STG_E_FILEALREADYEXISTS | The name specified for the stream already exists in the storage object and the *grfMode* parameter includes the value STGM_FAILIFTHERE.| |STG_E_INSUFFICIENTMEMORY | The stream was not created due to a lack of memory.| |STG_E_INVALIDFLAG | The value specified for the *grfMode* parameter is not a valid **STGM** constants value.| |STG_E_INVALIDFUNCTION | The specified combination of flags in the *grfMode* parameter is not supported; for example, when this method is called without the STGM_SHARE_EXCLUSIVE flag.| |STG_E_INVALIDNAME | Invalid value for *pwcsName*.| |STG_E_INVALIDPOINTER | The pointer specified for the stream object was invalid.| |STG_E_INVALIDPARAMETER | One of the parameters was invalid.| |STG_E_REVERTED | The storage object has been invalidated by a revert operation above it in the transaction tree.| |STG_E_TOOMANYOPENFILES | The stream was not created because there are too many open files.|</para>
            </returns>
            <remarks>
            <para>If a stream with the name specified in the <i>pwcsName</i> parameter already exists and the <i>grfMode</i> parameter includes the STGM_CREATE flag, the existing stream is replaced by a newly created one. Both the destruction of the old stream and the creation of the new stream object are subject to the transaction mode on the parent storage object. The COM-provided compound file implementation of the <b>IStorage::CreateStream</b> method does not support the following behaviors: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-createstream#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.OpenStream(System.String,Windows.Win32.System.Com.STGM,System.UInt32,Windows.Win32.System.Com.IStream**)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.OpenStream(Windows.Win32.Foundation.PCWSTR,System.Void*,Windows.Win32.System.Com.STGM,System.UInt32,Windows.Win32.System.Com.IStream**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.OpenStream(Windows.Win32.Foundation.PCWSTR,System.Void*,Windows.Win32.System.Com.STGM,System.UInt32,Windows.Win32.System.Com.IStream**)">
            <summary>Opens an existing stream object within this storage object in the specified access mode.</summary>
            <param name="pwcsName">A pointer to a wide character null-terminated Unicode string that contains the name of the stream to open. The 000 through 01f characters, serving as the first character of the stream/storage name, are reserved for use by OLE. This is a compound file restriction, not a structured storage restriction.</param>
            <param name="reserved1">Reserved for future use; must be <b>NULL</b>.</param>
            <param name="grfMode">Specifies the access mode to be assigned to the open stream. For more information and descriptions of possible values, see <a href="https://docs.microsoft.com/windows/desktop/Stg/stgm-constants">STGM Constants</a>.  Other modes you choose must at least specify STGM_SHARE_EXCLUSIVE when calling this method in the compound file implementation.</param>
            <param name="reserved2">Reserved for future use; must be zero.</param>
            <param name="ppstm">
            <para>A pointer to <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istream">IStream</a> pointer variable that receives the interface pointer to the newly opened stream object. If an error occurs, *<i>ppstm</i> must be set to <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-openstream#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The stream was successfully opened.| |E_PENDING | Asynchronous Storage only: Part or all of the stream data is currently unavailable. | |STG_E_ACCESSDENIED | Not enough permissions to open stream.| |STG_E_FILENOTFOUND | The stream with specified name does not exist.| |STG_E_INSUFFICIENTMEMORY | The stream was not opened due to a lack of memory.| |STG_E_INVALIDFLAG | The value specified for the *grfMode* parameter is not a valid **STGM** constants value.| |STG_E_INVALIDFUNCTION | The specified combination of flags in the *grfMode* parameter is not supported; for example, when this method is called without the STGM_SHARE_EXCLUSIVE flag.| |STG_E_INVALIDNAME | Invalid value for *pwcsName*.| |STG_E_INVALIDPOINTER | The pointer specified for the stream object was not valid.| |STG_E_INVALIDPARAMETER | One of the parameters was not valid.| |STG_E_REVERTED | The storage object has been invalidated by a revert operation above it in the transaction tree.| |STG_E_TOOMANYOPENFILES | The stream was not opened because there are too many open files.|</para>
            </returns>
            <remarks><b>IStorage::OpenStream</b> opens an existing stream object within this storage object in the access mode specified in <i>grfMode</i>. There are restrictions on the permissions that can be given in <i>grfMode</i>. For example, the permissions on this storage object restrict the permissions on its streams. In general, access restrictions on streams need to be stricter than those on their parent storages. Compound-file streams must be opened with STGM_SHARE_EXCLUSIVE.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.CreateStorage(System.String,Windows.Win32.System.Com.STGM,System.UInt32,System.UInt32,Windows.Win32.System.Com.StructuredStorage.IStorage**)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.CreateStorage(Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Com.STGM,System.UInt32,System.UInt32,Windows.Win32.System.Com.StructuredStorage.IStorage**)"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Windows.Win32.System.Com.StructuredStorage.IStorage.CreateStorage(Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Com.STGM,System.UInt32,System.UInt32,Windows.Win32.System.Com.StructuredStorage.IStorage**)" -->
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.OpenStorage(System.String,Windows.Win32.System.Com.StructuredStorage.IStorage*,Windows.Win32.System.Com.STGM,System.UInt16*@,System.UInt32,Windows.Win32.System.Com.StructuredStorage.IStorage**)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.OpenStorage(Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Com.StructuredStorage.IStorage*,Windows.Win32.System.Com.STGM,System.UInt16**,System.UInt32,Windows.Win32.System.Com.StructuredStorage.IStorage**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.OpenStorage(Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Com.StructuredStorage.IStorage*,Windows.Win32.System.Com.STGM,System.UInt16**,System.UInt32,Windows.Win32.System.Com.StructuredStorage.IStorage**)">
            <summary>Opens an existing storage object with the specified name in the specified access mode.</summary>
            <param name="pwcsName">A pointer to a wide character null-terminated Unicode string that contains the name of the storage object to open. The 000 through 01f characters, serving as the first character of the stream/storage name, are reserved for use by OLE. This is a compound file restriction, not a structured storage restriction. It is ignored if <i>pstgPriority</i> is non-<b>NULL</b>.</param>
            <param name="pstgPriority">Must be <b>NULL</b>. A non-<b>NULL</b> value will return STG_E_INVALIDPARAMETER.</param>
            <param name="grfMode">Specifies the access mode to use when opening the storage object. For descriptions of the possible values, see <a href="https://docs.microsoft.com/windows/desktop/Stg/stgm-constants">STGM Constants</a>. Other modes you choose must at least specify STGM_SHARE_EXCLUSIVE when calling this method.</param>
            <param name="snbExclude">Must be <b>NULL</b>. A non-<b>NULL</b> value will return STG_E_INVALIDPARAMETER.</param>
            <param name="reserved">Reserved for future use; must be zero.</param>
            <param name="ppstg">
            <para>When successful, pointer to the location of an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istorage">IStorage</a> pointer to the opened storage object. This parameter is set to <b>NULL</b> if an error occurs.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-openstorage#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The storage object was opened successfully.| |E_PENDING | Asynchronous Storage only: Part or all of the storage's data is currently unavailable. | |STG_E_ACCESSDENIED | Not enough permissions to open storage object.| |STG_E_FILENOTFOUND | The storage object with the specified name does not exist.| |STG_E_INSUFFICIENTMEMORY | The storage object was not opened due to a lack of memory.| |STG_E_INVALIDFLAG | The value specified for the *grfMode* parameter is not a valid **STGM** constants value.| |STG_E_INVALIDFUNCTION | The specified combination of flags in the *grfMode* parameter is not supported.| |STG_E_INVALIDNAME | Not a valid value for *pwcsName*.| |STG_E_INVALIDPOINTER | The pointer specified for the storage object was not valid.| |STG_E_INVALIDPARAMETER | One of the parameters was not valid.| |STG_E_REVERTED | The storage object has been invalidated by a revert operation above it in the transaction tree.| |STG_E_TOOMANYOPENFILES | The storage object was not created because there are too many open files.| |STG_S_CONVERTED | The existing stream with the specified name was replaced with a new storage object containing a single stream called CONTENTS. In direct mode, the new storage is immediately written to disk. In transacted mode, the new storage is written to a temporary storage in memory and later written to disk when it is committed.|</para>
            </returns>
            <remarks>
            <para>If the <i>pstgPriority</i> parameter is <b>NULL</b>, it is ignored. If the <i>pstgPriority</i> parameter is not <b>NULL</b>, it is an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istorage">IStorage</a> pointer to a previous opening of an element of the storage object, usually one that was opened in priority mode. The storage object should be closed and reopened according to <i>grfMode</i>. When the <b>IStorage::OpenStorage</b> method returns, <i>pstgPriority</i> is no longer valid. Use the value supplied in the <i>ppstg</i> parameter. Storage objects can be opened with STGM_DELETEONRELEASE, in which case the object is destroyed when it receives its final release. This is useful for creating temporary storage objects.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-openstorage#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.CopyTo(System.ReadOnlySpan{System.Guid},System.UInt16**,Windows.Win32.System.Com.StructuredStorage.IStorage*)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.CopyTo(System.UInt32,System.Guid*,System.UInt16**,Windows.Win32.System.Com.StructuredStorage.IStorage*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.CopyTo(System.UInt32,System.Guid*,System.UInt16**,Windows.Win32.System.Com.StructuredStorage.IStorage*)">
            <summary>Copies the entire contents of an open storage object to another storage object.</summary>
            <param name="ciidExclude">The number of elements in the array pointed to by <i>rgiidExclude</i>. If <i>rgiidExclude</i> is <b>NULL</b>, then <i>ciidExclude</i> is ignored.</param>
            <param name="rgiidExclude">
            <para>An array of interface identifiers (IIDs) that either the caller knows about and does not want copied or that the storage object does not support, but whose state the caller will later explicitly copy. The array can include <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istorage">IStorage</a>, indicating that only stream objects are to be copied, and <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istream">IStream</a>, indicating that only storage objects are to be copied. An array length of zero indicates that only the state exposed by the <b>IStorage</b> object is to be copied; all other interfaces on the object are to be ignored. Passing <b>NULL</b> indicates that all interfaces on the object are to be copied.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-copyto#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="snbExclude">
            <para>A string name block (refer to <a href="https://docs.microsoft.com/windows/desktop/Stg/snb">SNB</a>) that specifies a block of storage or stream objects that are not to be copied to the destination. These elements are not created at the destination. If <b>IID_IStorage</b> is in the <i>rgiidExclude</i> array, this parameter is ignored. This parameter may be <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-copyto#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pstgDest">
            <para>A pointer to the open storage object into which this storage object is to be copied. The destination storage object can be a different implementation of the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istorage">IStorage</a> interface from the source storage object. Thus, <b>IStorage::CopyTo</b> can use only publicly available methods of the destination storage object. If <i>pstgDest</i> is open in transacted mode, it can be reverted by calling its <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istorage-revert">IStorage::Revert</a> method.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-copyto#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The storage object was successfully copied.| |E_PENDING | Asynchronous Storage only: Part or all of the data to be copied is currently unavailable. | |STG_E_ACCESSDENIED | The destination storage object is a child of the source storage object.| |STG_E_INSUFFICIENTMEMORY | The copy was not completed due to a lack of memory.| |STG_E_INVALIDPOINTER | The pointer specified for the storage object was not valid.| |STG_E_INVALIDPARAMETER | One of the parameters was not valid.| |STG_E_TOOMANYOPENFILES | The copy was not completed because there are too many open files.| |STG_E_REVERTED | The storage object has been invalidated by a revert operation above it in the transaction tree.| |STG_E_MEDIUMFULL | The copy was not completed because the storage medium is full.|</para>
            </returns>
            <remarks>
            <para>This method merges elements contained in the source storage object with those already present in the destination. The layout of the destination storage object may differ from the source storage object. The copy process is recursive, invoking <b>IStorage::CopyTo</b> and <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istream-copyto">IStream::CopyTo</a> on the elements nested inside the source. When copying a stream on top of an existing stream with the same name, the existing stream is first removed and then replaced with the source stream. When copying a storage on top of an existing storage with the same name, the existing storage is not removed. As a result, after the copy operation, the destination <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istorage">IStorage</a> contains older elements, unless they were replaced by newer ones with the same names. A storage object may expose interfaces other than <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istorage">IStorage</a>, including <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-irootstorage">IRootStorage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/propidl/nn-propidl-ipropertystorage">IPropertyStorage</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/propidl/nn-propidl-ipropertysetstorage">IPropertySetStorage</a>. The <i>rgiidExclude</i> parameter permits the exclusion of any or all of these additional interfaces from the copy operation. A caller with a newer or more efficient copy of an existing substorage or stream object may want to exclude the current versions of these objects from the copy operation. The <i>snbExclude</i> and <i>rgiidExclude</i> parameters provide two ways of excluding a storage objects existing storages or streams. <h3><a id="Note_to_Callers"></a><a id="note_to_callers"></a><a id="NOTE_TO_CALLERS"></a>Note to Callers</h3> The most common way to use the <b>IStorage::CopyTo</b> method is to copy everything from the source to the destination, as in most full-save and save-as operations. The following  example code shows how to copy everything  from the source storage object to the destination storage object.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-copyto#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.MoveElementTo(System.String,Windows.Win32.System.Com.StructuredStorage.IStorage*,System.String,System.UInt32)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.MoveElementTo(Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Com.StructuredStorage.IStorage*,Windows.Win32.Foundation.PCWSTR,System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.MoveElementTo(Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Com.StructuredStorage.IStorage*,Windows.Win32.Foundation.PCWSTR,System.UInt32)">
            <summary>The MoveElementTo method copies or moves a substorage or stream from this storage object to another storage object.</summary>
            <param name="pwcsName">Pointer to a wide character null-terminated Unicode string that contains the name of the element in this storage object to be moved or copied.</param>
            <param name="pstgDest"><a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istorage">IStorage</a> pointer to the destination storage object.</param>
            <param name="pwcsNewName">Pointer to a wide character null-terminated unicode string that contains the new name for the element in its new storage object.</param>
            <param name="grfFlags">
            <para>Specifies whether the operation should be a move (STGMOVE_MOVE) or a copy (STGMOVE_COPY). See the <a href="https://docs.microsoft.com/windows/desktop/api/wtypes/ne-wtypes-stgmove">STGMOVE</a> enumeration.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-moveelementto#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The storage object was successfully copied or moved.| |E_PENDING | Asynchronous Storage only: Part or all of the element's data is currently unavailable. | |STG_E_ACCESSDENIED | The destination storage object is a child of the source storage object. Or, the destination object and element name are the same as the source object and element name. In other words, you cannot move an element to itself.| |STG_E_FILENOTFOUND | The element with the specified name does not exist.| |STG_E_FILEALREADYEXISTS | The specified file already exists.| |STG_E_INSUFFICIENTMEMORY | The copy or move was not completed due to a lack of memory.| |STG_E_INVALIDFLAG | The value for the *grfFlags* parameter is not valid.| |STG_E_INVALIDNAME | Not a valid value for *pwcsName*.| |STG_E_INVALIDPOINTER | The pointer specified for the storage object was not valid.| |STG_E_INVALIDPARAMETER | One of the parameters was not valid.| |STG_E_REVERTED | The storage object has been invalidated by a revert operation above it in the transaction tree.| |STG_E_TOOMANYOPENFILES | The copy or move was not completed because there are too many open files.|</para>
            </returns>
            <remarks>
            <para>The <b>IStorage::MoveElementTo</b> method is typically the same as invoking the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istorage-copyto">IStorage::CopyTo</a> method on the indicated element and then removing the source element. In this case, the <b>MoveElementTo</b> method uses only the publicly available functions of the destination storage object to carry out the move. If the source and destination storage objects have special knowledge about each other's implementation (they could, for example, be different instances of the same implementation), this method can be implemented more efficiently. Before calling this method, the element to be moved must be closed, and the destination storage must be open. Also, the destination object and element cannot be the same storage object/element name as the source of the move. That is, you cannot move an element to itself.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-moveelementto#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.Commit(System.UInt32)">
            <summary>The Commit method ensures that any changes made to a storage object open in transacted mode are reflected in the parent storage.</summary>
            <param name="grfCommitFlags">
            <para>Controls how the changes are committed to the storage object. See the <a href="https://docs.microsoft.com/windows/desktop/api/wtypes/ne-wtypes-stgc">STGC</a> enumeration for a definition of these values.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-commit#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | Changes to the storage object were successfully committed to the parent level. If STGC_CONSOLIDATE was specified, the storage was successfully consolidated, or the storage was already too compact to consolidate further.| |STG_S_MULTIPLEOPENS | The commit operation succeeded, but the storage could not be consolidated because it had been opened multiple times using the STGM_NOSNAPSHOT flag.| |STG_S_CANNOTCONSOLIDATE | The commit operation succeeded, but the storage could not be consolidated due to an incorrect storage mode. For compound files, the storage may have been opened using the STGM_NOSCRATCH flag, or the storage may not be the outermost transacted level.| |STG_S_CONSOLIDATIONFAILED | The commit operation succeeded, but the storage could not be consolidated due to an internal error (for example, a memory allocation failure).| |E_PENDING | Asynchronous storage only: Part or all of the data to be committed is currently unavailable.| |STG_E_INVALIDFLAG | The value for the *grfCommitFlags* parameter is not valid.| |STG_E_INVALIDPARAMETER | One of the parameters was not valid.| |STG_E_NOTCURRENT | Another open instance of the storage object has committed changes. As a result, the current commit operation may overwrite previous changes.| |STG_E_MEDIUMFULL | No space left on device to commit.| |STG_E_TOOMANYOPENFILES | The commit operation could not be completed because there are too many open files.| |STG_E_REVERTED | The storage object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para><b>IStorage::Commit</b> makes permanent changes to a storage object that is in transacted mode, in which changes are accumulated in a buffer, and not reflected in the storage object until there is a call to this method. The alternative is to open an object in direct mode, in which changes are immediately reflected in the storage object. An object opened in the direct mode does not require calling <b>IStorage::Commit</b> to make permanent changes in the storage object. Calling the <b>IStorage::Commit</b> method on a nonroot storage opened in direct mode has no effect. Opening a root storage object in direct mode ensures that changes in memory buffers are written to the underlying storage device. The commit operation publishes the current changes in this storage object and its children to the next level up in the storage hierarchy. To undo current changes before committing them, call <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istorage-revert">IStorage::Revert</a> to roll back to the last-committed version. Calling <b>IStorage::Commit</b> has no effect on currently opened nested elements of this storage object. They remain valid and can be used. However, the <b>IStorage::Commit</b> method does not automatically commit changes to these nested elements. The commit operation publishes only known changes to the next higher level in the storage hierarchy. Thus, transactions to nested levels must be committed to this storage object before they can be committed to higher levels. In commit operations, you need to take steps to ensure that data is protected during the commit process: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-commit#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.Revert">
            <summary>The Revert method discards all changes that have been made to the storage object since the last commit operation.</summary>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The revert operation was successful.| |E_PENDING | Asynchronous Storage only: Part or all of the storage's data is currently unavailable. | |STG_E_INSUFFICIENTMEMORY | The revert operation could not be completed due to a lack of memory.| |STG_E_TOOMANYOPENFILES | The revert operation could not be completed because there are too many open files.| |STG_E_REVERTED | The storage object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para>For storage objects opened in transacted mode, the <b>IStorage::Revert</b> method discards any uncommitted changes to this storage object or changes that have been committed to this storage object from nested elements. After this method returns, any existing elements (substorages or streams) that were opened from the reverted storage object are invalid and can no longer be used. Specifying these reverted elements in any call except <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> returns the error STG_E_REVERTED This method has no effect on storage objects opened in direct mode.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-revert#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.EnumElements(Windows.Win32.System.Com.StructuredStorage.IEnumSTATSTG**)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.EnumElements(System.UInt32,System.Void*,System.UInt32,Windows.Win32.System.Com.StructuredStorage.IEnumSTATSTG**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.EnumElements(System.UInt32,System.Void*,System.UInt32,Windows.Win32.System.Com.StructuredStorage.IEnumSTATSTG**)">
            <summary>The EnumElements method retrieves a pointer to an enumerator object that can be used to enumerate the storage and stream objects contained within this storage object.</summary>
            <param name="reserved1">Reserved for future use; must be zero.</param>
            <param name="reserved2">Reserved for future use; must be <b>NULL</b>.</param>
            <param name="reserved3">Reserved for future use; must be zero.</param>
            <param name="ppenum">
            <para>Pointer to <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ienumstatstg">IEnumSTATSTG</a>* pointer variable that receives the interface pointer to the new enumerator object.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-enumelements#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The enumerator object was successfully returned.| |E_PENDING | Asynchronous Storage only: Part or all of the element's data is currently unavailable.| |STG_E_INSUFFICIENTMEMORY | The enumerator object could not be created due to lack of memory.| |STG_E_INVALIDPARAMETER | One of the parameters was not valid.| |STG_E_REVERTED | The storage object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para>The enumerator object returned by this method implements the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ienumstatstg">IEnumSTATSTG</a> interface, one of the standard enumerator interfaces that contain the <b>Next</b>, <b>Reset</b>, <b>Clone</b>, and <b>Skip</b> methods. <b>IEnumSTATSTG</b> enumerates the data stored in an array of <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ns-objidl-statstg">STATSTG</a> structures. The storage object must be open in read mode to allow the enumeration of its elements. The enumerator object is permitted to enumerate the elements in any order. The enumerator object is also permitted to treat the enumeration as a snapshot or to have the enumeration reflect the current state of the storage object.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-enumelements#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.DestroyElement(System.String)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.DestroyElement(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Windows.Win32.System.Com.StructuredStorage.IStorage.DestroyElement(Windows.Win32.Foundation.PCWSTR)" -->
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.RenameElement(System.String,System.String)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.RenameElement(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.RenameElement(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR)">
            <summary>The RenameElement method renames the specified substorage or stream in this storage object.</summary>
            <param name="pwcsOldName">
            <para>Pointer to a wide character null-terminated Unicode string that contains the name of the substorage or stream to be changed. <div class="alert"><b>Note</b>  The <i>pwcsName</i>, created in <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istorage-createstorage">CreateStorage</a> or <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istorage-createstream">CreateStream</a> must not exceed 31 characters in length, not including the string terminator.</div> <div> </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-renameelement#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pwcsNewName">
            <para>Pointer to a wide character null-terminated unicode string that contains the new name for the specified substorage or stream. <div class="alert"><b>Note</b>  The <i>pwcsName</i>, created in <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istorage-createstorage">CreateStorage</a> or <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istorage-createstream">CreateStream</a> must not exceed 31 characters in length, not including the string terminator.</div> <div> </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-renameelement#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The element was successfully renamed.| |E_PENDING | Asynchronous Storage only: Part or all of the element's data is currently unavailable.| |STG_E_ACCESSDENIED | The caller does not have enough permissions for renaming the element.| |STG_E_FILENOTFOUND | The element with the specified old name does not exist.| |STG_E_FILEALREADYEXISTS | The element specified by the new name already exists.| |STG_E_INSUFFICIENTMEMORY | The element was not renamed due to a lack of memory.| |STG_E_INVALIDNAME | Invalid value for one of the names.| |STG_E_INVALIDPOINTER | The pointer specified for the element was not valid.| |STG_E_INVALIDPARAMETER | One of the parameters was not valid.| |STG_E_REVERTED | The storage object has been invalidated by a revert operation above it in the transaction tree.| |STG_E_TOOMANYOPENFILES | The element was not renamed because there are too many open files.|</para>
            </returns>
            <remarks>
            <para><b>IStorage::RenameElement</b> renames the specified substorage or stream in this storage object. An element in a storage object cannot be renamed while it is open. The rename operation is subject to committing the changes if the storage is open in transacted mode. The <b>IStorage::RenameElement</b> method is not guaranteed to work in low memory with storage objects open in transacted mode. It may work in direct mode.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-renameelement#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.SetElementTimes(System.String,System.Runtime.InteropServices.ComTypes.FILETIME@,System.Runtime.InteropServices.ComTypes.FILETIME@,System.Runtime.InteropServices.ComTypes.FILETIME@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.SetElementTimes(Windows.Win32.Foundation.PCWSTR,System.Runtime.InteropServices.ComTypes.FILETIME*,System.Runtime.InteropServices.ComTypes.FILETIME*,System.Runtime.InteropServices.ComTypes.FILETIME*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.SetElementTimes(Windows.Win32.Foundation.PCWSTR,System.Runtime.InteropServices.ComTypes.FILETIME*,System.Runtime.InteropServices.ComTypes.FILETIME*,System.Runtime.InteropServices.ComTypes.FILETIME*)">
            <summary>The SetElementTimes method sets the modification, access, and creation times of the specified storage element, if the underlying file system supports this method.</summary>
            <param name="pwcsName">The name of the storage object element whose times are to be modified. If <b>NULL</b>, the time is set on the root storage rather than one of its elements.</param>
            <param name="pctime">Either the new creation time for the element or <b>NULL</b> if the creation time is not to be modified.</param>
            <param name="patime">Either the new access time for the element or <b>NULL</b> if the access time is not to be modified.</param>
            <param name="pmtime">Either the new modification time for the element or <b>NULL</b> if the modification time is not to be modified.</param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The time values were successfully set.| |E_PENDING | Asynchronous Storage only: Part or all of the element's data is currently unavailable.| |STG_E_ACCESSDENIED | The caller does not have enough permissions for changing the element.| |STG_E_FILENOTFOUND | The element with the specified name does not exist.| |STG_E_INSUFFICIENTMEMORY | The element was not changed due to a lack of memory.| |STG_E_INVALIDNAME | Not a valid value for the element name.| |STG_E_INVALIDPOINTER | The pointer specified for the element was not valid.| |STG_E_INVALIDPARAMETER | One of the parameters was not valid.| |STG_E_TOOMANYOPENFILES | The element was not changed because there are too many open files.| |STG_E_REVERTED | The storage object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para><b>SetElementTimes</b>  sets time statistics for the specified storage element within this storage object. Not all file systems support all the time values. This method sets those times that are supported and ignores the rest. Each time-value parameter can be <b>NULL</b>; indicating that no modification should occur. Call the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istorage-stat">IStorage::Stat</a> method to retrieve these time values.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-setelementtimes#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.SetClass(System.Guid@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.SetClass(System.Guid*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.SetClass(System.Guid*)">
            <summary>The SetClass method assigns the specified class identifier (CLSID) to this storage object.</summary>
            <param name="clsid">The CLSID that is to be associated with the storage object.</param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The CLSID was successfully assigned.| |E_PENDING | Asynchronous Storage only: Part or all of the storage's data is currently unavailable.| |STG_E_ACCESSDENIED | The caller does not have enough permissions for assigning a CLSID to the storage object.| |STG_E_MEDIUMFULL | Not enough space was left on device to complete the operation.| |STG_E_REVERTED | The storage object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para>When first created, a storage object has an associated CLSID of CLSID_NULL. Call <b>SetClass</b> to assign a CLSID to the storage object. Call the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istorage-stat">IStorage::Stat</a> method to retrieve the current CLSID of a storage object.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-setclass#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.SetStateBits(System.UInt32,System.UInt32)">
            <summary>The SetStateBits method stores up to 32 bits of state information in this storage object.</summary>
            <param name="grfStateBits">Specifies the new values of the bits to set. No legal values are defined for these bits; they are all reserved for future use and must not be used by applications.</param>
            <param name="grfMask">A binary mask indicating which bits in <i>grfStateBits</i> are significant in this call.</param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The state information was successfully set.| |E_PENDING | Asynchronous Storage only: Part or all of the storage's data is currently unavailable. | |STG_E_ACCESSDENIED | The caller does not have enough permissions for changing this storage object.| |STG_E_INVALIDFLAG | The value for the grfStateBits or *grfMask* parameter is not valid.| |STG_E_INVALIDPARAMETER | One of the parameters was not valid.|</para>
            </returns>
            <remarks>The values for the state bits are not currently defined.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.Stat(Windows.Win32.System.Com.STATSTG@,System.UInt32)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.Stat(Windows.Win32.System.Com.STATSTG*,System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.StructuredStorage.IStorage.Stat(Windows.Win32.System.Com.STATSTG*,System.UInt32)">
            <summary>The Stat method retrieves the STATSTG structure for this open storage object.</summary>
            <param name="pstatstg">
            <para>On return, pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ns-objidl-statstg">STATSTG</a> structure where this method places information about the open storage object. This parameter is <b>NULL</b> if an error occurs.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-stat#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="grfStatFlag">
            <para>Specifies that some of the members in the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ns-objidl-statstg">STATSTG</a> structure are not returned, thus saving a memory allocation operation. Values are taken from the <a href="https://docs.microsoft.com/windows/desktop/api/wtypes/ne-wtypes-statflag">STATFLAG</a> enumeration.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-stat#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The STATSTG structure was successfully returned at the specified location.| |E_PENDING | Asynchronous Storage only: Part or all of the storage's data is currently unavailable.| |STG_E_ACCESSDENIED | The caller does not have enough permissions for accessing statistics for this storage object.| |STG_E_INSUFFICIENTMEMORY | The STATSTG structure was not returned due to a lack of memory.| |STG_E_INVALIDFLAG | The value for the *grfStateFlag* parameter is not valid.| |STG_E_INVALIDPARAMETER | One of the parameters was not valid.|</para>
            </returns>
            <remarks>
            <para><b>IStorage::Stat</b> retrieves the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ns-objidl-statstg">STATSTG</a> structure for the current storage object. The <b>STATSTG</b> structure contains statistical information about the storage object. <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istorage-enumelements">IStorage::EnumElements</a> returns a pointer to an enumerator object. The enumerator object returned by this method implements the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ienumstatstg">IEnumSTATSTG</a> interface, through which the data stored in the array of the <b>STATSTG</b> structures is enumerated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istorage-stat#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.StructuredStorage.IStorage.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{0000000b-0000-0000-c000-000000000046}</value>
        </member>
        <member name="T:Windows.Win32.System.Com.StructuredStorage.PROPVARIANT">
            <summary>The PROPVARIANT structure is used in the ReadMultiple and WriteMultiple methods of IPropertyStorage to define the type tag and the value of a property in a property set.</summary>
            <remarks>
            <para>The <b>PROPVARIANT</b> structure can also hold a value of <b>VT_DECIMAL</b>:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/propidlbase/ns-propidlbase-propvariant#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.System.Com.BINDPTR">
            <summary>Describes a pointer.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/ns-oaidl-bindptr">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.BINDPTR.lpfuncdesc">
            <summary>Pointer to a function.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.BINDPTR.lpvardesc">
            <summary>Pointer to a variable, constant, or data member.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.BINDPTR.lptcomp">
            <summary>The <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypecomp">ITypeComp</a> that binds the pointer.</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.BLOB">
            <summary>The BLOB structure (nspapi.h), which is derived from Binary Large Object, contains information about a block of data.</summary>
            <remarks>
            <para>The structure name <b>BLOB</b> comes from the acronym BLOB, which stands for Binary Large Object. This structure does not describe the nature of the data pointed to by <b>pBlobData</b>. <div class="alert"><b>Note</b>  Windows Sockets defines a similar <b>BLOB</b> structure in Wtypes.h. Using both header files in the same source code file creates redefinition–compile time errors.</div> <div> </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/nspapi/ns-nspapi-blob#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.BLOB.cbSize">
            <summary>Size of the block of data pointed to by <b>pBlobData</b>, in bytes.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.BLOB.pBlobData">
            <summary>Pointer to a block of data.</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.CALLCONV">
            <summary>Identifies the calling convention used by a member function described in the METHODDATA structure.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/ne-oaidl-callconv">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.CALLCONV.CC_FASTCALL">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CALLCONV.CC_CDECL">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CALLCONV.CC_MSCPASCAL">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CALLCONV.CC_PASCAL">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CALLCONV.CC_MACPASCAL">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CALLCONV.CC_STDCALL">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CALLCONV.CC_FPFASTCALL">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CALLCONV.CC_SYSCALL">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CALLCONV.CC_MPWCDECL">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CALLCONV.CC_MPWPASCAL">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CALLCONV.CC_MAX">
            <summary></summary>
        </member>
        <member name="T:Windows.Win32.System.Com.CLSCTX">
            <summary>Values that are used in activation calls to indicate the execution contexts in which an object is to be run.</summary>
            <remarks>
            <para>Values from the <b>CLSCTX</b> enumeration are used in activation calls (<a href="https://docs.microsoft.com/windows/desktop/api/combaseapi/nf-combaseapi-cocreateinstance">CoCreateInstance</a>, <a href="https://docs.microsoft.com/windows/desktop/api/combaseapi/nf-combaseapi-cocreateinstanceex">CoCreateInstanceEx</a>, <a href="https://docs.microsoft.com/windows/desktop/api/combaseapi/nf-combaseapi-cogetclassobject">CoGetClassObject</a>, and so on) to indicate the preferred execution contexts (in-process, local, or remote) in which an object is to be run. They are also used in calls to <a href="https://docs.microsoft.com/windows/desktop/api/combaseapi/nf-combaseapi-coregisterclassobject">CoRegisterClassObject</a> to indicate the set of execution contexts in which a class object is to be made available for requests to construct instances (<b>IClassFactory::CreateInstance</b>). To indicate that more than one context is acceptable, you can combine multiple values with Boolean ORs. The contexts are tried in the order in which they are listed.</para>
            <para>Given a set of <b>CLSCTX</b> flags, the execution context to be used depends on the availability of registered class codes and other parameters according to the following algorithm.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypesbase/ne-wtypesbase-clsctx#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_INPROC_SERVER">
            <summary>The code that creates and manages objects of this class is a DLL that runs in the same process as the caller of the function specifying the class context.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_INPROC_HANDLER">
            <summary>The code that manages objects of this class is an in-process handler. This is a DLL that runs in the client process and implements client-side structures of this class when instances of the class are accessed remotely.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_LOCAL_SERVER">
            <summary>The EXE code that creates and manages objects of this class runs on same machine but is loaded in a separate process space.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_INPROC_SERVER16">
            <summary>Obsolete.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_REMOTE_SERVER">
            <summary>A remote context. The <a href="https://docs.microsoft.com/windows/desktop/com/localserver32">LocalServer32</a> or <a href="https://docs.microsoft.com/windows/desktop/com/localservice">LocalService</a> code that creates and manages objects of this class is run on a different computer.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_INPROC_HANDLER16">
            <summary>Obsolete.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_RESERVED1">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_RESERVED2">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_RESERVED3">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_RESERVED4">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_NO_CODE_DOWNLOAD">
            <summary>Disables the downloading of code from the directory service or the Internet. This flag cannot be set at the same time as CLSCTX_ENABLE_CODE_DOWNLOAD.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_RESERVED5">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_NO_CUSTOM_MARSHAL">
            <summary>Specify if you want the activation to fail if it uses custom marshalling.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_ENABLE_CODE_DOWNLOAD">
            <summary>Enables the downloading of code from the directory service or the Internet. This flag cannot be set at the same time as CLSCTX_NO_CODE_DOWNLOAD.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_NO_FAILURE_LOG">
            <summary>
            <para>The CLSCTX_NO_FAILURE_LOG can be used to override the logging of failures in <a href="https://docs.microsoft.com/windows/desktop/api/combaseapi/nf-combaseapi-cocreateinstanceex">CoCreateInstanceEx</a>. If the ActivationFailureLoggingLevel is created, the following values can determine the status of event logging: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypesbase/ne-wtypesbase-clsctx#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_DISABLE_AAA">
            <summary>
            <para>Disables activate-as-activator (AAA) activations for this activation only. This flag overrides the setting of the EOAC_DISABLE_AAA flag from the EOLE_AUTHENTICATION_CAPABILITIES enumeration. This flag cannot be set at the same time as CLSCTX_ENABLE_AAA. Any activation where a server process would be launched under the caller's identity is known as an activate-as-activator (AAA) activation. Disabling AAA activations allows an application that runs under a privileged account (such as LocalSystem) to help prevent its identity from being used to launch untrusted components. Library applications that use activation calls should always set this flag during those calls. This helps prevent the library application from being used in an escalation-of-privilege security attack. This is the only way to disable AAA activations in a library application because the EOAC_DISABLE_AAA flag from the EOLE_AUTHENTICATION_CAPABILITIES enumeration is applied only to the server process and not to the library application. <b>Windows 2000:  </b>This flag is not supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypesbase/ne-wtypesbase-clsctx#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_ENABLE_AAA">
            <summary>
            <para>Enables activate-as-activator (AAA) activations for this activation only. This flag overrides the setting of the EOAC_DISABLE_AAA flag from the EOLE_AUTHENTICATION_CAPABILITIES enumeration. This flag cannot be set at the same time as CLSCTX_DISABLE_AAA. Any activation where a server process would be launched under the caller's identity is known as an activate-as-activator (AAA) activation. Enabling this flag allows an application to transfer its identity to an activated component. <b>Windows 2000:  </b>This flag is not supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypesbase/ne-wtypesbase-clsctx#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_FROM_DEFAULT_CONTEXT">
            <summary>Begin this activation from the default context of the current apartment.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_ACTIVATE_X86_SERVER">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_ACTIVATE_32_BIT_SERVER">
            <summary>Activate or connect to a 32-bit version of the server; fail if one is not registered.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_ACTIVATE_64_BIT_SERVER">
            <summary>Activate or connect to a 64 bit version of the server; fail if one is not registered.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_ENABLE_CLOAKING">
            <summary>
            <para>When this flag is specified, COM uses the impersonation token of the thread, if one is present, for the activation request made by the thread. When this flag is not specified or if the thread does not have an impersonation token, COM uses the process token of the thread's process for the activation request made by the thread.</para>
            <para><b>Windows Vista or later:  </b>This flag is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypesbase/ne-wtypesbase-clsctx#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_APPCONTAINER">
            <summary>
            <para>Indicates activation is for an app container.</para>
            <para><div class="alert"><b>Note</b>  This flag is reserved for internal use and is not intended to be used directly from your code.</div> <div> </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypesbase/ne-wtypesbase-clsctx#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_ACTIVATE_AAA_AS_IU">
            <summary>
            <para>Specify this flag for Interactive User activation behavior for As-Activator servers. A strongly named Medium IL Windows Store app can use this flag to launch an "As Activator" COM server without a strong name. Also, you can use this flag to bind to a running instance of the COM server that's launched by a desktop application. The client must be Medium IL, it must be strongly named, which means that it has a SysAppID in the client token, it can't be in session 0,  and it must have the same user as the session ID's user in the client token. If  the server is out-of-process and "As Activator", it launches the server with the token of the client token's session user. This token won't be strongly named. If the server is out-of-process and RunAs "Interactive User", this flag has no effect. If the server is out-of-process and is any other RunAs type, the activation fails. This flag has no effect for in-process servers. Off-machine activations fail when they use this flag.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypesbase/ne-wtypesbase-clsctx#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_RESERVED6">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_ACTIVATE_ARM32_SERVER">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_PS_DLL">
            <summary>
            <para>Used for loading Proxy/Stub DLLs.</para>
            <para><div class="alert"><b>Note</b>  This flag is reserved for internal use and is not intended to be used directly from your code.</div> <div> </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypesbase/ne-wtypesbase-clsctx#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.System.Com.DESCKIND">
            <summary>Identifies the type description being bound to.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/ne-oaidl-desckind">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.DESCKIND.DESCKIND_NONE">
            <summary>No match was found.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.DESCKIND.DESCKIND_FUNCDESC">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/oaidl/ns-oaidl-funcdesc">FUNCDESC</a> was returned.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.DESCKIND.DESCKIND_VARDESC">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/oaidl/ns-oaidl-vardesc">VARDESC</a> was returned.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.DESCKIND.DESCKIND_TYPECOMP">
            <summary>A TYPECOMP was returned.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.DESCKIND.DESCKIND_IMPLICITAPPOBJ">
            <summary>An IMPLICITAPPOBJ was returned.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.DESCKIND.DESCKIND_MAX">
            <summary>The end of the enum.</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.DISPPARAMS">
            <summary>Contains the arguments passed to a method or property.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/ns-oaidl-dispparams">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.DISPPARAMS.rgvarg">
            <summary>
            <para>An array of arguments. **Note**: these arguments appear in reverse order</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/ns-oaidl-dispparams#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.DISPPARAMS.rgdispidNamedArgs">
            <summary>The dispatch IDs of the named arguments.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.DISPPARAMS.cArgs">
            <summary>The number of arguments.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.DISPPARAMS.cNamedArgs">
            <summary>The number of named arguments.</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.ELEMDESC">
            <summary>The ELEMDESC structure contains the type description and process-transfer information for a variable, a function, or a function parameter. (ELEMDESC)</summary>
            <remarks></remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.ELEMDESC.tdesc">
            <summary>The type of the element.</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.EXCEPINFO">
            <summary>Describes an exception that occurred during IDispatch::Invoke.</summary>
            <remarks>
            <para>Use the <b>pfnDeferredFillIn</b> field to enable an object to defer filling in the <b>bstrDescription</b>, <b>bstrHelpFile</b>, and <b>dwHelpContext</b> fields until they are needed. This field might be used, for example, if loading the string for the error is a time-consuming operation. To use deferred fill-in, the object puts a function pointer in this slot and does not fill any of the other fields except <b>wCode</b>, which is required. To get additional information, the caller passes the <b>EXCEPINFO</b> structure back to the <b>pexcepinfo</b> callback function, which fills in the additional information. When the ActiveX object and the ActiveX client are in different processes, the ActiveX object calls <b>pfnDeferredFillIn</b> before returning to the controller.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/ns-oaidl-excepinfo#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.EXCEPINFO.wCode">
            <summary>The error code. Error codes should be greater than 1000. Either this field or the scode field must be filled in; the other must be set to 0.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.EXCEPINFO.wReserved">
            <summary>Reserved. Should be 0.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.EXCEPINFO.bstrSource">
            <summary>The name of the exception source. Typically, this is an application name. This field should be filled in by the implementer of <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-idispatch">IDispatch</a>.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.EXCEPINFO.bstrDescription">
            <summary>The exception description to display. If no description is available, use null.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.EXCEPINFO.bstrHelpFile">
            <summary>The fully qualified help file path. If no Help is available, use null.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.EXCEPINFO.dwHelpContext">
            <summary>The help context ID.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.EXCEPINFO.pvReserved">
            <summary>Reserved. Must be null.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.EXCEPINFO.pfnDeferredFillIn">
            <summary>Provides deferred fill-in. If deferred fill-in is not desired, this field should be set to null.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.EXCEPINFO.scode">
            <summary>A return value that describes the error. Either this field or wCode (but not both) must be filled in; the other must be set to 0. (16-bit Windows versions only.)</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.FUNCDESC">
            <summary>Describes a function. (FUNCDESC)</summary>
            <remarks>
            <para>The <b>cParams</b> field specifies the total number of required and optional parameters.</para>
            <para>The <b>cParamsOpt</b> field specifies the form of optional parameters accepted by the function, as follows: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/ns-oaidl-funcdesc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCDESC.memid">
            <summary>The function member ID.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCDESC.lprgscode">
            <summary>The status code.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCDESC.lprgelemdescParam">
            <summary>Description of the element.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCDESC.funckind">
            <summary>Indicates the type of function (virtual, static, or dispatch-only).</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCDESC.invkind">
            <summary>The invocation type. Indicates whether this is a property function, and if so, which type.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCDESC.callconv">
            <summary>The calling convention.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCDESC.cParams">
            <summary>The total number of parameters.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCDESC.cParamsOpt">
            <summary>The number of optional parameters.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCDESC.oVft">
            <summary>For FUNC_VIRTUAL, specifies the offset in the VTBL.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCDESC.cScodes">
            <summary>The number of possible return values.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCDESC.elemdescFunc">
            <summary>The function return type.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCDESC.wFuncFlags">
            <summary>The function flags. See <a href="https://docs.microsoft.com/windows/desktop/api/oaidl/ne-oaidl-funcflags">FUNCFLAGS</a>.</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.FUNCFLAGS">
            <summary>Specifies function flags.</summary>
            <remarks>
            <para>FUNCFLAG_FHIDDEN means that the property should never be shown in object browsers, property browsers, and so on. This function is useful for removing items from an object model. Code can bind to the member, but the user will never know that the member exists. FUNCFLAG_FNONBROWSABLE means that the property should not be displayed in a properties browser. It is used in circumstances in which an error would occur if the property were shown in a properties browser. FUNCFLAG_FRESRICTED means that macro-oriented programmers should not be allowed to access this member. These members are usually treated as _FHIDDEN by tools such as Visual Basic, with the main difference being that code cannot bind to those members.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/ne-oaidl-funcflags#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCFLAGS.FUNCFLAG_FRESTRICTED">
            <summary>The function should not be accessible from macro languages. This flag is intended for system-level functions or functions that type browsers should not display.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCFLAGS.FUNCFLAG_FSOURCE">
            <summary>The function returns an object that is a source of events.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCFLAGS.FUNCFLAG_FBINDABLE">
            <summary>The function that supports data binding.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCFLAGS.FUNCFLAG_FREQUESTEDIT">
            <summary>When set, any call to a method that sets the property results first in a call to <b>IPropertyNotifySink::OnRequestEdit</b>. The implementation of <b>OnRequestEdit</b> determines if the call is allowed to set the property.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCFLAGS.FUNCFLAG_FDISPLAYBIND">
            <summary>The function that is displayed to the user as bindable. FUNC_FBINDABLE must also be set.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCFLAGS.FUNCFLAG_FDEFAULTBIND">
            <summary>The function that best represents the object. Only one function in a type information can have this attribute.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCFLAGS.FUNCFLAG_FHIDDEN">
            <summary>The function should not be displayed to the user, although it exists and is bindable.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR">
            <summary>The function supports <b>GetLastError</b>. If an error occurs during the function, the caller can call <b>GetLastError</b> to retrieve the error code.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM">
            <summary>Permits an optimization in which the compiler looks for a member named xyz on the type of abc. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules. For more information, refer to defaultcollelem in Type Libraries and the Object Description Language.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCFLAGS.FUNCFLAG_FUIDEFAULT">
            <summary>The type information member is the default member for display in the user interface.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCFLAGS.FUNCFLAG_FNONBROWSABLE">
            <summary>The property appears in an object browser, but not in a properties browser.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCFLAGS.FUNCFLAG_FREPLACEABLE">
            <summary>Tags the interface as having default behaviors.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND">
            <summary>Mapped as individual bindable properties.</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.FUNCKIND">
            <summary>Specifies the function type.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/ne-oaidl-funckind">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCKIND.FUNC_VIRTUAL">
            <summary>The function is accessed the same as PUREVIRTUAL, except the function has an implementation.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCKIND.FUNC_PUREVIRTUAL">
            <summary>The function is accessed through the virtual function table (VTBL), and takes an implicit this pointer.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCKIND.FUNC_NONVIRTUAL">
            <summary>The function is accessed by static address and takes an implicit this pointer.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCKIND.FUNC_STATIC">
            <summary>The function is accessed by static address and does not take an implicit this pointer.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.FUNCKIND.FUNC_DISPATCH">
            <summary>The function can be accessed only through <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-idispatch">IDispatch</a>.</summary>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumUnknown.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IEnumUnknown.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumUnknown.Next(System.UInt32,Windows.Win32.System.Com.IUnknown**,System.UInt32*)">
            <summary>The IEnumUnknown::Next (objidlbase.h) method retrieves the specified number of items in the enumeration sequence.</summary>
            <param name="celt">The number of items to be retrieved. If there are fewer than the requested number of items left in the sequence, this method retrieves the remaining elements.</param>
            <param name="rgelt">
            <para>An array of enumerated items. The enumerator is responsible for calling <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a>, and the caller is responsible for calling <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a> through each pointer enumerated. If <i>celt</i> is greater than 1, the caller must also pass a non-NULL pointer passed to <i>pceltFetched</i> to know how many pointers to release.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidlbase/nf-objidlbase-ienumunknown-next#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pceltFetched">The number of items that were retrieved. This parameter is always less than or equal to the number of items requested.</param>
            <returns>If the method retrieves the number of items requested, the return value is S_OK. Otherwise, it is S_FALSE.</returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidlbase/nf-objidlbase-ienumunknown-next">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumUnknown.Skip(System.UInt32)">
            <summary>The IEnumUnknown::Skip (objidlbase.h) method skips over the specified number of items in the enumeration sequence.</summary>
            <param name="celt">The number of items to be skipped.</param>
            <returns>If the method skips the number of items requested, the return value is S_OK. Otherwise, it is S_FALSE.</returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidlbase/nf-objidlbase-ienumunknown-skip">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumUnknown.Reset">
            <summary>The IEnumUnknown::Reset (objidlbase.h) method resets the enumeration sequence to the beginning.</summary>
            <returns>The return value is S_OK.</returns>
            <remarks>There is no guarantee that the same set of objects will be enumerated after the reset operation has completed. A static collection is reset to the beginning, but it can be too expensive for some collections, such as files in a directory, to guarantee this condition.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumUnknown.Clone(Windows.Win32.System.Com.IEnumUnknown**)">
            <summary>The IEnumUnknown::Clone (objidlbase.h) method creates a new enumerator that contains the same enumeration state as the current one.</summary>
            <param name="ppenum">A pointer to the cloned enumerator object.</param>
            <returns>This method can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, E_UNEXPECTED, and S_OK.</returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidlbase/nf-objidlbase-ienumunknown-clone">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.IEnumUnknown.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{00000100-0000-0000-c000-000000000046}</value>
        </member>
        <member name="M:Windows.Win32.System.Com.IGlobalInterfaceTable.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IGlobalInterfaceTable.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IGlobalInterfaceTable.RegisterInterfaceInGlobal(Windows.Win32.System.Com.IUnknown*,System.Guid@,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IGlobalInterfaceTable.RegisterInterfaceInGlobal(Windows.Win32.System.Com.IUnknown*,System.Guid*,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IGlobalInterfaceTable.RegisterInterfaceInGlobal(Windows.Win32.System.Com.IUnknown*,System.Guid*,System.UInt32*)">
            <summary>Registers the specified interface on an object residing in one apartment of a process as a global interface, enabling other apartments access to that interface.</summary>
            <param name="pUnk">An interface pointer of type <i>riid</i> on the object on which the interface to be registered as global is implemented.</param>
            <param name="riid">The IID of the interface to be registered as global.</param>
            <param name="pdwCookie">An identifier that can be used by another apartment to get access to a pointer to the interface being registered. The value of an invalid cookie is 0.</param>
            <returns>
            <para>This method can return the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>Called in the apartment in which an object resides to register one of the object's interfaces as a global interface. This method supplies a pointer to a cookie that other apartments can use in a call to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-iglobalinterfacetable-getinterfacefromglobal">GetInterfaceFromGlobal</a> method to get a pointer to that interface. The interface pointer may be a pointer to an in-process object, or it may be a pointer to a proxy for an object residing in another apartment, in another process, or on another computer. The apartment that calls this method must remain alive until the corresponding call to <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-iglobalinterfacetable-revokeinterfacefromglobal">RevokeInterfaceFromGlobal</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidlbase/nf-objidlbase-iglobalinterfacetable-registerinterfaceinglobal#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IGlobalInterfaceTable.RevokeInterfaceFromGlobal(System.UInt32)">
            <summary>Revokes the registration of an interface in the global interface table.</summary>
            <param name="dwCookie">Identifies the interface whose global registration is to be revoked.</param>
            <returns>
            <para>This method can return the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>Call this method when an interface registered in the global interface table object no longer needs to be accessed by other apartments in the same process. This method can be called by any apartment in the process, including apartments other than the one that registered the interface in the global interface table.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IGlobalInterfaceTable.GetInterfaceFromGlobal(System.UInt32,System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IGlobalInterfaceTable.GetInterfaceFromGlobal(System.UInt32,System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IGlobalInterfaceTable.GetInterfaceFromGlobal(System.UInt32,System.Guid*,System.Void**)">
            <summary>Retrieves a pointer to an interface on an object that is usable by the calling apartment. This interface must be currently registered in the global interface table.</summary>
            <param name="dwCookie">Identifies the interface (and its object), and is retrieved through a call to <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-iglobalinterfacetable-registerinterfaceinglobal">IGlobalInterfaceTable::RegisterInterfaceInGlobal</a>.</param>
            <param name="riid">The IID of the interface.</param>
            <param name="ppv">A pointer to the pointer for the requested interface.</param>
            <returns>
            <para>This method can return the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>After an interface has been registered in the global interface table, an apartment can get a pointer to this interface by calling the <b>GetInterfaceFromGlobal</b> method with the supplied cookie. This pointer to the interface can be used in the calling apartment but not by other apartments in the process. The application is responsible for coordinating access to the global variable during calls to <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-iglobalinterfacetable-revokeinterfacefromglobal">IGlobalInterfaceTable::RevokeInterfaceFromGlobal</a>. That is, the application should ensure that one thread does not call <b>RevokeInterfaceFromGlobal</b> while another thread is calling <b>GetInterfaceFromGlobal</b> with the same cookie. Multiple calls to <b>GetInterfaceFromGlobal</b> for the same cookie are permitted. The <b>GetInterfaceFromGlobal</b> method calls <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the pointer obtained in the <i>ppv</i> parameter. It is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a> on this pointer.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidlbase/nf-objidlbase-iglobalinterfacetable-getinterfacefromglobal#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.IGlobalInterfaceTable.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{00000146-0000-0000-c000-000000000046}</value>
        </member>
        <member name="T:Windows.Win32.System.Com.INVOKEKIND">
            <summary>Specifies the way a function is invoked.</summary>
            <remarks>In C, value assignment is written as *pobj1 = *pobj2, while reference assignment is written as pobj1 = pobj2. Other languages have other syntactic conventions. A property or data member can support only a value assignment, a reference assignment, or both. The INVOKEKIND enumeration constants are the same constants that are passed to <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-idispatch-invoke">IDispatch::Invoke</a> to specify the way in which a function is invoked.</remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.INVOKEKIND.INVOKE_FUNC">
            <summary>The member is called using a normal function invocation syntax.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.INVOKEKIND.INVOKE_PROPERTYGET">
            <summary>The function is invoked using a normal property-access syntax.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.INVOKEKIND.INVOKE_PROPERTYPUT">
            <summary>The function is invoked using a property value assignment syntax. Syntactically, a typical programming language might represent changing a property in the same way as assignment. For example: object.property : = value.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.INVOKEKIND.INVOKE_PROPERTYPUTREF">
            <summary>The function is invoked using a property reference assignment syntax.</summary>
        </member>
        <member name="M:Windows.Win32.System.Com.ISequentialStream.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ISequentialStream.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ISequentialStream.Read(System.Void*,System.UInt32,System.UInt32*)">
            <summary>Reads a specified number of bytes from the stream object into memory, starting at the current seek pointer.</summary>
            <param name="pv">A pointer to the buffer which the stream data is read into.</param>
            <param name="cb">The number of bytes of data to read from the stream object.</param>
            <param name="pcbRead">
            <para>A pointer to a <b>ULONG</b> variable that receives the actual number of bytes read from the stream object. <div class="alert"><b>Note</b>  The number of bytes read may be zero.</div> <div> </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-isequentialstream-read#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | All of the requested data was successfully read from the stream object; the number of bytes requested in *cb* is the same as the number of bytes returned in *pcbRead*.| |S_FALSE | The value returned in *pcbRead* is less than the number of bytes requested in *cb*. This indicates the end of the stream has been reached. The number of bytes read indicates how much of the *pv* buffer has been filled.| |E_PENDING | Asynchronous storage only: Part or all of the data to be read is currently unavailable. | |STG_E_ACCESSDENIED | The caller does not have permissions required to read this stream object.| |STG_E_INVALIDPOINTER | One of the pointer values is invalid.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para>This method reads bytes from this stream object into memory. The stream object must be opened in <b>STGM_READ</b> mode. This method adjusts the seek pointer by the actual number of bytes read. The number of bytes actually read is also returned in the <i>pcbRead</i> parameter. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> The actual number of bytes read can be less than the number of bytes requested if an error occurs or if the end of the stream is reached during the read operation.  The number of bytes returned should always  be compared to the number of bytes requested.  If the number of bytes returned is less than the number of bytes requested, it usually means the <b>Read</b> method attempted to read  past the end of the stream. The application should handle both a returned error  and <b>S_OK</b> return values on end-of-stream read operations.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-isequentialstream-read#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ISequentialStream.Write(System.Void*,System.UInt32,System.UInt32*)">
            <summary>Writes a specified number of bytes into the stream object starting at the current seek pointer.</summary>
            <param name="pv">A pointer to the buffer that contains the data that is to be written to the stream. A valid pointer must be provided for this parameter even when <i>cb</i> is zero.</param>
            <param name="cb">The number of bytes of data to attempt to write into the stream. This value can be zero.</param>
            <param name="pcbWritten">A pointer to a <b>ULONG</b> variable where this method writes the actual number of bytes written to the stream object. The caller can set this pointer to <b>NULL</b>, in which case this method does not provide the actual number of bytes written.</param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The data was successfully written to the stream object.| |E_PENDING | Asynchronous Storage only: Part or all of the data to be written is currently unavailable.| |STG_E_MEDIUMFULL | The write operation failed because there is no space left on the storage device.| |STG_E_ACCESSDENIED | The caller does not have the required  permissions for writing to this stream object.| |STG_E_CANTSAVE | Data cannot be written for reasons other than improper access or insufficient space.| |STG_E_INVALIDPOINTER | One of the pointer values is not valid. The *pv* parameter must contain a valid pointer even if *cb* is zero.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.| |STG_E_WRITEFAULT | The write operation failed due to a disk error. This value is also returned when this method attempts to write to a stream that was opened in simple mode (using the STGM_SIMPLE flag).|</para>
            </returns>
            <remarks>
            <para><b>ISequentialStream::Write</b> writes the specified data to a stream object. The seek pointer is adjusted for the number of bytes actually written. The number of bytes actually written is returned in the <i>pcbWritten</i> parameter. If the byte count is zero bytes, the write operation has no effect. If the seek pointer is currently past the end of the stream and the byte count is nonzero, this method increases the size of the stream to the seek pointer and writes the specified bytes starting at the seek pointer. The fill bytes written to the stream are not initialized to any particular value. This is the same as the end-of-file behavior in the MS-DOS FAT file system. With a zero byte count and a seek pointer past the end of the stream, this method does not create the fill bytes to increase the stream to the seek pointer. In this case, you must call the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istream-setsize">IStream::SetSize</a> method to increase the size of the stream and write the fill bytes. The <i>pcbWritten</i> parameter can have a value even if an error occurs. In the COM-provided implementation, stream objects are not sparse. Any fill bytes are eventually allocated on the disk and assigned to the stream.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-isequentialstream-write#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.ISequentialStream.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{0c733a30-2a1c-11ce-ade5-00aa0044773d}</value>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IStream.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.Seek(System.Int64,System.IO.SeekOrigin,System.UInt64*)">
            <summary>Changes the seek pointer to a new location. The new location is relative to either the beginning of the stream, the end of the stream, or the current seek pointer.</summary>
            <param name="dlibMove">The displacement to be added to the location indicated by the <i>dwOrigin</i> parameter. If <i>dwOrigin</i> is <b>STREAM_SEEK_SET</b>, this is interpreted as an unsigned value rather than a signed value.</param>
            <param name="dwOrigin">The origin for the displacement specified in <i>dlibMove</i>. The origin can be the beginning of the file (<b>STREAM_SEEK_SET</b>), the current seek pointer (<b>STREAM_SEEK_CUR</b>), or the end of the file (<b>STREAM_SEEK_END</b>). For more information about values, see the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ne-objidl-stream_seek">STREAM_SEEK</a> enumeration.</param>
            <param name="plibNewPosition">
            <para>A pointer to the location where this method writes the value of the new seek pointer from the beginning of the stream. You can set this pointer to <b>NULL</b>. In this case, this method does not provide the new seek pointer.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-seek#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The seek pointer was successfully adjusted.| |E_PENDING | Asynchronous Storage only: Part or all of the stream data is currently unavailable. | |STG_E_INVALIDPOINTER | Indicates that *plibNewPosition* points to invalid memory, because *plibNewPosition* is not read.| |STG_E_INVALIDFUNCTION | The *dwOrigin* parameter contains an invalid value, or the *dlibMove* parameter contains a bad offset value. For example, the result of the seek pointer is a negative offset value.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para><b>IStream::Seek</b> changes the seek pointer so that subsequent read and write operations can be performed at a different location in the stream object. It is an error to seek before the beginning of the stream. It is not, however, an error to seek past the end of the stream. Seeking past the end of the stream is useful for subsequent write operations, as the stream byte range will be extended to the new seek position immediately before the write is complete. You can also use this method to obtain the current value of the seek pointer by calling this method with the <i>dwOrigin</i> parameter set to <b>STREAM_SEEK_CUR</b> and the <i>dlibMove</i> parameter set to 0 so that the seek pointer is not changed. The current seek pointer is returned in the <i>plibNewPosition</i> parameter.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-seek#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.SetSize(System.UInt64)">
            <summary>Changes the size of the stream object.</summary>
            <param name="libNewSize">Specifies the new size, in bytes, of the stream.</param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The size of the stream object was successfully changed.| |E_PENDING | Asynchronous Storage only: Part or all of the stream's data is currently unavailable.| |STG_E_MEDIUMFULL | The stream size is not changed because there is no space left on the storage device.| |STG_E_INVALIDFUNCTION | The value of the *libNewSize* parameter is not supported by the implementation. Not all streams support greater than 232 bytes. If a stream does not support more than 232 bytes, the high DWORD data type of *libNewSize* must be zero. If it is nonzero, the implementation may return STG_E_INVALIDFUNCTION. In general, COM-based implementations of the IStream interface do not support streams larger than 232 bytes.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para><b>IStream::SetSize</b> changes the size of the stream object. Call this method to preallocate space for the stream. If the <i>libNewSize</i> parameter is larger than the current stream size, the stream is extended to the indicated size by filling the intervening space with bytes of undefined value. This operation is similar to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-isequentialstream-write">ISequentialStream::Write</a> method if the seek pointer is past the current end of the stream. If the <i>libNewSize</i> parameter is smaller than the current stream, the stream is truncated to the indicated size. The seek pointer is not affected by the change in stream size. Calling <b>IStream::SetSize</b> can be an effective way to obtain a large chunk of contiguous space.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-setsize#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.CopyTo(Windows.Win32.System.Com.IStream*,System.UInt64,System.UInt64*,System.UInt64*)">
            <summary>Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream.</summary>
            <param name="pstm">A pointer to the destination stream. The stream pointed to by <i>pstm</i> can be a new stream or a clone of the source stream.</param>
            <param name="cb">The number of bytes to copy from the source stream.</param>
            <param name="pcbRead">A pointer to the location where this method writes the actual number of bytes read from the source. You can set this pointer to <b>NULL</b>. In this case, this method does not provide the actual number of bytes read.</param>
            <param name="pcbWritten">A pointer to the location where this method writes the actual number of bytes written to the destination. You can set this pointer to <b>NULL</b>. In this case, this method does not provide the actual number of bytes written.</param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The stream object was successfully copied.| |E_PENDING | Asynchronous Storage only: Part or all of the data to be copied is currently unavailable. | |STG_E_INVALIDPOINTER | The value of one of the pointer parameters is invalid.| |STG_E_MEDIUMFULL | The stream is not copied because there is no space left on the storage device.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para>The <b>CopyTo</b> method copies the specified bytes from one stream to another. It can also be used to copy a stream to itself. The seek pointer in each stream instance is adjusted for the number of bytes read or written. This method is equivalent to reading <i>cb</i> bytes into memory using <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-isequentialstream-read">ISequentialStream::Read</a> and then immediately writing them to the destination stream using <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-isequentialstream-write">ISequentialStream::Write</a>, although <b>IStream::CopyTo</b> will be more efficient. The destination stream can be a clone of the source stream created by calling the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istream-clone">IStream::Clone</a> method. If <b>IStream::CopyTo</b> returns an error, you cannot assume that the seek pointers are valid for either the source or destination. Additionally, the values of <i>pcbRead</i> and <i>pcbWritten</i> are not meaningful even though they are returned. If <b>IStream::CopyTo</b> returns successfully, the actual number of bytes read and written are the same. To copy the remainder of the source from the current seek pointer, specify the maximum large integer value for the <i>cb</i> parameter. If the seek pointer is the beginning of the stream, this operation copies the entire stream.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-copyto#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.Commit(System.UInt32)">
            <summary>The Commit method ensures that any changes made to a stream object open in transacted mode are reflected in the parent storage.</summary>
            <param name="grfCommitFlags">
            <para>Controls how the changes for the stream object are committed. See the <a href="https://docs.microsoft.com/windows/desktop/api/wtypes/ne-wtypes-stgc">STGC</a> enumeration for a definition of these values.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-commit#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | Changes to the stream object were successfully committed to the parent level.| |E_PENDING | Asynchronous Storage only: Part or all of the stream's data is currently unavailable. | |STG_E_MEDIUMFULL | The commit operation failed due to lack of space on the storage device.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para>The <b>Commit</b>  method ensures that changes to a stream object opened in transacted mode are reflected in the parent storage. Changes that have been made to the stream since it was opened or last committed are reflected to the parent storage object. If the parent is opened in transacted mode, the parent may revert at a later time, rolling back the changes to this stream object. The compound file implementation does not support the opening of streams in transacted mode, so this method has very little effect other than to flush memory buffers. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Stg/istream-compound-file-implementation">IStream - Compound File Implementation</a>. If the stream is open in direct mode, this method ensures that any memory buffers have been flushed out to the underlying storage object. This is much like a flush in traditional file systems. The <b>IStream::Commit</b> method is useful on a direct mode stream when the implementation of the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istream">IStream</a> interface is a wrapper for underlying file system APIs. In this case, <b>IStream::Commit</b> would be connected to the file system's flush call.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-commit#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.Revert">
            <summary>The Revert method discards all changes that have been made to a transacted stream since the last IStream::Commit call. On streams open in direct mode and streams using the COM compound file implementation of IStream::Revert, this method has no effect.</summary>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The stream was successfully reverted to its previous version.| |E_PENDING | Asynchronous Storage only: Part or all of the stream's data is currently unavailable. |</para>
            </returns>
            <remarks>The <b>Revert</b> method discards changes made to a transacted stream since the last commit operation.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.LockRegion(System.UInt64,System.UInt64,System.UInt32)">
            <summary>The LockRegion method restricts access to a specified range of bytes in the stream.</summary>
            <param name="libOffset">Integer that specifies the byte offset for the beginning of the range.</param>
            <param name="cb">Integer that specifies the length of the range, in bytes, to be restricted.</param>
            <param name="dwLockType">Specifies the restrictions being requested on accessing the range.</param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The specified range of bytes was locked.| |E_PENDING | Asynchronous Storage only: Part or all of the stream's data is currently unavailable. | |STG_E_INVALIDFUNCTION | Locking is not supported at all or the specific type of lock requested is not supported.| |STG_E_LOCKVIOLATION | Requested lock is supported, but cannot be granted because of an existing lock.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para>The byte range of the stream can be extended.  Locking an extended range for the stream is useful as a method of communication between different instances of the stream without changing data that is actually part of the stream. Three types of locking can be supported: locking to exclude other writers, locking to exclude other readers or writers, and locking that allows only one requester to obtain a lock on the given range, which is usually an alias for one of the other two lock types. A given stream instance might support either of the first two types, or both. The lock type is specified by <i>dwLockType</i>, using a value from the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ne-objidl-locktype">LOCKTYPE</a> enumeration. Any region locked with <b>IStream::LockRegion</b> must later be explicitly unlocked by calling <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istream-unlockregion">IStream::UnlockRegion</a> with exactly the same values for the <i>libOffset</i>, <i>cb</i>, and <i>dwLockType</i> parameters. The region must be unlocked before the stream is released. Two adjacent regions cannot be locked separately and then unlocked with a single unlock call. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> Since the type of locking supported is optional and can vary in different implementations of <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istream">IStream</a>, you must provide code to deal with the STG_E_INVALIDFUNCTION error. The <b>LockRegion</b> method has no effect in the compound file implementation, because the implementation does not support range locking. <h3><a id="Notes_to_Implementers"></a><a id="notes_to_implementers"></a><a id="NOTES_TO_IMPLEMENTERS"></a>Notes to Implementers</h3> Support for this method is optional for implementations of stream objects since it may not be supported by the underlying file system. The type of locking supported is also optional. The STG_E_INVALIDFUNCTION error is returned if the requested type of locking is not supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-lockregion#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.UnlockRegion(System.UInt64,System.UInt64,System.UInt32)">
            <summary>The UnlockRegion method removes the access restriction on a range of bytes previously restricted with IStream::LockRegion.</summary>
            <param name="libOffset">Specifies the byte offset for the beginning of the range.</param>
            <param name="cb">Specifies, in bytes, the length of the range to be restricted.</param>
            <param name="dwLockType">Specifies the access restrictions previously placed on the range.</param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The byte range was unlocked.| |E_PENDING | Asynchronous Storage only: Part or all of the stream's data is currently unavailable.| |STG_E_INVALIDFUNCTION | Locking is not supported at all or the specific type of lock requested is not supported.| |STG_E_LOCKVIOLATION | The requested unlock operation cannot be granted.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para><b>IStream::UnlockRegion</b> unlocks a region previously locked with the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istream-lockregion">IStream::LockRegion</a> method. Locked regions must later be explicitly unlocked by calling <b>IStream::UnlockRegion</b> with exactly the same values for the <i>libOffset</i>, <i>cb</i>, and <i>dwLockType</i> parameters. The region must be unlocked before the stream is released. Two adjacent regions cannot be locked separately and then unlocked with a single unlock call.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-unlockregion#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.Stat(Windows.Win32.System.Com.STATSTG@,System.UInt32)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IStream.Stat(Windows.Win32.System.Com.STATSTG*,System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.Stat(Windows.Win32.System.Com.STATSTG*,System.UInt32)">
            <summary>The Stat method retrieves the STATSTG structure for this stream.</summary>
            <param name="pstatstg">
            <para>Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ns-objidl-statstg">STATSTG</a> structure where this method places information about this stream object.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-stat#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="grfStatFlag">
            <para>Specifies that this method does not return some of the members in the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ns-objidl-statstg">STATSTG</a> structure, thus saving a memory allocation operation. Values are taken from the <a href="https://docs.microsoft.com/windows/desktop/api/wtypes/ne-wtypes-statflag">STATFLAG</a> enumeration.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-stat#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The STATSTG structure was successfully returned at the specified location.| |E_PENDING | Asynchronous Storage only: Part or all of the stream's data is currently unavailable. | |STG_E_ACCESSDENIED | The caller does not have enough permissions for accessing statistics for this storage object.| |STG_E_INSUFFICIENTMEMORY | The STATSTG structure was not returned due to a lack of memory.| |STG_E_INVALIDFLAG | The value for the *grfStateFlag* parameter is not valid.| |STG_E_INVALIDPOINTER | The *pStatStg* pointer is not valid.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para><b>IStream::Stat</b> retrieves a pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ns-objidl-statstg">STATSTG</a> structure that contains information about this open stream. When this stream is within a structured storage and <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istorage-enumelements">IStorage::EnumElements</a> is called, it creates an enumerator object with the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ienumstatstg">IEnumSTATSTG</a> interface on it, which can be called to enumerate the storages and streams through the <b>STATSTG</b> structures associated with each of them.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-stat#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.Clone(Windows.Win32.System.Com.IStream**)">
            <summary>The Clone method creates a new stream object with its own seek pointer that references the same bytes as the original stream.</summary>
            <param name="ppstm">
            <para>When successful, pointer to the location of an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istream">IStream</a> pointer to the new stream object. If an error occurs, this parameter is <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-clone#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The stream was successfully cloned.| |E_PENDING | Asynchronous Storage only: Part or all of the stream's data is currently unavailable. | |STG_E_INSUFFICIENTMEMORY | The stream was not cloned due to a lack of memory.| |STG_E_INVALIDPOINTER | The ppStm pointer is not valid.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para>The <b>Clone</b> method creates a new stream object for accessing the same bytes but using a separate seek pointer. The new stream object sees the same data as the source-stream object. Changes written to one object are immediately visible in the other. Range locking is shared between the stream objects. The initial setting of the seek pointer in the cloned stream instance is the same as the current setting of the seek pointer in the original stream at the time of the clone operation.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-clone#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.IStream.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{0000000c-0000-0000-c000-000000000046}</value>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeComp.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeComp.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeComp.Bind(Windows.Win32.Foundation.PWSTR,System.UInt32,System.UInt16,Windows.Win32.System.Com.ITypeInfo**,Windows.Win32.System.Com.DESCKIND@,Windows.Win32.System.Com.BINDPTR@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeComp.Bind(Windows.Win32.Foundation.PWSTR,System.UInt32,System.UInt16,Windows.Win32.System.Com.ITypeInfo**,Windows.Win32.System.Com.DESCKIND*,Windows.Win32.System.Com.BINDPTR*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeComp.Bind(Windows.Win32.Foundation.PWSTR,System.UInt32,System.UInt16,Windows.Win32.System.Com.ITypeInfo**,Windows.Win32.System.Com.DESCKIND*,Windows.Win32.System.Com.BINDPTR*)">
            <summary>Maps a name to a member of a type, or binds global variables and functions contained in a type library.</summary>
            <param name="szName">The name to be bound.</param>
            <param name="lHashVal">The hash value for the name computed by <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-lhashvalofnamesys">LHashValOfNameSys</a>.</param>
            <param name="wFlags">One or more of the flags defined in the INVOKEKIND enumeration. Specifies whether the name was referenced as a method or a property. When binding to a variable, specify the flag INVOKE_PROPERTYGET. Specify zero to bind to any type of member.</param>
            <param name="ppTInfo">If a FUNCDESC or VARDESC was returned, then <i>ppTInfo</i> points to a pointer to the type description that contains the item to which it is bound.</param>
            <param name="pDescKind">Indicates whether the name bound to is a VARDESC, FUNCDESC, or TYPECOMP. If there was no match, DESCKIND_NONE.</param>
            <param name="pBindPtr">The bound-to VARDESC, FUNCDESC, or <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypecomp">ITypeComp</a> interface.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>Use <b>Bind</b> for binding to the variables and methods of a type, or for binding to the global variables and methods in a type library. The returned DESCKIND pointer <i>pDescKind</i> indicates whether the name was bound to a VARDESC, a FUNCDESC, or to an <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypecomp">ITypeComp</a> instance. The returned <i>pBindPtr</i> points to the VARDESC, FUNCDESC, or <b>ITypeComp</b>. If a data member or method is bound to, then ppTInfopoints to the type description that contains the method or data member.</para>
            <para>If <b>Bind</b> binds the name to a nested binding context, it returns a pointer to an <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypecomp">ITypeComp</a> instance in <i>pBindPtr</i> and a null type description pointer in <i>ppTInfo</i>. For example, if the name of a type description is passed for a module (TKIND_MODULE), enumeration (TKIND_ENUM), or coclass (TKIND_COCLASS), Bind returns the <b>ITypeComp</b> instance of the type description for the module, enumeration, or coclass. This feature supports languages such as Visual Basic that allow references to members of a type description to be qualified by the name of the type description. For example, a function in a module can be referenced by <i>modulename</i>.<i>functionname.</i> The members of TKIND_ENUM, TKIND_MODULE, and TKIND_COCLASS types marked as Application objects can be bound to directly from <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypecomp">ITypeComp</a>, without specifying the name of the module. The <b>ITypeComp</b> of a coclass defers to the <b>ITypeComp</b> of its default interface.</para>
            <para>As with other methods of <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypecomp">ITypeComp</a>, <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</a>, and <b>ITypeInfo</b>, the calling code is responsible for releasing the returned object instances or structures. If a VARDESC or FUNCDESC is returned, the caller is responsible for deleting it with the returned type description and releasing the type description instance itself. Otherwise, if an <b>ITypeComp</b> instance is returned, the caller must release it.</para>
            <para>Special rules apply if you call a type library's <b>Bind</b> method, passing it the name of a member of an Application object class (a class that has the TYPEFLAG_FAPPOBJECT flag set). In this case, Bind returns DESCKIND_IMPLICITAPPOBJ in <i>pDescKind</i>, a VARDESC that describes the Application object in <i>pBindPtr</i>, and the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</a> of the Application object class in <i>ppTInfo</i>. To bind to the object, <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-itypeinfo-gettypecomp">ITypeInfo::GetTypeComp</a> must make a call to get the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypecomp">ITypeComp</a> of the Application object class, and then reinvoke its <b>Bind</b> method with the name initially passed to the type library's <b>ITypeComp</b>.</para>
            <para>The caller should use the returned <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</a> pointer (<i>ppTInfo</i>) to get the address of the member.</para>
            <para><div class="alert"><b>Note</b>  The <i>wflags</i> parameter is the same as the <i>wflags</i> parameter in <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-idispatch-invoke">IDispatch::Invoke</a>. </div> <div> </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-itypecomp-bind#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeComp.BindType(Windows.Win32.Foundation.PWSTR,System.UInt32,Windows.Win32.System.Com.ITypeInfo**,Windows.Win32.System.Com.ITypeComp**)">
            <summary>Binds to the type descriptions contained within a type library.</summary>
            <param name="szName">The name to be bound.</param>
            <param name="lHashVal">The hash value for the name computed by <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-lhashvalofname">LHashValOfName</a>.</param>
            <param name="ppTInfo">An <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</a> of the type to which the name was bound.</param>
            <param name="ppTComp">Passes a valid pointer, such as the address of an <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypecomp">ITypeComp</a> variable.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>Use the function <b>BindType</b> for binding a type name to the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</a> that describes the type. This function is invoked on the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypecomp">ITypeComp</a> that is returned by <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-itypelib-gettypecomp">ITypeLib::GetTypeComp</a> to bind to types defined within that library. It can also be used in the future for binding to nested types.</remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.ITypeComp.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{00020403-0000-0000-c000-000000000046}</value>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeLib.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeLib.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeLib.GetTypeInfoCount">
            <summary>Provides the number of type descriptions that are in a type library.</summary>
            <returns>The number of type descriptions in the type library.</returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-itypelib-gettypeinfocount">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeLib.GetTypeInfo(System.UInt32,Windows.Win32.System.Com.ITypeInfo**)">
            <summary>Retrieves the specified type description in the library.</summary>
            <param name="index">The index of the interface to be returned.</param>
            <param name="ppTInfo">If successful, returns a pointer to the pointer to the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</a> interface.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>For dual interfaces, <b>GetTypeInfo</b> returns only the TKIND_DISPATCH type information. To get the TKIND_INTERFACE type information, <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-itypeinfo-getreftypeofimpltype">GetRefTypeOfImplType</a> can be called on the TKIND_DISPATCH type information, passing an index of –1. Then, the returned type information handle can be passed to <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-itypeinfo-getreftypeinfo">GetRefTypeInfo</a>.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeLib.GetTypeInfoType(System.UInt32,Windows.Win32.System.Com.TYPEKIND@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeLib.GetTypeInfoType(System.UInt32,Windows.Win32.System.Com.TYPEKIND*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeLib.GetTypeInfoType(System.UInt32,Windows.Win32.System.Com.TYPEKIND*)">
            <summary>Retrieves the type of a type description.</summary>
            <param name="index">The index of the type description within the type library.</param>
            <param name="pTKind">The <a href="https://docs.microsoft.com/windows/desktop/api/oaidl/ne-oaidl-typekind">TYPEKIND</a> enumeration value for the type description.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-itypelib-gettypeinfotype">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeLib.GetTypeInfoOfGuid(System.Guid@,Windows.Win32.System.Com.ITypeInfo**)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeLib.GetTypeInfoOfGuid(System.Guid*,Windows.Win32.System.Com.ITypeInfo**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeLib.GetTypeInfoOfGuid(System.Guid*,Windows.Win32.System.Com.ITypeInfo**)">
            <summary>Retrieves the type description that corresponds to the specified GUID.</summary>
            <param name="guid">The GUID of the type description.</param>
            <param name="ppTinfo">The <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</a> interface.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-itypelib-gettypeinfoofguid">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeLib.GetLibAttr(Windows.Win32.System.Com.TLIBATTR*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeLib.GetLibAttr(Windows.Win32.System.Com.TLIBATTR**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeLib.GetLibAttr(Windows.Win32.System.Com.TLIBATTR**)">
            <summary>Retrieves the structure that contains the library's attributes.</summary>
            <param name="ppTLibAttr">The library's attributes.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>Use <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-itypelib-releasetlibattr">ITypeLib::ReleaseTLibAttr</a> to free the memory occupied by the TLIBATTR structure.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeLib.GetTypeComp(Windows.Win32.System.Com.ITypeComp**)">
            <summary>Enables a client compiler to bind to the types, variables, constants, and global functions for a library.</summary>
            <param name="ppTComp">The <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypecomp">ITypeComp</a> instance for this <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypelib">ITypeLib</a>. A client compiler uses the methods in the <b>ITypeComp</b> interface to bind to types in <b>ITypeLib</b>, as well as to the global functions, variables, and constants defined in <b>ITypeLib</b></param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>The <a href="https://docs.microsoft.com/windows/desktop/api/oaidl/nf-oaidl-itypecomp-bind">Bind</a> function of the returned <b>TypeComp</b> binds to global functions, variables, constants, enumerated values, and coclass members. The <b>Bind</b> function also binds the names of the TYPEKIND enumerations of TKIND_MODULE, TKIND_ENUM, and TKIND_COCLASS. These names shadow any global names defined within the type information. The members of TKIND_ENUM, TKIND_MODULE, and TKIND_COCLASS types marked as Application objects can be directly bound to from <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypecomp">ITypeComp</a> without specifying the name of the module.</para>
            <para><a href="https://docs.microsoft.com/windows/desktop/api/oaidl/nf-oaidl-itypecomp-bind">ITypeComp::Bind</a> and <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-itypecomp-bindtype">ITypeComp::BindType</a> accept only unqualified names. <b>ITypeLib::GetTypeComp</b> returns a pointer to the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypecomp">ITypeComp</a> interface, which is then used to bind to global elements in the library. The names of some types (TKIND_ENUM, TKIND_MODULE, and TKIND_COCLASS) share the name space with variables, functions, constants, and enumerators. If a member requires qualification to differentiate it from other items in the name space, <b>GetTypeComp</b> can be called successively for each qualifier in order to bind to the desired member. This allows programming language compilers to access members of modules, enumerations, and coclasses, even though the member can't be bound to with a qualified name.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-itypelib-gettypecomp#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeLib.GetDocumentation(System.Int32,Windows.Win32.Foundation.BSTR*,Windows.Win32.Foundation.BSTR*,System.UInt32@,Windows.Win32.Foundation.BSTR*)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeLib.GetDocumentation(System.Int32,Windows.Win32.Foundation.BSTR*,Windows.Win32.Foundation.BSTR*,System.UInt32*,Windows.Win32.Foundation.BSTR*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeLib.GetDocumentation(System.Int32,Windows.Win32.Foundation.BSTR*,Windows.Win32.Foundation.BSTR*,System.UInt32*,Windows.Win32.Foundation.BSTR*)">
            <summary>Retrieves the documentation string for the library, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.</summary>
            <param name="index">The index of the type description whose documentation is to be returned. If <i>index</i> is -1, then the documentation for the library itself is returned.</param>
            <param name="pBstrName">The name of the specified item. If the caller does not need the item name, then <i>pBstrName</i> can be null.</param>
            <param name="pBstrDocString">The documentation string for the specified item. If the caller does not need the documentation string, then <i>pBstrDocString</i> can be null..</param>
            <param name="pdwHelpContext">The Help context identifier (ID) associated with the specified item. If the caller does not need the Help context ID, then <i>pdwHelpContext</i> can be null.</param>
            <param name="pBstrHelpFile">The fully qualified name of the Help file. If the caller does not need the Help file name, then <i>pBstrHelpFile</i> can be null.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>The caller should free the parameters <i>pBstrName</i>, <i>pBstrDocString</i>, and <i>pBstrHelpFile</i>.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeLib.IsName(System.Span{System.Char}@,System.UInt32,Windows.Win32.Foundation.BOOL@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeLib.IsName(Windows.Win32.Foundation.PWSTR,System.UInt32,Windows.Win32.Foundation.BOOL*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeLib.IsName(Windows.Win32.Foundation.PWSTR,System.UInt32,Windows.Win32.Foundation.BOOL*)">
            <summary>Indicates whether a passed-in string contains the name of a type or member described in the library.</summary>
            <param name="szNameBuf">The string to test. If this method is successful, <i>szNameBuf</i> is modified to match the case (capitalization) found in the type library.</param>
            <param name="lHashVal">The hash value of <i>szNameBuf</i>.</param>
            <param name="pfName">True if <i>szNameBuf</i> was found in the type library; otherwise false.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-itypelib-isname">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeLib.FindName(System.Span{System.Char}@,System.UInt32,Windows.Win32.System.Com.ITypeInfo**,System.Int32*,System.UInt16@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeLib.FindName(Windows.Win32.Foundation.PWSTR,System.UInt32,Windows.Win32.System.Com.ITypeInfo**,System.Int32*,System.UInt16*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeLib.FindName(Windows.Win32.Foundation.PWSTR,System.UInt32,Windows.Win32.System.Com.ITypeInfo**,System.Int32*,System.UInt16*)">
            <summary>Finds occurrences of a type description in a type library. This may be used to quickly verify that a name exists in a type library.</summary>
            <param name="szNameBuf">The name to search for.</param>
            <param name="lHashVal">A hash value to speed up the search, computed by the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-lhashvalofnamesys">LHashValOfNameSys</a> function. If <i>lHashVal</i> = 0, a value is computed.</param>
            <param name="ppTInfo">An array of pointers to the type descriptions that contain the name specified in <i>szNameBuf</i>. This parameter cannot be null.</param>
            <param name="rgMemId">An array of the found items; <i>rgMemId</i>[<i>i</i>] is the MEMBERID that indexes into the type description specified by <i>ppTInfo</i>[<i>i</i>]. This parameter cannot be null.</param>
            <param name="pcFound">
            <para>On entry, indicates how many instances to look for. For example, *<i>pcFound</i> = 1 can be called to find the first occurrence. The search stops when one is found. On exit, indicates the number of instances that were found. If the in and out values of *<i>pcFound</i> are identical, there may be more type descriptions that contain the name.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-itypelib-findname#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>Passing *<i>pcFound</i> = <i>n</i> indicates that there is enough room in the <i>ppTInfo</i> and <i>rgMemId</i> arrays for <i>n</i> (<i>ptinfo</i>, <i>memid</i>) pairs. The function returns MEMBERID_NIL in <i>rgMemId</i>[<i>i</i>], if the name in <i>szNameBuf</i> is the name of the type information in <i>ppTInfo</i>[<i>i</i>].</remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeLib.ReleaseTLibAttr(Windows.Win32.System.Com.TLIBATTR@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeLib.ReleaseTLibAttr(Windows.Win32.System.Com.TLIBATTR*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ITypeLib.ReleaseTLibAttr(Windows.Win32.System.Com.TLIBATTR*)">
            <summary>Releases the TLIBATTR originally obtained from GetLibAttr.</summary>
            <param name="pTLibAttr">The TLIBATTR to be freed.</param>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-itypelib-releasetlibattr">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.ITypeLib.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{00020402-0000-0000-c000-000000000046}</value>
        </member>
        <member name="T:Windows.Win32.System.Com.LOCKTYPE">
            <summary>The LOCKTYPE enumeration values indicate the type of locking requested for the specified range of bytes. The values are used in the ILockBytes::LockRegion and IStream::LockRegion methods.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/ne-objidl-locktype">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.LOCKTYPE.LOCK_WRITE">
            <summary>If this lock is granted, the specified range of bytes can be opened and read any number of times, but writing to the locked range is prohibited except for the owner that was granted this lock.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.LOCKTYPE.LOCK_EXCLUSIVE">
            <summary>If this lock is granted, writing to the specified range of bytes is prohibited except by the owner that was granted this lock.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.LOCKTYPE.LOCK_ONLYONCE">
            <summary>If this lock is granted, no other <b>LOCK_ONLYONCE</b> lock can be obtained on the range. Usually this lock type is an alias for some other lock type. Thus, specific implementations can have additional behavior associated with this lock type.</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.SAFEARRAYBOUND">
            <summary>Represents the bounds of one dimension of the array.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/ns-oaidl-safearraybound">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.SAFEARRAYBOUND.cElements">
            <summary>The number of elements in the dimension.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.SAFEARRAYBOUND.lLbound">
            <summary>The lower bound of the dimension.</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.STATFLAG">
            <summary>Indicate whether the method should try to return a name in the pwcsName member of the STATSTG structure.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypes/ne-wtypes-statflag">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.STATFLAG.STATFLAG_DEFAULT">
            <summary>
            <para>Requests that the statistics include the <b>pwcsName</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ns-objidl-statstg">STATSTG</a> structure.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypes/ne-wtypes-statflag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATFLAG.STATFLAG_NONAME">
            <summary>
            <para>Requests that the statistics not include the <b>pwcsName</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ns-objidl-statstg">STATSTG</a> structure. If the name is omitted, there is no need for the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ilockbytes-stat">ILockBytes::Stat</a>, <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istorage-stat">IStorage::Stat</a>, and <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istream-stat">IStream::Stat</a> methods methods to allocate and free memory for the string value of the name, therefore the method reduces time and resources used in an allocation and free operation.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypes/ne-wtypes-statflag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATFLAG.STATFLAG_NOOPEN">
            <summary>Not implemented.</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.STATSTG">
            <summary>Contains statistical data about an open storage, stream, or byte-array object.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/ns-objidl-statstg">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.pwcsName">
            <summary>
            <para>A pointer to a <b>NULL</b>-terminated Unicode string that contains the name. Space for this string is allocated by the method called and freed by the caller (for more information, see <a href="https://docs.microsoft.com/windows/desktop/api/combaseapi/nf-combaseapi-cotaskmemfree">CoTaskMemFree</a>). To  not return this member, specify the STATFLAG_NONAME value when you call a method that returns a <b>STATSTG</b> structure, except for calls to <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ienumstatstg">IEnumSTATSTG::Next</a>, which provides no way to specify this value.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/ns-objidl-statstg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.type">
            <summary>
            <para>Indicates the type of storage object. This is one of the values from the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ne-objidl-stgty">STGTY</a> enumeration.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/ns-objidl-statstg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.cbSize">
            <summary>Specifies the size, in bytes, of the stream or byte array.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.mtime">
            <summary>Indicates the last modification time for this storage, stream, or byte array.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.ctime">
            <summary>Indicates the creation time for this storage, stream, or byte array.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.atime">
            <summary>Indicates the last access time for this storage, stream, or byte array.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.grfMode">
            <summary>
            <para>Indicates the access mode specified when the object was opened. This member is only valid in calls to <b>Stat</b> methods.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/ns-objidl-statstg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.clsid">
            <summary>Indicates the class identifier for the storage object; set to CLSID_NULL for new storage objects. This member is not used for streams or byte arrays.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.grfStateBits">
            <summary>
            <para>Indicates the current state bits of the storage object; that is, the value most recently set by the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istorage-setstatebits">IStorage::SetStateBits</a> method. This member is not valid for streams or byte arrays.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/ns-objidl-statstg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.reserved">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.STGM">
            <summary>Flags that indicate conditions for creating and deleting the object and access modes for the object.</summary>
            <remarks>You can combine these flags, but you can only choose one flag from each group of related flags. Typically one flag from each of the access and sharing groups must be specified for all functions and methods which use these constants. Flags from other groups are optional.</remarks>
        </member>
        <member name="T:Windows.Win32.System.Com.STGTY">
            <summary>The STGTY enumeration values are used in the type member of the STATSTG structure to indicate the type of the storage element. A storage element is a storage object, a stream object, or a byte-array object (LOCKBYTES).</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/ne-objidl-stgty">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.STGTY.STGTY_STORAGE">
            <summary>Indicates that the storage element is a storage object.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STGTY.STGTY_STREAM">
            <summary>Indicates that the storage element is a stream object.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STGTY.STGTY_LOCKBYTES">
            <summary>Indicates that the storage element is a byte-array object.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STGTY.STGTY_PROPERTY">
            <summary>Indicates that the storage element is a property storage object.</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.SYSKIND">
            <summary>Identifies the target operating system platform.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/ne-oaidl-syskind">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.SYSKIND.SYS_WIN16">
            <summary>The target operating system for the type library is 16-bit Windows. By default, data members are packed.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.SYSKIND.SYS_WIN32">
            <summary>The target operating system for the type library is 32-bit Windows. By default, data members are naturally aligned (for example, 2-byte integers are aligned on even-byte boundaries; 4-byte integers are aligned on quad-word boundaries, and so on).</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.SYSKIND.SYS_MAC">
            <summary>The target operating system for the type library is Apple Macintosh. By default, all data members are aligned on even-byte boundaries.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.SYSKIND.SYS_WIN64">
            <summary>The target operating system for the type library is 64-bit Windows.</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.TLIBATTR">
            <summary>Contains information about a type library. Information from this structure is used to identify the type library and to provide national language support for member names.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/ns-oaidl-tlibattr">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.TLIBATTR.guid">
            <summary>The globally unique identifier.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TLIBATTR.lcid">
            <summary>The locale identifier.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TLIBATTR.syskind">
            <summary>The target hardware platform.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TLIBATTR.wMajorVerNum">
            <summary>The major version number.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TLIBATTR.wMinorVerNum">
            <summary>The minor version number.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TLIBATTR.wLibFlags">
            <summary>The library flags.</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.TYPEATTR">
            <summary>Contains attributes of a type.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/ns-oaidl-typeattr">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEATTR.guid">
            <summary>The GUID of the type information.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEATTR.lcid">
            <summary>The locale of member names and documentation strings.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEATTR.dwReserved">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEATTR.memidConstructor">
            <summary>The constructor ID, or MEMBERID_NIL if none.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEATTR.memidDestructor">
            <summary>The destructor ID, or MEMBERID_NIL if none.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEATTR.lpstrSchema">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEATTR.cbSizeInstance">
            <summary>The size of an instance of this type.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEATTR.typekind">
            <summary>The kind of type.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEATTR.cFuncs">
            <summary>The number of functions.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEATTR.cVars">
            <summary>The number of variables or data members.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEATTR.cImplTypes">
            <summary>The number of implemented interfaces.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEATTR.cbSizeVft">
            <summary>The size of this type's VTBL.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEATTR.cbAlignment">
            <summary>The byte alignment for an instance of this type. A value of 0 indicates alignment on the 64K boundary; 1 indicates no special alignment. For other values, <i>n</i> indicates aligned on byte <i>n</i>.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEATTR.wTypeFlags">
            <summary>The type flags. See <a href="https://docs.microsoft.com/windows/desktop/api/oaidl/ne-oaidl-typeflags">TYPEFLAGS</a>.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEATTR.wMajorVerNum">
            <summary>The major version number.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEATTR.wMinorVerNum">
            <summary>The minor version number.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEATTR.tdescAlias">
            <summary>If <b>typekind</b> is TKIND_ALIAS, specifies the type for which this type is an alias.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEATTR.idldescType">
            <summary>The IDL attributes of the described type.</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.TYPEDESC">
            <summary>Describes the type of a variable, the return type of a function, or the type of a function parameter.</summary>
            <remarks>If the variable is VT_SAFEARRAY or VT_PTR, the union portion of the TYPEDESC contains a pointer to a TYPEDESC that specifies the element type.</remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEDESC.vt">
            <summary>The variant type.</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.TYPEKIND">
            <summary>Specifies a type.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/ne-oaidl-typekind">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEKIND.TKIND_ENUM">
            <summary>A set of enumerators.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEKIND.TKIND_RECORD">
            <summary>A structure with no methods.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEKIND.TKIND_MODULE">
            <summary>A module that can only have static functions and data (for example, a DLL).</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEKIND.TKIND_INTERFACE">
            <summary>A type that has virtual and pure functions.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEKIND.TKIND_DISPATCH">
            <summary>A set of methods and properties that are accessible through <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-idispatch-invoke">IDispatch::Invoke</a>. By default, dual interfaces return TKIND_DISPATCH.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEKIND.TKIND_COCLASS">
            <summary>A set of implemented component object interfaces.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEKIND.TKIND_ALIAS">
            <summary>A type that is an alias for another type.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEKIND.TKIND_UNION">
            <summary>A union, all of whose members have an offset of zero.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.TYPEKIND.TKIND_MAX">
            <summary>End of enum marker.</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.VARDESC">
            <summary>Describes a variable, constant, or data member.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/ns-oaidl-vardesc">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.VARDESC.memid">
            <summary>The member ID.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.VARDESC.lpstrSchema">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.VARDESC.elemdescVar">
            <summary>The variable type.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.VARDESC.wVarFlags">
            <summary>The variable flags. See <a href="https://docs.microsoft.com/windows/desktop/api/oaidl/ne-oaidl-varflags">VARFLAGS</a>.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.VARDESC.varkind">
            <summary>The variable type.</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.VARFLAGS">
            <summary>Specifies variable flags.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/ne-oaidl-varflags">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.VARFLAGS.VARFLAG_FREADONLY">
            <summary>Assignment to the variable should not be allowed.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.VARFLAGS.VARFLAG_FSOURCE">
            <summary>The variable returns an object that is a source of events.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.VARFLAGS.VARFLAG_FBINDABLE">
            <summary>The variable supports data binding.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.VARFLAGS.VARFLAG_FREQUESTEDIT">
            <summary>When set, any attempt to directly change the property results in a call to <b>IPropertyNotifySink::OnRequestEdit</b>. The implementation of <b>OnRequestEdit</b> determines if the change is accepted.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.VARFLAGS.VARFLAG_FDISPLAYBIND">
            <summary>The variable is displayed to the user as bindable. VARFLAG_FBINDABLE must also be set.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.VARFLAGS.VARFLAG_FDEFAULTBIND">
            <summary>The variable is the single property that best represents the object. Only one variable in type information can have this attribute.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.VARFLAGS.VARFLAG_FHIDDEN">
            <summary>The variable should not be displayed to the user in a browser, although it exists and is bindable.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.VARFLAGS.VARFLAG_FRESTRICTED">
            <summary>The variable should not be accessible from macro languages. This flag is intended for system-level variables or variables that you do not want type browsers to display.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.VARFLAGS.VARFLAG_FDEFAULTCOLLELEM">
            <summary>Permits an optimization in which the compiler looks for a member named "xyz" on the type of abc. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.VARFLAGS.VARFLAG_FUIDEFAULT">
            <summary>The variable is the default display in the user interface.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.VARFLAGS.VARFLAG_FNONBROWSABLE">
            <summary>The variable appears in an object browser, but not in a properties browser.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.VARFLAGS.VARFLAG_FREPLACEABLE">
            <summary>Tags the interface as having default behaviors.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.VARFLAGS.VARFLAG_FIMMEDIATEBIND">
            <summary>The variable is mapped as individual bindable properties.</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.VARKIND">
            <summary>Specifies the variable type.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/ne-oaidl-varkind">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.VARKIND.VAR_PERINSTANCE">
            <summary>The variable is a field or member of the type. It exists at a fixed offset within each instance of the type.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.VARKIND.VAR_STATIC">
            <summary>There is only one instance of the variable.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.VARKIND.VAR_CONST">
            <summary>The VARDESC describes a symbolic constant. There is no memory associated with it.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.VARKIND.VAR_DISPATCH">
            <summary>The variable can only be accessed through <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-idispatch-invoke">IDispatch::Invoke</a>.</summary>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPicture.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.get_Handle(Windows.Win32.System.Ole.OLE_HANDLE@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPicture.get_Handle(Windows.Win32.System.Ole.OLE_HANDLE*)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.get_Handle(Windows.Win32.System.Ole.OLE_HANDLE*)">
            <summary>Retrieves the handle to the picture managed within this picture object to a specified location.</summary>
            <param name="pHandle">A pointer to a variable that receives the handle. The caller is responsible for this handle upon successful return. The variable is set to <b>NULL</b> on failure.</param>
            <returns>
            <para>This method supports the standard return values E_FAIL and E_OUTOFMEMORY, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><h3><a id="Notes_to_Callers_"></a><a id="notes_to_callers_"></a><a id="NOTES_TO_CALLERS_"></a>Notes to Callers </h3> The picture object may retain ownership of the picture. However, the caller can be assured that the picture will remain valid until either the caller specifically destroys the picture or the picture object is itself destroyed. The <i>fOwn</i> parameter to <a href="https://docs.microsoft.com/windows/desktop/api/olectl/nf-olectl-olecreatepictureindirect">OleCreatePictureIndirect</a> determines ownership when the picture object is created. <a href="https://docs.microsoft.com/windows/desktop/api/olectl/nf-olectl-oleloadpicture">OleLoadPicture</a> forces <i>fOwn</i> to <b>TRUE</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/ocidl/nf-ocidl-ipicture-get_handle#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.get_hPal(Windows.Win32.System.Ole.OLE_HANDLE@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPicture.get_hPal(Windows.Win32.System.Ole.OLE_HANDLE*)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.get_hPal(Windows.Win32.System.Ole.OLE_HANDLE*)">
            <summary>Retrieves a copy of the palette currently used by the picture object.</summary>
            <param name="phPal">A pointer to a variable that receives the palette handle. The variable is set to <b>NULL</b> on failure.</param>
            <returns>
            <para>This method supports the standard return values E_FAIL and E_OUTOFMEMORY, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> If the picture object has ownership of the picture, it also has ownership of the palette and will destroy it when the object is itself destroyed. Otherwise the caller owns the palette. The <i>fOwn</i> parameter to <a href="https://docs.microsoft.com/windows/desktop/api/olectl/nf-olectl-olecreatepictureindirect">OleCreatePictureIndirect</a> determines ownership. <a href="https://docs.microsoft.com/windows/desktop/api/olectl/nf-olectl-oleloadpicture">OleLoadPicture</a> sets <i>fOwn</i> to <b>TRUE</b> to indicate that the picture object owns the palette.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/ocidl/nf-ocidl-ipicture-get_hpal#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.get_Type(Windows.Win32.System.Ole.PICTYPE@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPicture.get_Type(Windows.Win32.System.Ole.PICTYPE*)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.get_Type(Windows.Win32.System.Ole.PICTYPE*)">
            <summary>Retrieves the current type of the picture contained in the picture object.</summary>
            <param name="pType">Pointer to a variable that receives the picture type. The Type property can have any one of the values contained in the <a href="https://docs.microsoft.com/windows/desktop/com/pictype-constants">PICTYPE</a> enumeration.</param>
            <returns>
            <para>This method supports the standard return value E_FAIL, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/ocidl/nf-ocidl-ipicture-get_type">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.get_Width(System.Int32@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPicture.get_Width(System.Int32*)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.get_Width(System.Int32*)">
            <summary>Retrieves the current width of the picture in the picture object.</summary>
            <param name="pWidth">A pointer to a variable that receives the width.</param>
            <returns>
            <para>This method supports the standard return value E_FAIL, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/ocidl/nf-ocidl-ipicture-get_width">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.get_Height(System.Int32@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPicture.get_Height(System.Int32*)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.get_Height(System.Int32*)">
            <summary>Retrieves the current height of the picture in the picture object.</summary>
            <param name="pHeight">A pointer to a variable that receives the height.</param>
            <returns>
            <para>This method supports the standard return value E_FAIL, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/ocidl/nf-ocidl-ipicture-get_height">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.Render(Windows.Win32.Graphics.Gdi.HDC,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Windows.Win32.Foundation.RECT@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPicture.Render(Windows.Win32.Graphics.Gdi.HDC,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Windows.Win32.Foundation.RECT*)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.Render(Windows.Win32.Graphics.Gdi.HDC,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Windows.Win32.Foundation.RECT*)">
            <summary>Renders (draws) a specified portion of the picture defined by the offset (xSrc,ySrc) of the source picture and the dimensions to copy (cxSrc,xySrc).</summary>
            <param name="hDC">A handle of the device context on which to render the image.</param>
            <param name="x">The horizontal coordinate in <i>hdc</i> at which to place the rendered image.</param>
            <param name="y">The vertical coordinate in <i>hdc</i> at which to place the rendered image.</param>
            <param name="cx">The horizontal dimension (width) of the destination rectangle.</param>
            <param name="cy">The vertical dimension (height) of the destination rectangle</param>
            <param name="xSrc">The horizontal offset in the source picture from which to start copying.</param>
            <param name="ySrc">The vertical offset in the source picture from which to start copying.</param>
            <param name="cxSrc">The horizontal extent to copy from the source picture.</param>
            <param name="cySrc">The vertical extent to copy from the source picture.</param>
            <param name="pRcWBounds">A pointer to a rectangle containing the position of the destination within a metafile device context if <i>hdc</i> is a metafile DC. Cannot be <b>NULL</b> in such cases.</param>
            <returns>
            <para>This method supports the standard return values E_FAIL, E_INVALIDARG, and E_OUTOFMEMORY, as well as the following: </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/ocidl/nf-ocidl-ipicture-render">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.set_hPal(Windows.Win32.System.Ole.OLE_HANDLE)">
            <summary>Assigns a GDI palette to the picture contained in the picture object.</summary>
            <param name="hPal">A handle to the GDI palette assigned to the picture.</param>
            <returns>This method supports the standard return values E_FAIL, E_INVALIDARG, E_OUTOFMEMORY, and S_OK.</returns>
            <remarks>
            <para><h3><a id="Notes_to_Implementers"></a><a id="notes_to_implementers"></a><a id="NOTES_TO_IMPLEMENTERS"></a>Notes to Implementers</h3> Ownership of the palette passed to this method depends on how the picture object was created, as specified by the <i>fOwn</i> parameter to <a href="https://docs.microsoft.com/windows/desktop/api/olectl/nf-olectl-olecreatepictureindirect">OleCreatePictureIndirect</a>. <a href="https://docs.microsoft.com/windows/desktop/api/olectl/nf-olectl-oleloadpicture">OleLoadPicture</a> forces <i>fOwn</i> to <b>TRUE</b>; if the object owns the picture, then it takes over ownership of this palette.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/ocidl/nf-ocidl-ipicture-set_hpal#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.get_CurDC(Windows.Win32.Graphics.Gdi.HDC@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPicture.get_CurDC(Windows.Win32.Graphics.Gdi.HDC*)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.get_CurDC(Windows.Win32.Graphics.Gdi.HDC*)">
            <summary>Retrieves the handle of the current device context. This property is valid only for bitmap pictures.</summary>
            <param name="phDC">A pointer a variable that receives the device context.</param>
            <returns>
            <para>This method supports the standard return value E_FAIL, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>The CurDC property and the <a href="https://docs.microsoft.com/windows/desktop/api/ocidl/nf-ocidl-ipicture-selectpicture">IPicture::SelectPicture</a> method exist to circumvent restrictions in Windows; specifically, that an object can only be selected into exactly one device context at a time. In some cases, a picture object may be permanently selected into a particular device context (for example, a control may use a certain picture for a background). To use this picture property elsewhere, it must be temporarily deselected from its old device context, selected into the new device context for the operation, then reselected back into the old device context. The <b>IPicture::get_CurDC</b> method returns the device context handle into which the picture is currently selected. The <b>IPicture::SelectPicture</b> method selects the picture into a new device context, returning the old device context and the picture's GDI handle. The caller should select the picture back into the old device context when the caller is done with it, as is normal for Windows code. <h3><a id="Notes_to_Callers_"></a><a id="notes_to_callers_"></a><a id="NOTES_TO_CALLERS_"></a>Notes to Callers </h3> The caller always owns any device contexts passed between it and the picture object. Because the picture object maintains a copy of the HDC, the caller should use a memory device context (created with the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-createcompatibledc">CreateCompatibleDC</a> function) and not a screen device context (from <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getdc">GetDC</a>, <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-createdca">CreateDC</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-beginpaint">BeginPaint</a>), because the screen device contexts are a limited system resource.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/ocidl/nf-ocidl-ipicture-get_curdc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.SelectPicture(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Graphics.Gdi.HDC@,Windows.Win32.System.Ole.OLE_HANDLE@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPicture.SelectPicture(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Graphics.Gdi.HDC*,Windows.Win32.System.Ole.OLE_HANDLE*)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.SelectPicture(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Graphics.Gdi.HDC*,Windows.Win32.System.Ole.OLE_HANDLE*)">
            <summary>Selects a bitmap picture into a given device context, and returns the device context in which the picture was previously selected as well as the picture's GDI handle. This method works in conjunction with IPicture::get_CurDC.</summary>
            <param name="hDCIn">A handle for the device context in which to select the picture.</param>
            <param name="phDCOut">A pointer to a variable that receives the previous device context. This parameter can be <b>NULL</b> if the caller does not need this information. Ownership of the device context is always the responsibility of the caller.</param>
            <param name="phBmpOut">A pointer to a variable that receives the GDI handle of the picture. This parameter can be <b>NULL</b> if the caller does not need the handle. Ownership of this handle is determined by the <i>fOwn</i> parameter passed to <a href="https://docs.microsoft.com/windows/desktop/api/olectl/nf-olectl-olecreatepictureindirect">OleCreatePictureIndirect</a>. Pictures loaded from a stream always own their resources.</param>
            <returns>This method supports the standard return values E_FAIL, E_INVALIDARG, E_OUTOFMEMORY, and S_OK.</returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/ocidl/nf-ocidl-ipicture-selectpicture">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.get_KeepOriginalFormat(Windows.Win32.Foundation.BOOL@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPicture.get_KeepOriginalFormat(Windows.Win32.Foundation.BOOL*)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.get_KeepOriginalFormat(Windows.Win32.Foundation.BOOL*)">
            <summary>Retrieves the current value of the picture's KeepOriginalFormat property.</summary>
            <param name="pKeep">A pointer to a variable that receives the value of the property.</param>
            <returns>
            <para>This method supports the standard return value E_FAIL, as well as the following value. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/ocidl/nf-ocidl-ipicture-get_keeporiginalformat">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.put_KeepOriginalFormat(Windows.Win32.Foundation.BOOL)">
            <summary>Sets the value of the picture's KeepOriginalFormat property.</summary>
            <param name="keep">Specifies the new value to assign to the property.</param>
            <returns>This method returns S_OK on success and E_FAIL otherwise.</returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/ocidl/nf-ocidl-ipicture-put_keeporiginalformat">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.PictureChanged">
            <summary>Notifies the picture object that its picture resource has changed. This method only calls IPropertyNotifySink::OnChanged with DISPID_PICT_HANDLE for any connected sinks.</summary>
            <returns>This method S_OK if it succeeds and E_FAIL if the picture object is uninitialized.</returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/ocidl/nf-ocidl-ipicture-picturechanged">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.SaveAsFile(Windows.Win32.System.Com.IStream*,Windows.Win32.Foundation.BOOL,System.Int32@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPicture.SaveAsFile(Windows.Win32.System.Com.IStream*,Windows.Win32.Foundation.BOOL,System.Int32*)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.SaveAsFile(Windows.Win32.System.Com.IStream*,Windows.Win32.Foundation.BOOL,System.Int32*)">
            <summary>Saves the picture's data into a stream in the same format that it would save itself into a file. Bitmaps use the BMP file format, metafiles the WMF format, and icons the ICO format.</summary>
            <param name="pStream">A pointer to the stream into which the picture writes its data.</param>
            <param name="fSaveMemCopy">A flag indicating whether to save a copy of the picture in memory.</param>
            <param name="pCbSize">Pointer to a variable that receives the number of bytes written into the stream. This value can be <b>NULL</b>, indicating that the caller does not require this information.</param>
            <returns>This method supports the standard return values E_FAIL, E_INVALIDARG, and S_OK.</returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/ocidl/nf-ocidl-ipicture-saveasfile">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.get_Attributes(System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPicture.get_Attributes(System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPicture.get_Attributes(System.UInt32*)">
            <summary>Retrieves the current set of the picture's bit attributes.</summary>
            <param name="pDwAttr">
            <para>A pointer to a variable that receives the value of the Attributes property. The Attributes property can contain any combination of the values from the <a href="https://docs.microsoft.com/windows/desktop/api/ocidl/ne-ocidl-pictureattributes">PICTUREATTRIBUTES</a> enumeration.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/ocidl/nf-ocidl-ipicture-get_attributes#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method supports the standard return value E_FAIL, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/ocidl/nf-ocidl-ipicture-get_attributes">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Ole.IPicture.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{7bf80980-bf32-101a-8bbb-00aa00300cab}</value>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPictureDisp.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPictureDisp.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPictureDisp.GetTypeInfoCount(System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPictureDisp.GetTypeInfoCount(System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPictureDisp.GetIDsOfNames(System.Guid@,System.Span{Windows.Win32.Foundation.PWSTR},System.UInt32,System.Span{System.Int32})">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPictureDisp.GetIDsOfNames(System.Guid*,Windows.Win32.Foundation.PWSTR*,System.UInt32,System.UInt32,System.Int32*)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IPictureDisp.Invoke(System.Int32,System.Guid@,System.UInt32,Windows.Win32.System.Com.DISPATCH_FLAGS,Windows.Win32.System.Com.DISPPARAMS@,Windows.Win32.System.Variant.VARIANT*,Windows.Win32.System.Com.EXCEPINFO*,System.UInt32*)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPictureDisp.Invoke(System.Int32,System.Guid*,System.UInt32,Windows.Win32.System.Com.DISPATCH_FLAGS,Windows.Win32.System.Com.DISPPARAMS*,Windows.Win32.System.Variant.VARIANT*,Windows.Win32.System.Com.EXCEPINFO*,System.UInt32*)"/>
        </member>
        <member name="F:Windows.Win32.System.Ole.IPictureDisp.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{7bf80981-bf32-101a-8bbb-00aa00300cab}</value>
        </member>
        <member name="T:Windows.Win32.System.Ole.PICTDESC">
            <summary>Contains parameters to create a picture object through the OleCreatePictureIndirect function.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/olectl/ns-olectl-pictdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.PICTDESC.FromImage(System.Drawing.IImage)">
            <summary>
             Create a <see cref="T:Windows.Win32.System.Ole.PICTDESC"/> struct describing the given <paramref name="image"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The image type isn't supported.</exception>
        </member>
        <member name="F:Windows.Win32.System.Ole.PICTDESC.cbSizeofstruct">
            <summary>The size of the structure, in bytes.</summary>
        </member>
        <member name="T:Windows.Win32.System.Ole.ARRAYDESC">
            <summary>Describes an array, its element type, and its dimension.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/ns-oaidl-arraydesc">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Ole.ARRAYDESC.tdescElem">
            <summary>The element type.</summary>
        </member>
        <member name="F:Windows.Win32.System.Ole.ARRAYDESC.cDims">
            <summary>The dimension count.</summary>
        </member>
        <member name="F:Windows.Win32.System.Ole.ARRAYDESC.rgbounds">
            <summary>A variable-length array containing one element for each dimension.</summary>
        </member>
        <member name="M:Windows.Win32.System.Ole.ARRAYDESC.SizeOf(System.Int32)">
            <summary>Computes the amount of memory that must be allocated to store this struct, including the specified number of elements in the variable length inline array at the end.</summary>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IRecordInfo.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.RecordInit(System.Void*)">
            <summary>Initializes a new instance of a record.</summary>
            <param name="pvNew">An instance of a record.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>The caller must allocate the memory of the record by its appropriate size using the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-irecordinfo-getsize">GetSize</a> method. <b>RecordInit</b> sets all contents of the record to 0 and the record should hold no resources.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-irecordinfo-recordinit#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.RecordClear(System.Void*)">
            <summary>Releases object references and other values of a record without deallocating the record.</summary>
            <param name="pvExisting">The record to be cleared.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks><b>RecordClear</b> releases memory blocks held by VT_PTR or VT_SAFEARRAY instance fields. The caller needs to free the instance fields memory, <b>RecordClear</b> will do nothing if there are no resources held.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.RecordCopy(System.Void*,System.Void*)">
            <summary>Copies an existing record into the passed in buffer.</summary>
            <param name="pvExisting">The current record instance.</param>
            <param name="pvNew">The destination where the record will be copied.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks><b>RecordCopy</b> will release the resources in the destination first. The caller is responsible for allocating sufficient memory in the destination by calling <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-irecordinfo-getsize">GetSize</a> or  <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-irecordinfo-recordcreate">RecordCreate</a>. If <b>RecordCopy</b> fails to copy any of the fields then all fields will be cleared, as though <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-irecordinfo-recordclear">RecordClear</a> had been called.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.GetGuid(System.Guid@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IRecordInfo.GetGuid(System.Guid*)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.GetGuid(System.Guid*)">
            <summary>Gets the GUID of the record type.</summary>
            <param name="pguid">The class GUID of the TypeInfo that describes the UDT.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-irecordinfo-getguid">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.GetName(Windows.Win32.Foundation.BSTR*)">
            <summary>Gets the name of the record type.</summary>
            <param name="pbstrName">The name.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>The caller must free the BSTR by calling <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-sysfreestring">SysFreeString</a>.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.GetSize(System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IRecordInfo.GetSize(System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.GetSize(System.UInt32*)">
            <summary>Gets the number of bytes of memory necessary to hold the record instance.</summary>
            <param name="pcbSize">The size of a record instance, in bytes.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-irecordinfo-getsize">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.GetTypeInfo(Windows.Win32.System.Com.ITypeInfo**)">
            <summary>Retrieves the type information that describes a UDT or safearray of UDTs.</summary>
            <param name="ppTypeInfo">The information type of the record.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks><b>AddRef</b> is called on the pointer <i>ppTypeInfo</i>.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.GetField(System.Void*,System.String,Windows.Win32.System.Variant.VARIANT@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IRecordInfo.GetField(System.Void*,Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Variant.VARIANT*)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.GetField(System.Void*,Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Variant.VARIANT*)">
            <summary>Returns a pointer to the VARIANT containing the value of a given field name.</summary>
            <param name="pvData">The instance of a record.</param>
            <param name="szFieldName">The field name.</param>
            <param name="pvarField">The VARIANT that you want to hold the value of the field name, <i>szFieldName</i>. On return, places a copy of the field's value in the variant.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>The VARIANT that you pass in contains a copy of the field's value upon return. If you modify the VARIANT then the underlying record field does not change. The caller allocates memory of the VARIANT. The method <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-variantclear">VariantClear</a> is called for <i>pvarField</i> before copying.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-irecordinfo-getfield#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.GetFieldNoCopy(System.Void*,System.String,Windows.Win32.System.Variant.VARIANT@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IRecordInfo.GetFieldNoCopy(System.Void*,Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Variant.VARIANT*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.GetFieldNoCopy(System.Void*,Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Variant.VARIANT*,System.Void**)">
            <summary>Returns a pointer to the value of a given field name without copying the value and allocating resources.</summary>
            <param name="pvData">The instance of a record.</param>
            <param name="szFieldName">The name of the field.</param>
            <param name="pvarField">The VARIANT that will contain the UDT upon return.</param>
            <param name="ppvDataCArray">Receives the value of the field upon return.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>Upon return, the VARIANT you pass contains a direct pointer to the record's field, <i>ppvDataCArray</i>. If you modify the VARIANT, then the underlying record field will change. The caller allocates memory of the VARIANT, but does not own the memory so cannot free <i>pvarField</i>. This method calls <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-variantclear">VariantClear</a> for <i>pvarField</i> before filling in the requested field.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-irecordinfo-getfieldnocopy#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.PutField(System.UInt32,System.Void*,System.String,Windows.Win32.System.Variant.VARIANT@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IRecordInfo.PutField(System.UInt32,System.Void*,Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Variant.VARIANT*)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.PutField(System.UInt32,System.Void*,Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Variant.VARIANT*)">
            <summary>Puts a variant into a field.</summary>
            <param name="wFlags">
            <para>The only legal values for the wFlags parameter is INVOKE_PROPERTYPUT or INVOKE_PROPERTYPUTREF. If INVOKE_PROPERTYPUTREF is passed in then <b>PutField</b> just assigns the value of the variant that is passed in to the field using normal coercion rules. If INVOKE_PROPERTYPUT is passed in then specific rules apply. If the field is declared as a class that derives from <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-idispatch">IDispatch</a> and the field's value is NULL then an error will be returned. If the field's value is not NULL then the variant will be passed to the default property supported by the object referenced by the field. If the field is not declared as a class derived from <b>IDispatch</b> then an error will be returned. If the field is declared as a variant of type VT_Dispatch then the default value of the object is assigned to the field. Otherwise, the variant's value is assigned to the field.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-irecordinfo-putfield#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pvData">The pointer to an instance of the record.</param>
            <param name="szFieldName">The name of the field of the record.</param>
            <param name="pvarField">The pointer to the variant.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-irecordinfo-putfield">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.PutFieldNoCopy(System.UInt32,System.Void*,System.String,Windows.Win32.System.Variant.VARIANT@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IRecordInfo.PutFieldNoCopy(System.UInt32,System.Void*,Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Variant.VARIANT*)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.PutFieldNoCopy(System.UInt32,System.Void*,Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Variant.VARIANT*)">
            <summary>Passes ownership of the data to the assigned field by placing the actual data into the field.</summary>
            <param name="wFlags">The only legal values for the wFlags parameter is INVOKE_PROPERTYPUT or INVOKE_PROPERTYPUTREF.</param>
            <param name="pvData">An instance of the record described by <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-irecordinfo">IRecordInfo</a>.</param>
            <param name="szFieldName">The name of the field of the record.</param>
            <param name="pvarField">The variant to be put into the field.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-irecordinfo-putfieldnocopy">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.GetFieldNames(System.UInt32@,Windows.Win32.Foundation.BSTR*)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IRecordInfo.GetFieldNames(System.UInt32*,Windows.Win32.Foundation.BSTR*)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.GetFieldNames(System.UInt32*,Windows.Win32.Foundation.BSTR*)">
            <summary>Gets the names of the fields of the record.</summary>
            <param name="pcNames">The number of names to return.</param>
            <param name="rgBstrNames">
            <para>The name of the array of type BSTR. If the <i>rgBstrNames</i> parameter is NULL, then <i>pcNames</i> is returned with the number of field names. It the <i>rgBstrNames</i> parameter is not NULL, then the string names contained in <i>rgBstrNames</i> are returned. If the number of names in <i>pcNames</i> and <i>rgBstrNames</i> are not equal then the lesser number of the two is the number of returned field names. The caller needs to free the BSTRs inside the array returned in <i>rgBstrNames</i>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-irecordinfo-getfieldnames#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>The caller should allocate memory for the array of BSTRs. If the array is larger than needed, set the unused portion to 0. On return, the caller will need to free each contained BSTR using <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-sysfreestring">SysFreeString</a>. In case of out of memory, <i>pcNames</i> points to error code.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-irecordinfo-getfieldnames#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.IsMatchingType(Windows.Win32.System.Ole.IRecordInfo*)">
            <summary>Determines whether the record that is passed in matches that of the current record information.</summary>
            <param name="pRecordInfo">The information of the record.</param>
            <returns>
            <para></para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-irecordinfo-ismatchingtype">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.RecordCreate">
            <summary>Allocates memory for a new record, initializes the instance and returns a pointer to the record.</summary>
            <returns>This method returns a pointer to the created record.</returns>
            <remarks>
            <para>The memory is set to zeros before it is returned. The records created must be freed by calling <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-irecordinfo-recorddestroy">RecordDestroy</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-irecordinfo-recordcreate#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.RecordCreateCopy(System.Void*,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IRecordInfo.RecordCreateCopy(System.Void*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.RecordCreateCopy(System.Void*,System.Void**)">
            <summary>Creates a copy of an instance of a record to the specified location.</summary>
            <param name="pvSource">An instance of the record to be copied.</param>
            <param name="ppvDest">The new record with data copied from <i>pvSource</i>.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>The records created must be freed by calling <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-irecordinfo-recorddestroy">RecordDestroy</a>.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Ole.IRecordInfo.RecordDestroy(System.Void*)">
            <summary>Releases the resources and deallocates the memory of the record.</summary>
            <param name="pvRecord">An instance of the record to be destroyed.</param>
            <returns>
            <para>This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-irecordinfo-recordclear">RecordClear</a> is called to release the resources held by the instance of a record without deallocating memory. <div class="alert"><b>Note</b>  This method can only be called on records allocated through <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-irecordinfo-recordcreate">RecordCreate</a> and <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-irecordinfo-recordcreatecopy">RecordCreateCopy</a>. If you allocate the record yourself, you cannot call this method.</div> <div> </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-irecordinfo-recorddestroy#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Ole.IRecordInfo.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{0000002f-0000-0000-c000-000000000046}</value>
        </member>
        <member name="T:Windows.Win32.System.Ole.PARAMDESC">
            <summary>Contains information needed for transferring a structure element, parameter, or function return value between processes.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/ns-oaidl-paramdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Ole.PARAMDESC.pparamdescex">
            <summary>The default value for the parameter, if PARAMFLAG_FHASDEFAULT is specified in <b>wParamFlags</b>.</summary>
        </member>
        <member name="F:Windows.Win32.System.Ole.PARAMDESC.wParamFlags">
            <summary>The parameter flags. See <a href="https://docs.microsoft.com/previous-versions/windows/desktop/automat/paramflags">PARAMFLAG Constants</a>.</summary>
        </member>
        <member name="T:Windows.Win32.System.Ole.PARAMDESCEX">
            <summary>Contains information about the default value of a parameter.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/ns-oaidl-paramdescex">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Ole.PARAMDESCEX.cBytes">
            <summary>The size of the structure.</summary>
        </member>
        <member name="F:Windows.Win32.System.Ole.PARAMDESCEX.varDefaultValue">
            <summary>The default value of the parameter.</summary>
        </member>
        <member name="T:Windows.Win32.System.Ole.PICTYPE">
            <summary>Describe the type of a picture object as returned by IPicture get\_Type, as well as to describe the type of picture in the picType member of the PICTDESC structure that is passed to OleCreatePictureIndirect.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/com/pictype-constants">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.System.Variant.VARIANT">
            <summary>VARIANTARG describes arguments passed within DISPPARAMS, and VARIANT to specify variant data that cannot be passed by reference.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/oaidl/ns-oaidl-variant">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Variant.VARIANT.FromObject(System.Object)">
            <summary>
             Converts the given object to <see cref="T:Windows.Win32.System.Variant.VARIANT"/>.
            </summary>
        </member>
        <member name="T:Windows.Win32.System.Variant.VARENUM">
            <summary>Specifies the variant types.</summary>
            <remarks>
            <para>The following table shows where these values can be used. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypes/ne-wtypes-varenum#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_EMPTY">
            <summary>Not specified.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_NULL">
            <summary>Null.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_I2">
            <summary>A 2-byte integer.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_I4">
            <summary>A 4-byte integer.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_R4">
            <summary>A 4-byte real.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_R8">
            <summary>An 8-byte real.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_CY">
            <summary>Currency.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_DATE">
            <summary>A date.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_BSTR">
            <summary>A string.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_DISPATCH">
            <summary>An <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-idispatch">IDispatch</a> pointer.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_ERROR">
            <summary>An SCODE value.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_BOOL">
            <summary>A Boolean value. True is -1 and false is 0.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_VARIANT">
            <summary>A variant pointer.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_UNKNOWN">
            <summary>An <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a> pointer.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_DECIMAL">
            <summary>A 16-byte fixed-pointer value.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_I1">
            <summary>A character.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_UI1">
            <summary>An unsigned character.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_UI2">
            <summary>An unsigned short.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_UI4">
            <summary>An unsigned long.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_I8">
            <summary>A 64-bit integer.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_UI8">
            <summary>A 64-bit unsigned integer.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_INT">
            <summary>An integer.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_UINT">
            <summary>An unsigned integer.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_VOID">
            <summary>A C-style void.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_HRESULT">
            <summary>An HRESULT value.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_PTR">
            <summary>A pointer type.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_SAFEARRAY">
            <summary>A safe array. Use VT_ARRAY in VARIANT.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_CARRAY">
            <summary>A C-style array.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_USERDEFINED">
            <summary>A user-defined type.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_LPSTR">
            <summary>A null-terminated string.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_LPWSTR">
            <summary>A wide null-terminated string.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_RECORD">
            <summary>A user-defined type.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_INT_PTR">
            <summary>A signed machine register size width.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_UINT_PTR">
            <summary>An unsigned machine register size width.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_FILETIME">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-filetime">FILETIME</a> value.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_BLOB">
            <summary>Length-prefixed bytes.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_STREAM">
            <summary>The name of the stream follows.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_STORAGE">
            <summary>The name of the storage follows.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_STREAMED_OBJECT">
            <summary>The stream contains an object.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_STORED_OBJECT">
            <summary>The storage contains an object.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_BLOB_OBJECT">
            <summary>The blob contains an object.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_CF">
            <summary>A clipboard format.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_CLSID">
            <summary>A class ID.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_VERSIONED_STREAM">
            <summary>A stream with a GUID version.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_BSTR_BLOB">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_VECTOR">
            <summary>A simple counted array.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_ARRAY">
            <summary>A SAFEARRAY pointer.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_BYREF">
            <summary>A void pointer for local use.</summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_RESERVED">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_ILLEGAL">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_ILLEGALMASKED">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.System.Variant.VARENUM.VT_TYPEMASK">
            <summary></summary>
        </member>
        <member name="P:Windows.Win32.ComHelpers.BuiltInComSupported">
            <summary>
             Returns <see langword="true"/> if built-in COM interop is supported. When using AOT or trimming this will
             return <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Windows.Win32.ComHelpers.GetComScope``1(System.Object)">
            <summary>
             Gets a pointer for the specified <typeparamref name="T"/> for the given <paramref name="object"/>. Throws if
             the desired pointer can not be obtained.
            </summary>
        </member>
        <member name="M:Windows.Win32.ComHelpers.TryGetComScope``1(System.Object)">
            <summary>
             Attempts to get a pointer for the specified <typeparamref name="T"/> for the given <paramref name="object"/>.
            </summary>
        </member>
        <member name="M:Windows.Win32.ComHelpers.TryGetComScope``1(System.Object,Windows.Win32.Foundation.HRESULT@)">
            <summary>
             Attempts to get a pointer for the specified <typeparamref name="T"/> for the given <paramref name="object"/>.
            </summary>
        </member>
        <member name="M:Windows.Win32.ComHelpers.GetComPointer``1(System.Object)">
            <summary>
             Gets the specified <typeparamref name="T"/> interface for the given <paramref name="object"/>. Throws if
             the desired pointer can not be obtained.
            </summary>
        </member>
        <member name="M:Windows.Win32.ComHelpers.TryGetComPointer``1(System.Object)">
            <summary>
             Attempts to get the specified <typeparamref name="T"/> interface for the given <paramref name="object"/>.
            </summary>
            <returns>The requested pointer or <see langword="null"/> if unsuccessful.</returns>
        </member>
        <member name="M:Windows.Win32.ComHelpers.SupportsInterface``1(System.Object)">
            <summary>
             Queries for the given interface and releases it.
             Note that this method should only be used for the purposes of checking if the object supports a given interface.
             If that interface is needed, it is best try to get the ComScope directly to avoid querying twice.
            </summary>
        </member>
        <member name="M:Windows.Win32.ComHelpers.TryGetComPointer``1(System.Object,Windows.Win32.Foundation.HRESULT@)">
            <summary>
             Attempts to get the specified <typeparamref name="T"/> interface for the given <paramref name="object"/>.
            </summary>
            <param name="result">
             Typically either <see cref="F:Windows.Win32.Foundation.HRESULT.S_OK"/> or <see cref="F:Windows.Win32.Foundation.HRESULT.E_POINTER"/>. Check for success, not
             specific results.
            </param>
            <returns>The requested pointer or <see langword="null"/> if unsuccessful.</returns>
        </member>
        <member name="M:Windows.Win32.ComHelpers.TryUnwrapComWrapperCCW``1(Windows.Win32.System.Com.IUnknown*,``0@)">
            <summary>
             Attempts to unwrap a ComWrapper CCW as a particular managed object.
            </summary>
        </member>
        <member name="M:Windows.Win32.ComHelpers.TryGetObjectForIUnknown``2(Windows.Win32.Foundation.ComScope{``1},``0@)">
            <inheritdoc cref="M:Windows.Win32.ComHelpers.TryGetObjectForIUnknown``1(Windows.Win32.System.Com.IUnknown*,System.Boolean,``0@)"/>
        </member>
        <member name="M:Windows.Win32.ComHelpers.TryGetObjectForIUnknown``2(``1*,``0@)">
            <inheritdoc cref="M:Windows.Win32.ComHelpers.TryGetObjectForIUnknown``1(Windows.Win32.System.Com.IUnknown*,System.Boolean,``0@)"/>
        </member>
        <member name="M:Windows.Win32.ComHelpers.TryGetObjectForIUnknown``1(Windows.Win32.System.Com.IUnknown*,``0@)">
            <inheritdoc cref="M:Windows.Win32.ComHelpers.TryGetObjectForIUnknown``1(Windows.Win32.System.Com.IUnknown*,System.Boolean,``0@)"/>
        </member>
        <member name="M:Windows.Win32.ComHelpers.TryGetObjectForIUnknown``1(Windows.Win32.System.Com.IUnknown*,System.Boolean,``0@)">
            <summary>
             Attempts to get a managed wrapper of the specified type for the given COM interface.
            </summary>
            <param name="takeOwnership">
             When <see langword="true"/>, releases the original <paramref name="unknown"/> whether successful or not.
            </param>
        </member>
        <member name="M:Windows.Win32.ComHelpers.WrapsManagedObject``1(System.Object,``0*)">
            <summary>
             Returns <see langword="true"/> if the given <paramref name="object"/> is projected as the given <paramref name="comPointer"/>.
            </summary>
        </member>
        <member name="M:Windows.Win32.ComHelpers.GetObjectForIUnknown``1(``0*)">
            <inheritdoc cref="M:Windows.Win32.ComHelpers.GetObjectForIUnknown(Windows.Win32.System.Com.IUnknown*)"/>
        </member>
        <member name="M:Windows.Win32.ComHelpers.GetObjectForIUnknown``1(Windows.Win32.Foundation.ComScope{``0})">
            <inheritdoc cref="M:Windows.Win32.ComHelpers.GetObjectForIUnknown(Windows.Win32.System.Com.IUnknown*)"/>
        </member>
        <member name="M:Windows.Win32.ComHelpers.GetObjectForIUnknown(Windows.Win32.System.Com.IUnknown*)">
            <summary>
             <see cref="T:System.Runtime.InteropServices.ComWrappers"/> capable wrapper for <see cref="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="unknown"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Windows.Win32.ComHelpers.GetRegisteredTypeInfo(System.Guid,System.UInt16,System.UInt16,System.Guid)">
            <summary>
             Find the given interface's <see cref="T:Windows.Win32.System.Com.ITypeInfo"/> from the specified type library.
            </summary>
        </member>
        <member name="M:Windows.Win32.ComHelpers.PopulateIUnknownImpl``1(Windows.Win32.System.Com.IUnknown.Vtbl*)">
            <summary>
             <see cref="T:Windows.Win32.System.Com.IUnknown"/> vtable population hook for CsWin32's generated <see cref="T:Windows.Win32.IVTable"/> implementation.
            </summary>
        </member>
        <member name="T:Windows.Win32.UI.Controls.Dialogs.DEVNAMES">
             <summary>
              Contains strings that identify the driver, device, and output port names for a printer.
             </summary>
             <remarks>
              <para>
               <see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-devnames">Learn more about this API from learn.microsoft.com</see>.
              </para>
             </remarks>
             <devdoc>
              Manually copied from a 64 bit project CsWin32 generated wrapper. We can't directly use CsWin32 for this as it
              technically isn't compatible with AnyCPU. For our usages this works fine on both 32 bit and 64 bit.
            
              This is defined with single byte packing on 32 bit, but there are no gaps as everything naturally packs with no
              gaps on 32 bit. Issues would arise if this was contained in another native struct where it wouldn't start 32 bit
              aligned due to the single byte packing.
            
              https://github.com/microsoft/CsWin32/issues/882
             </devdoc>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.DEVNAMES.wDriverOffset">
            <summary>
            <para>Type: <b>WORD</b> The offset, in characters, from the beginning of this structure to a null-terminated string that contains the file name (without the extension) of the device driver. On input, this string is used to determine the printer to display initially in the dialog box.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-devnames#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.DEVNAMES.wDeviceOffset">
            <summary>
            <para>Type: <b>WORD</b> The offset, in characters, from the beginning of this structure to the null-terminated string that contains the name of the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-devnames#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.DEVNAMES.wOutputOffset">
            <summary>
            <para>Type: <b>WORD</b> The offset, in characters, from the beginning of this structure to the null-terminated string that contains the device name for the physical output medium (output port).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-devnames#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.DEVNAMES.wDefault">
            <summary>
            <para>Type: <b>WORD</b> Indicates whether the strings contained in the <b>DEVNAMES</b> structure identify the default printer. This string is used to verify that the default printer has not changed since the last print operation. If any of the strings do not match, a warning message is displayed informing the user that the document may need to be reformatted. On output, the <b>wDefault</b> member is changed only if the <b>Print Setup</b> dialog box was displayed and the user chose the <b>OK</b> button. The <b>DN_DEFAULTPRN</b> flag is used if the default printer was selected. If a specific printer is selected, the flag is not used. All other flags in this member are reserved for internal use by the dialog box procedure for the <b>Print</b> property sheet or <b>Print</b> dialog box.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-devnames#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW">
             <summary>
              Contains information that the PrintDlgEx function uses to initialize the Print property sheet. After the user
              closes the property sheet, the system uses this structure to return information about the user's selections.
             </summary>
             <remarks>
              <para>
               <see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-printdlgexw#">Read more on learn.microsoft.com</see>.
              </para>
             </remarks>
             <devdoc>
              Manually copied from a 64 bit project CsWin32 generated wrapper. We can't directly use CsWin32 for this as it
              technically isn't compatible with AnyCPU. For our usages this works fine on both 32 bit and 64 bit.
            
              This is defined with single byte packing on 32 bit, but there are no gaps as everything naturally packs with no
              gaps on 32 bit. Issues would arise if this was contained in another native struct where it wouldn't start 32 bit
              aligned due to the single byte packing.
            
              https://github.com/microsoft/CsWin32/issues/882
             </devdoc>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW.lStructSize">
            <summary>
             <para>Type: <b>DWORD</b> The structure size, in bytes.</para>
             <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-printdlgexw#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW.hwndOwner">
            <summary>
             <para>Type: <b>HWND</b> A handle to the window that owns the property sheet. This member must be a valid window handle; it cannot be <b>NULL</b>.</para>
             <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-printdlgexw#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW.hDevMode">
            <summary>
             <para>Type: <b>HGLOBAL</b> A handle to a movable global memory object that contains a <a href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodew">DEVMODE</a> structure. If <b>hDevMode</b> is not <b>NULL</b> on input, you must allocate a movable block of memory for the <b>DEVMODE</b> structure and initialize its members. The <a href="https://learn.microsoft.com/previous-versions/windows/desktop/legacy/ms646942(v=vs.85)">PrintDlgEx</a> function uses the input data to initialize the controls in the property sheet. When <b>PrintDlgEx</b> returns, the <b>DEVMODE</b> members indicate the user's input. If <b>hDevMode</b> is <b>NULL</b> on input, <a href="https://learn.microsoft.com/previous-versions/windows/desktop/legacy/ms646942(v=vs.85)">PrintDlgEx</a> allocates memory for the <a href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodea">DEVMODE</a> structure, initializes its members to indicate the user's input, and returns a handle that identifies it. For more information about the <b>hDevMode</b> and <b>hDevNames</b> members, see the Remarks section at the end of this topic.</para>
             <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-printdlgexw#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW.hDevNames">
            <summary>
             <para>Type: <b>HGLOBAL</b> A handle to a movable global memory object that contains a <a href="https://learn.microsoft.com/windows/desktop/api/commdlg/ns-commdlg-devnames">DEVNAMES</a> structure. If <b>hDevNames</b> is not <b>NULL</b> on input, you must allocate a movable block of memory for the <b>DEVNAMES</b> structure and initialize its members. The <a href="https://learn.microsoft.com/previous-versions/windows/desktop/legacy/ms646942(v=vs.85)">PrintDlgEx</a> function uses the input data to initialize the controls in the property sheet. When <b>PrintDlgEx</b> returns, the <b>DEVNAMES</b> members contain information for the printer chosen by the user. You can use this information to create a device context or an information context. The <b>hDevNames</b> member can be <b>NULL</b>, in which case, <a href="https://learn.microsoft.com/previous-versions/windows/desktop/legacy/ms646942(v=vs.85)">PrintDlgEx</a> allocates memory for the <a href="https://learn.microsoft.com/windows/desktop/api/commdlg/ns-commdlg-devnames">DEVNAMES</a> structure, initializes its members to indicate the user's input, and returns a handle that identifies it. For more information about the <b>hDevMode</b> and <b>hDevNames</b> members, see the Remarks section at the end of this topic.</para>
             <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-printdlgexw#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW.hDC">
            <summary>
             <para>Type: <b>HDC</b> A handle to a device context or an information context, depending on whether the <b>Flags</b> member specifies the <b>PD_RETURNDC</b> or <b>PC_RETURNIC</b> flag. If neither flag is specified, the value of this member is undefined. If both flags are specified, <b>PD_RETURNDC</b> has priority.</para>
             <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-printdlgexw#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW.Flags">
            <summary>Type: <b>DWORD</b></summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW.Flags2">
            <summary>Type: <b>DWORD</b></summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW.ExclusionFlags">
            <summary>
             <para>Type: <b>DWORD</b> A set of bit flags that can exclude items from the printer driver property pages in the <b>Print</b> property sheet. This value is used only if the <b>PD_EXCLUSIONFLAGS</b> flag is set in the <b>Flags</b> member. Exclusion flags should be used only if the item to be excluded will be included on either the <b>General</b> page or on an application-defined page in the <b>Print</b> property sheet. This member can specify the following flag.</para>
             <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-printdlgexw#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW.nPageRanges">
            <summary>
             <para>Type: <b>DWORD</b> On input, set this member to the initial number of page ranges specified in the <b>lpPageRanges</b> array. When the <a href="https://learn.microsoft.com/previous-versions/windows/desktop/legacy/ms646942(v=vs.85)">PrintDlgEx</a> function returns, <b>nPageRanges</b> indicates the number of user-specified page ranges stored in the <b>lpPageRanges</b> array. If the <b>PD_NOPAGENUMS</b> flag is specified, this value is not valid.</para>
             <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-printdlgexw#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW.nMaxPageRanges">
            <summary>
             <para>Type: <b>DWORD</b> The size, in array elements, of the <b>lpPageRanges</b> buffer. This value indicates the maximum number of page ranges that can be stored in the array. If the <b>PD_NOPAGENUMS</b> flag is specified, this value is not valid. If the <b>PD_NOPAGENUMS</b> flag is not specified, this value must be greater than zero.</para>
             <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-printdlgexw#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW.lpPageRanges">
            <summary>
             <para>Type: <b>LPPRINTPAGERANGE</b> Pointer to a buffer containing an array of <a href="https://learn.microsoft.com/windows/desktop/api/commdlg/ns-commdlg-printpagerange">PRINTPAGERANGE</a> structures. On input, the array contains the initial page ranges to display in the <b>Pages</b> edit control. When the <a href="https://learn.microsoft.com/previous-versions/windows/desktop/legacy/ms646942(v=vs.85)">PrintDlgEx</a> function returns, the array contains the page ranges specified by the user. If the <b>PD_NOPAGENUMS</b> flag is specified, this value is not valid. If the <b>PD_NOPAGENUMS</b> flag is not specified, <b>lpPageRanges</b> must be non-<b>NULL</b>.</para>
             <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-printdlgexw#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW.nMinPage">
            <summary>
            <para>Type: <b>DWORD</b> The minimum value for the page ranges specified in the <b>Pages</b> edit control. If the <b>PD_NOPAGENUMS</b> flag is specified, this value is not valid.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-printdlgexw#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW.nMaxPage">
            <summary>
            <para>Type: <b>DWORD</b> The maximum value for the page ranges specified in the <b>Pages</b> edit control. If the <b>PD_NOPAGENUMS</b> flag is specified, this value is not valid.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-printdlgexw#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW.nCopies">
            <summary>
            <para>Type: <b>DWORD</b> Contains the initial number of copies for the <b>Copies</b> edit control if <b>hDevMode</b> is <b>NULL</b>; otherwise, the <b>dmCopies</b> member of the <a href="https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodea">DEVMODE</a> structure contains the initial value. When <a href="https://learn.microsoft.com/previous-versions/windows/desktop/legacy/ms646942(v=vs.85)">PrintDlgEx</a> returns, <b>nCopies</b> contains the actual number of copies the application must print. This value depends on whether the application or the printer driver is responsible for printing multiple copies. If the <b>PD_USEDEVMODECOPIESANDCOLLATE</b> flag is set in the <b>Flags</b> member, <b>nCopies</b> is always 1 on return, and the printer driver is responsible for printing multiple copies. If the flag is not set, the application is responsible for printing the number of copies specified by <b>nCopies</b>. For more information, see the description of the <b>PD_USEDEVMODECOPIESANDCOLLATE</b> flag.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-printdlgexw#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW.hInstance">
            <summary>
            <para>Type: <b>HINSTANCE</b> If the <b>PD_ENABLEPRINTTEMPLATE</b> flag is set in the <b>Flags</b> member, <b>hInstance</b> is a handle to the application or module instance that contains the dialog box template named by the <b>lpPrintTemplateName</b> member. If the <b>PD_ENABLEPRINTTEMPLATEHANDLE</b> flag is set in the <b>Flags</b> member, <b>hInstance</b> is a handle to a memory object containing a dialog box template. If neither of the template flags is set in the <b>Flags</b> member, <b>hInstance</b> should be <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-printdlgexw#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW.lpPrintTemplateName">
            <summary>
            <para>Type: <b>LPCTSTR</b> The name of the dialog box template resource in the module identified by the <b>hInstance</b> member. This template replaces the default dialog box template in the lower portion of the <b>General</b> page. The default template contains controls similar to those of the <b>Print</b> dialog box. This member is ignored unless the PD_ENABLEPRINTTEMPLATE flag is set in the <b>Flags</b> member.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-printdlgexw#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW.lpCallback">
            <summary>
            <para>Type: <b>LPUNKNOWN</b> A pointer to an application-defined callback object. The object should contain the <a href="https://learn.microsoft.com/windows/desktop/api/commdlg/nn-commdlg-iprintdialogcallback">IPrintDialogCallback</a> class to receive messages for the child dialog box in the lower portion of the <b>General</b> page. The callback object should also contain the <a href="https://learn.microsoft.com/windows/desktop/api/ocidl/nn-ocidl-iobjectwithsite">IObjectWithSite</a> class to receive a pointer to the <a href="https://learn.microsoft.com/windows/desktop/api/commdlg/nn-commdlg-iprintdialogservices">IPrintDialogServices</a> interface. The <a href="https://learn.microsoft.com/previous-versions/windows/desktop/legacy/ms646942(v=vs.85)">PrintDlgEx</a> function calls <a href="https://learn.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-queryinterface(q)">IUnknown::QueryInterface</a> on the callback object for both <b>IID_IPrintDialogCallback</b> and <b>IID_IObjectWithSite</b> to determine which interfaces are supported. If you do not want to retrieve any of the callback information, set <b>lpCallback</b> to <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-printdlgexw#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW.nPropertyPages">
            <summary>
            <para>Type: <b>DWORD</b> The number of property page handles in the <b>lphPropertyPages</b> array.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-printdlgexw#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW.lphPropertyPages">
            <summary>
            <para>Type: <b>HPROPSHEETPAGE*</b> Contains an array of property page handles to add to the <b>Print</b> property sheet. The additional property pages follow the <b>General</b> page. Use the <a href="https://learn.microsoft.com/windows/desktop/api/prsht/nf-prsht-createpropertysheetpagea">CreatePropertySheetPage</a> function to create these additional pages. When the <a href="https://learn.microsoft.com/previous-versions/windows/desktop/legacy/ms646942(v=vs.85)">PrintDlgEx</a> function returns, all the <b>HPROPSHEETPAGE</b> handles in the <b>lphPropertyPages</b> array have been destroyed. If <b>nPropertyPages</b> is zero, <b>lphPropertyPages</b> should be <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-printdlgexw#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW.nStartPage">
            <summary>
            <para>Type: <b>DWORD</b> The property page that is initially displayed. To display the <b>General</b> page, specify <b>START_PAGE_GENERAL</b>. Otherwise, specify the zero-based index of a property page in the array specified in the <b>lphPropertyPages</b> member. For consistency, it is recommended that the property sheet always be started on the <b>General</b> page.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-printdlgexw#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW.dwResultAction">
            <summary>Type: <b>DWORD</b></summary>
        </member>
        <member name="T:Windows.Win32.UI.Controls.Dialogs.PRINTPAGERANGE">
             <summary>
              Represents a range of pages in a print job. A print job can have more than one page range. This information is
              supplied in the <see cref="T:Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW"/> structure when calling the <see cref="M:Windows.Win32.PInvokeCore.PrintDlgEx(Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW*)"/> function.</summary>
             <remarks>
              <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-printpagerange">Learn more about this API from learn.microsoft.com</see>.</para>
             </remarks>
             <devdoc>
              Manually copied from a 64 bit project CsWin32 generated wrapper. We can't directly use CsWin32 for this as it
              technically isn't compatible with AnyCPU. For our usages this works fine on both 32 bit and 64 bit.
            
              This is defined with single byte packing on 32 bit, but there are no gaps as everything naturally packs with no
              gaps on 32 bit. Issues would arise if this was contained in another native struct where it wouldn't start 32 bit
              aligned due to the single byte packing.
            
              https://github.com/microsoft/CsWin32/issues/882
             </devdoc>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.PRINTPAGERANGE.nFromPage">
            <summary>
            <para>Type: <b>DWORD</b> The first page of the range.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-printpagerange#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Controls.Dialogs.PRINTPAGERANGE.nToPage">
            <summary>
            <para>Type: <b>DWORD</b> The last page of the range.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/commdlg/ns-commdlg-printpagerange#members">Read more on learn.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.UI.WindowsAndMessaging.ICONINFO">
            <summary>Contains information about an icon or a cursor.</summary>
            <remarks>
            <para>For monochrome icons, the <b>hbmMask</b> is twice the height of the icon (with the AND mask on top and the XOR mask on the bottom), and <b>hbmColor</b> is <b>NULL</b>. Also, in this case the height should be an even multiple of two. For color icons, the <b>hbmMask</b> and <b>hbmColor</b> bitmaps are the same size, each of which is the size of the icon. You can use a <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-getobject">GetObject</a> function to get contents of <b>hbmMask</b> and <b>hbmColor</b> in the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-bitmap">BITMAP</a> structure. The bitmap bits can be obtained with call to <a href="https://docs.microsoft.com/windows/win32/api/wingdi/nf-wingdi-getdibits">GetDIBits</a> on the bitmaps in this structure.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-iconinfo#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.ICONINFO.fIcon">
            <summary>
            <para>Type: <b>BOOL</b> Specifies whether this structure defines an icon or a cursor. A value of <b>TRUE</b> specifies an icon; <b>FALSE</b> specifies a cursor.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-iconinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.ICONINFO.xHotspot">
            <summary>
            <para>Type: <b>DWORD</b> The x-coordinate of a cursor's hot spot. If this structure defines an icon, the hot spot is always in the center of the icon, and this member is ignored.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-iconinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.ICONINFO.yHotspot">
            <summary>
            <para>Type: <b>DWORD</b> The y-coordinate of the cursor's hot spot. If this structure defines an icon, the hot spot is always in the center of the icon, and this member is ignored.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-iconinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.ICONINFO.hbmMask">
            <summary>
            <para>Type: <b>HBITMAP</b> A handle to the icon monochrome mask <a href="https://docs.microsoft.com/windows/win32/gdi/bitmaps">bitmap</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-iconinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.ICONINFO.hbmColor">
            <summary>
            <para>Type: <b>HBITMAP</b> A handle to the icon color <a href="https://docs.microsoft.com/windows/win32/gdi/bitmaps">bitmap</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-iconinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.UI.WindowsAndMessaging.NONCLIENTMETRICSW">
            <summary>Contains the scalable metrics associated with the nonclient area of a nonminimized window. (Unicode)</summary>
            <remarks>
            <para>If the <b>iPaddedBorderWidth</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-nonclientmetricsa">NONCLIENTMETRICS</a> structure is present, this structure is 4 bytes larger than for an application that is compiled with <b>_WIN32_WINNT</b> less than or equal to 0x0502. For more information about conditional compilation, see <a href="https://docs.microsoft.com/windows/desktop/WinProg/using-the-windows-headers">Using the Windows Headers</a>. <b>Windows Server 2003 and Windows XP/2000:  </b>If an application  that is compiled for Windows Server 2008 or Windows Vista must also run on Windows Server 2003 or Windows XP/2000, use the <a href="https://docs.microsoft.com/windows/desktop/api/sysinfoapi/nf-sysinfoapi-getversionexa">GetVersionEx</a> function to check the operating system version at run time and, if the application is running on Windows Server 2003 or Windows XP/2000, subtract the size of the <b>iPaddedBorderWidth</b> member from the <b>cbSize</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-nonclientmetricsa">NONCLIENTMETRICS</a> structure before calling the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-systemparametersinfoa">SystemParametersInfo</a> function.</para>
            <para>> [!NOTE] > The winuser.h header defines NONCLIENTMETRICS as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-nonclientmetricsw#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.NONCLIENTMETRICSW.cbSize">
            <summary>The size of the structure, in bytes. The caller must set this to <c>sizeof(NONCLIENTMETRICS)</c>. For   information about application compatibility, see Remarks.</summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.NONCLIENTMETRICSW.iBorderWidth">
            <summary>The thickness of the sizing border, in pixels. The default is 1 pixel.</summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.NONCLIENTMETRICSW.iScrollWidth">
            <summary>The width of a standard vertical scroll bar, in pixels.</summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.NONCLIENTMETRICSW.iScrollHeight">
            <summary>The height of a standard horizontal scroll bar, in pixels.</summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.NONCLIENTMETRICSW.iCaptionWidth">
            <summary>The width of caption buttons, in pixels.</summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.NONCLIENTMETRICSW.iCaptionHeight">
            <summary>The height of caption buttons, in pixels.</summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.NONCLIENTMETRICSW.lfCaptionFont">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-logfonta">LOGFONT</a> structure that contains information about the caption font.</summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.NONCLIENTMETRICSW.iSmCaptionWidth">
            <summary>The width of small caption buttons, in pixels.</summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.NONCLIENTMETRICSW.iSmCaptionHeight">
            <summary>The height of small captions, in pixels.</summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.NONCLIENTMETRICSW.lfSmCaptionFont">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-logfonta">LOGFONT</a> structure that contains information about the small caption font.</summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.NONCLIENTMETRICSW.iMenuWidth">
            <summary>The width of menu-bar buttons, in pixels.</summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.NONCLIENTMETRICSW.iMenuHeight">
            <summary>The height of a menu bar, in pixels.</summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.NONCLIENTMETRICSW.lfMenuFont">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-logfonta">LOGFONT</a> structure that contains information about the font used in menu bars.</summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.NONCLIENTMETRICSW.lfStatusFont">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-logfonta">LOGFONT</a> structure that contains information about the font used in status bars and tooltips.</summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.NONCLIENTMETRICSW.lfMessageFont">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-logfonta">LOGFONT</a> structure that contains information about the font used in message boxes.</summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.NONCLIENTMETRICSW.iPaddedBorderWidth">
            <summary>
            <para>The thickness of the padded border, in pixels. The default value is 4 pixels. The <b>iPaddedBorderWidth</b> and <b>iBorderWidth</b> members are combined for both resizable and nonresizable windows in  the Windows Aero desktop experience. To compile an application that uses this member, define <b>_WIN32_WINNT</b> as 0x0600 or later. For more information, see Remarks. <b>Windows Server 2003 and Windows XP/2000:  </b>This member is not supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-nonclientmetricsw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.UI.Accessibility.HIGHCONTRASTW">
            <summary>Contains information about the high contrast accessibility feature. (Unicode)</summary>
            <remarks>
            <para>An application uses this structure when calling the[SystemParametersInfoW function](nf-winuser-systemparametersinfow.md) with the <b>SPI_GETHIGHCONTRAST</b> or <b>SPI_SETHIGHCONTRAST</b> value. When using <b>SPI_GETHIGHCONTRAST</b>, an application must specify the <b>cbSize</b> member of the <b>HIGHCONTRAST</b> structure; the <b>SystemParametersInfo</b> function fills the remaining members. An application must specify all structure members when using the <b>SPI_SETHIGHCONTRAST</b> value.</para>
            <para>> [!NOTE] > The winuser.h header defines HIGHCONTRAST as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-highcontrastw#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Accessibility.HIGHCONTRASTW.cbSize">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Specifies the size, in bytes, of this structure.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-highcontrastw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Accessibility.HIGHCONTRASTW.dwFlags">
            <summary>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">DWORD</a></b></summary>
        </member>
        <member name="F:Windows.Win32.UI.Accessibility.HIGHCONTRASTW.lpszDefaultScheme">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPTSTR</a></b> Points to a string that contains the name of the color scheme that will be set to the default scheme. The system allocates this buffer, free it with LocalFree.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-highcontrastw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="P:Windows.Win32.__char_32.Length">
            <summary>The length of the inline array.</summary>
        </member>
        <member name="P:Windows.Win32.__char_32.Item(System.Int32)">
            <summary>
            Gets a ref to an individual element of the inline array.
            ⚠ Important ⚠: When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
            </summary>
        </member>
        <member name="M:Windows.Win32.__char_32.AsSpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="M:Windows.Win32.__char_32.AsReadOnlySpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="M:Windows.Win32.__char_32.ToString(System.Int32)">
            <summary>
            Copies the fixed array to a new string up to the specified length regardless of whether there are null terminating characters.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="length"/> is less than <c>0</c> or greater than <see cref="P:Windows.Win32.__char_32.Length"/>.
            </exception>
        </member>
        <member name="M:Windows.Win32.__char_32.ToString">
            <summary>
            Copies the fixed array to a new string, stopping before the first null terminator character or at the end of the fixed array (whichever is shorter).
            </summary>
        </member>
        <member name="P:Windows.Win32.IComIID.Guid">
            <summary>The IID guid for this interface.</summary>
            <remarks>The <see cref="P:Windows.Win32.IComIID.Guid" /> reference that is returned comes from a permanent memory address, and is therefore safe to convert to a pointer and pass around or hold long-term.</remarks>
        </member>
        <member name="T:Windows.Win32.IVTable">
            <summary>
            Non generic interface that allows constraining against a COM wrapper type directly. COM structs should
            implement <see cref="T:Windows.Win32.IVTable`2"/>.
            </summary>
        </member>
        <member name="M:Windows.Win32.System_Com_IGlobalInterfaceTable_Extensions.RegisterInterfaceInGlobal(Windows.Win32.System.Com.IGlobalInterfaceTable.Interface,Windows.Win32.System.Com.IUnknown*,System.Guid@,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IGlobalInterfaceTable.Interface.RegisterInterfaceInGlobal(Windows.Win32.System.Com.IUnknown*,System.Guid*,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_IGlobalInterfaceTable_Extensions.GetInterfaceFromGlobal(Windows.Win32.System.Com.IGlobalInterfaceTable.Interface,System.UInt32,System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IGlobalInterfaceTable.Interface.GetInterfaceFromGlobal(System.UInt32,System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_IStream_Extensions.Stat(Windows.Win32.System.Com.IStream.Interface,Windows.Win32.System.Com.STATSTG@,System.UInt32)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IStream.Interface.Stat(Windows.Win32.System.Com.STATSTG*,System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeComp_Extensions.Bind(Windows.Win32.System.Com.ITypeComp.Interface,Windows.Win32.Foundation.PWSTR,System.UInt32,System.UInt16,Windows.Win32.System.Com.ITypeInfo**,Windows.Win32.System.Com.DESCKIND@,Windows.Win32.System.Com.BINDPTR@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeComp.Interface.Bind(Windows.Win32.Foundation.PWSTR,System.UInt32,System.UInt16,Windows.Win32.System.Com.ITypeInfo**,Windows.Win32.System.Com.DESCKIND*,Windows.Win32.System.Com.BINDPTR*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeInfo_Extensions.GetTypeAttr(Windows.Win32.System.Com.ITypeInfo.Interface,Windows.Win32.System.Com.TYPEATTR*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.Interface.GetTypeAttr(Windows.Win32.System.Com.TYPEATTR**)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeInfo_Extensions.GetFuncDesc(Windows.Win32.System.Com.ITypeInfo.Interface,System.UInt32,Windows.Win32.System.Com.FUNCDESC*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.Interface.GetFuncDesc(System.UInt32,Windows.Win32.System.Com.FUNCDESC**)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeInfo_Extensions.GetVarDesc(Windows.Win32.System.Com.ITypeInfo.Interface,System.UInt32,Windows.Win32.System.Com.VARDESC*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.Interface.GetVarDesc(System.UInt32,Windows.Win32.System.Com.VARDESC**)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeInfo_Extensions.GetNames(Windows.Win32.System.Com.ITypeInfo.Interface,System.Int32,Windows.Win32.Foundation.BSTR*,System.UInt32,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.Interface.GetNames(System.Int32,Windows.Win32.Foundation.BSTR*,System.UInt32,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeInfo_Extensions.GetRefTypeOfImplType(Windows.Win32.System.Com.ITypeInfo.Interface,System.UInt32,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.Interface.GetRefTypeOfImplType(System.UInt32,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeInfo_Extensions.GetImplTypeFlags(Windows.Win32.System.Com.ITypeInfo.Interface,System.UInt32,Windows.Win32.System.Com.IMPLTYPEFLAGS@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.Interface.GetImplTypeFlags(System.UInt32,Windows.Win32.System.Com.IMPLTYPEFLAGS*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeInfo_Extensions.GetIDsOfNames(Windows.Win32.System.Com.ITypeInfo.Interface,System.Span{Windows.Win32.Foundation.PWSTR},System.Span{System.Int32})">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.Interface.GetIDsOfNames(Windows.Win32.Foundation.PWSTR*,System.UInt32,System.Int32*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeInfo_Extensions.Invoke(Windows.Win32.System.Com.ITypeInfo.Interface,System.Void*,System.Int32,Windows.Win32.System.Com.DISPATCH_FLAGS,Windows.Win32.System.Com.DISPPARAMS@,Windows.Win32.System.Variant.VARIANT@,Windows.Win32.System.Com.EXCEPINFO@,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.Interface.Invoke(System.Void*,System.Int32,Windows.Win32.System.Com.DISPATCH_FLAGS,Windows.Win32.System.Com.DISPPARAMS*,Windows.Win32.System.Variant.VARIANT*,Windows.Win32.System.Com.EXCEPINFO*,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeInfo_Extensions.GetDocumentation(Windows.Win32.System.Com.ITypeInfo.Interface,System.Int32,Windows.Win32.Foundation.BSTR*,Windows.Win32.Foundation.BSTR*,System.UInt32@,Windows.Win32.Foundation.BSTR*)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.Interface.GetDocumentation(System.Int32,Windows.Win32.Foundation.BSTR*,Windows.Win32.Foundation.BSTR*,System.UInt32*,Windows.Win32.Foundation.BSTR*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeInfo_Extensions.GetDllEntry(Windows.Win32.System.Com.ITypeInfo.Interface,System.Int32,Windows.Win32.System.Com.INVOKEKIND,Windows.Win32.Foundation.BSTR*,Windows.Win32.Foundation.BSTR*,System.UInt16@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.Interface.GetDllEntry(System.Int32,Windows.Win32.System.Com.INVOKEKIND,Windows.Win32.Foundation.BSTR*,Windows.Win32.Foundation.BSTR*,System.UInt16*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeInfo_Extensions.AddressOfMember(Windows.Win32.System.Com.ITypeInfo.Interface,System.Int32,Windows.Win32.System.Com.INVOKEKIND,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.Interface.AddressOfMember(System.Int32,Windows.Win32.System.Com.INVOKEKIND,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeInfo_Extensions.CreateInstance(Windows.Win32.System.Com.ITypeInfo.Interface,Windows.Win32.System.Com.IUnknown*,System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.Interface.CreateInstance(Windows.Win32.System.Com.IUnknown*,System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeInfo_Extensions.GetContainingTypeLib(Windows.Win32.System.Com.ITypeInfo.Interface,Windows.Win32.System.Com.ITypeLib**,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.Interface.GetContainingTypeLib(Windows.Win32.System.Com.ITypeLib**,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeInfo_Extensions.ReleaseTypeAttr(Windows.Win32.System.Com.ITypeInfo.Interface,Windows.Win32.System.Com.TYPEATTR@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.Interface.ReleaseTypeAttr(Windows.Win32.System.Com.TYPEATTR*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeInfo_Extensions.ReleaseFuncDesc(Windows.Win32.System.Com.ITypeInfo.Interface,Windows.Win32.System.Com.FUNCDESC@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.Interface.ReleaseFuncDesc(Windows.Win32.System.Com.FUNCDESC*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeInfo_Extensions.ReleaseVarDesc(Windows.Win32.System.Com.ITypeInfo.Interface,Windows.Win32.System.Com.VARDESC@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeInfo.Interface.ReleaseVarDesc(Windows.Win32.System.Com.VARDESC*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeLib_Extensions.GetTypeInfoType(Windows.Win32.System.Com.ITypeLib.Interface,System.UInt32,Windows.Win32.System.Com.TYPEKIND@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeLib.Interface.GetTypeInfoType(System.UInt32,Windows.Win32.System.Com.TYPEKIND*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeLib_Extensions.GetTypeInfoOfGuid(Windows.Win32.System.Com.ITypeLib.Interface,System.Guid@,Windows.Win32.System.Com.ITypeInfo**)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeLib.Interface.GetTypeInfoOfGuid(System.Guid*,Windows.Win32.System.Com.ITypeInfo**)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeLib_Extensions.GetLibAttr(Windows.Win32.System.Com.ITypeLib.Interface,Windows.Win32.System.Com.TLIBATTR*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeLib.Interface.GetLibAttr(Windows.Win32.System.Com.TLIBATTR**)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeLib_Extensions.GetDocumentation(Windows.Win32.System.Com.ITypeLib.Interface,System.Int32,Windows.Win32.Foundation.BSTR*,Windows.Win32.Foundation.BSTR*,System.UInt32@,Windows.Win32.Foundation.BSTR*)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeLib.Interface.GetDocumentation(System.Int32,Windows.Win32.Foundation.BSTR*,Windows.Win32.Foundation.BSTR*,System.UInt32*,Windows.Win32.Foundation.BSTR*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeLib_Extensions.IsName(Windows.Win32.System.Com.ITypeLib.Interface,System.Span{System.Char}@,System.UInt32,Windows.Win32.Foundation.BOOL@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeLib.Interface.IsName(Windows.Win32.Foundation.PWSTR,System.UInt32,Windows.Win32.Foundation.BOOL*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeLib_Extensions.FindName(Windows.Win32.System.Com.ITypeLib.Interface,System.Span{System.Char}@,System.UInt32,Windows.Win32.System.Com.ITypeInfo**,System.Int32*,System.UInt16@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeLib.Interface.FindName(Windows.Win32.Foundation.PWSTR,System.UInt32,Windows.Win32.System.Com.ITypeInfo**,System.Int32*,System.UInt16*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_ITypeLib_Extensions.ReleaseTLibAttr(Windows.Win32.System.Com.ITypeLib.Interface,Windows.Win32.System.Com.TLIBATTR@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ITypeLib.Interface.ReleaseTLibAttr(Windows.Win32.System.Com.TLIBATTR*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_StructuredStorage_IEnumSTATSTG_Extensions.Next(Windows.Win32.System.Com.StructuredStorage.IEnumSTATSTG.Interface,System.Span{Windows.Win32.System.Com.STATSTG},System.UInt32*)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IEnumSTATSTG.Interface.Next(System.UInt32,Windows.Win32.System.Com.STATSTG*,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_StructuredStorage_IStorage_Extensions.CreateStream(Windows.Win32.System.Com.StructuredStorage.IStorage.Interface,System.String,Windows.Win32.System.Com.STGM,System.UInt32,System.UInt32,Windows.Win32.System.Com.IStream**)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.Interface.CreateStream(Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Com.STGM,System.UInt32,System.UInt32,Windows.Win32.System.Com.IStream**)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_StructuredStorage_IStorage_Extensions.OpenStream(Windows.Win32.System.Com.StructuredStorage.IStorage.Interface,System.String,Windows.Win32.System.Com.STGM,System.UInt32,Windows.Win32.System.Com.IStream**)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.Interface.OpenStream(Windows.Win32.Foundation.PCWSTR,System.Void*,Windows.Win32.System.Com.STGM,System.UInt32,Windows.Win32.System.Com.IStream**)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_StructuredStorage_IStorage_Extensions.CreateStorage(Windows.Win32.System.Com.StructuredStorage.IStorage.Interface,System.String,Windows.Win32.System.Com.STGM,System.UInt32,System.UInt32,Windows.Win32.System.Com.StructuredStorage.IStorage**)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.Interface.CreateStorage(Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Com.STGM,System.UInt32,System.UInt32,Windows.Win32.System.Com.StructuredStorage.IStorage**)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_StructuredStorage_IStorage_Extensions.OpenStorage(Windows.Win32.System.Com.StructuredStorage.IStorage.Interface,System.String,Windows.Win32.System.Com.StructuredStorage.IStorage*,Windows.Win32.System.Com.STGM,System.UInt16*@,System.UInt32,Windows.Win32.System.Com.StructuredStorage.IStorage**)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.Interface.OpenStorage(Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Com.StructuredStorage.IStorage*,Windows.Win32.System.Com.STGM,System.UInt16**,System.UInt32,Windows.Win32.System.Com.StructuredStorage.IStorage**)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_StructuredStorage_IStorage_Extensions.CopyTo(Windows.Win32.System.Com.StructuredStorage.IStorage.Interface,System.ReadOnlySpan{System.Guid},System.UInt16**,Windows.Win32.System.Com.StructuredStorage.IStorage*)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.Interface.CopyTo(System.UInt32,System.Guid*,System.UInt16**,Windows.Win32.System.Com.StructuredStorage.IStorage*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_StructuredStorage_IStorage_Extensions.MoveElementTo(Windows.Win32.System.Com.StructuredStorage.IStorage.Interface,System.String,Windows.Win32.System.Com.StructuredStorage.IStorage*,System.String,System.UInt32)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.Interface.MoveElementTo(Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Com.StructuredStorage.IStorage*,Windows.Win32.Foundation.PCWSTR,System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_StructuredStorage_IStorage_Extensions.EnumElements(Windows.Win32.System.Com.StructuredStorage.IStorage.Interface,Windows.Win32.System.Com.StructuredStorage.IEnumSTATSTG**)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.Interface.EnumElements(System.UInt32,System.Void*,System.UInt32,Windows.Win32.System.Com.StructuredStorage.IEnumSTATSTG**)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_StructuredStorage_IStorage_Extensions.DestroyElement(Windows.Win32.System.Com.StructuredStorage.IStorage.Interface,System.String)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.Interface.DestroyElement(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_StructuredStorage_IStorage_Extensions.RenameElement(Windows.Win32.System.Com.StructuredStorage.IStorage.Interface,System.String,System.String)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.Interface.RenameElement(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_StructuredStorage_IStorage_Extensions.SetElementTimes(Windows.Win32.System.Com.StructuredStorage.IStorage.Interface,System.String,System.Runtime.InteropServices.ComTypes.FILETIME@,System.Runtime.InteropServices.ComTypes.FILETIME@,System.Runtime.InteropServices.ComTypes.FILETIME@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.Interface.SetElementTimes(Windows.Win32.Foundation.PCWSTR,System.Runtime.InteropServices.ComTypes.FILETIME*,System.Runtime.InteropServices.ComTypes.FILETIME*,System.Runtime.InteropServices.ComTypes.FILETIME*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_StructuredStorage_IStorage_Extensions.SetClass(Windows.Win32.System.Com.StructuredStorage.IStorage.Interface,System.Guid@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.Interface.SetClass(System.Guid*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_StructuredStorage_IStorage_Extensions.Stat(Windows.Win32.System.Com.StructuredStorage.IStorage.Interface,Windows.Win32.System.Com.STATSTG@,System.UInt32)">
            <inheritdoc cref="M:Windows.Win32.System.Com.StructuredStorage.IStorage.Interface.Stat(Windows.Win32.System.Com.STATSTG*,System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.System_Ole_IPicture_Extensions.get_Handle(Windows.Win32.System.Ole.IPicture.Interface,Windows.Win32.System.Ole.OLE_HANDLE@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPicture.Interface.get_Handle(Windows.Win32.System.Ole.OLE_HANDLE*)"/>
        </member>
        <member name="M:Windows.Win32.System_Ole_IPicture_Extensions.get_hPal(Windows.Win32.System.Ole.IPicture.Interface,Windows.Win32.System.Ole.OLE_HANDLE@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPicture.Interface.get_hPal(Windows.Win32.System.Ole.OLE_HANDLE*)"/>
        </member>
        <member name="M:Windows.Win32.System_Ole_IPicture_Extensions.get_Type(Windows.Win32.System.Ole.IPicture.Interface,Windows.Win32.System.Ole.PICTYPE@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPicture.Interface.get_Type(Windows.Win32.System.Ole.PICTYPE*)"/>
        </member>
        <member name="M:Windows.Win32.System_Ole_IPicture_Extensions.get_Width(Windows.Win32.System.Ole.IPicture.Interface,System.Int32@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPicture.Interface.get_Width(System.Int32*)"/>
        </member>
        <member name="M:Windows.Win32.System_Ole_IPicture_Extensions.get_Height(Windows.Win32.System.Ole.IPicture.Interface,System.Int32@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPicture.Interface.get_Height(System.Int32*)"/>
        </member>
        <member name="M:Windows.Win32.System_Ole_IPicture_Extensions.Render(Windows.Win32.System.Ole.IPicture.Interface,Windows.Win32.Graphics.Gdi.HDC,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Windows.Win32.Foundation.RECT@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPicture.Interface.Render(Windows.Win32.Graphics.Gdi.HDC,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Windows.Win32.Foundation.RECT*)"/>
        </member>
        <member name="M:Windows.Win32.System_Ole_IPicture_Extensions.get_CurDC(Windows.Win32.System.Ole.IPicture.Interface,Windows.Win32.Graphics.Gdi.HDC@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPicture.Interface.get_CurDC(Windows.Win32.Graphics.Gdi.HDC*)"/>
        </member>
        <member name="M:Windows.Win32.System_Ole_IPicture_Extensions.SelectPicture(Windows.Win32.System.Ole.IPicture.Interface,Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Graphics.Gdi.HDC@,Windows.Win32.System.Ole.OLE_HANDLE@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPicture.Interface.SelectPicture(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Graphics.Gdi.HDC*,Windows.Win32.System.Ole.OLE_HANDLE*)"/>
        </member>
        <member name="M:Windows.Win32.System_Ole_IPicture_Extensions.get_KeepOriginalFormat(Windows.Win32.System.Ole.IPicture.Interface,Windows.Win32.Foundation.BOOL@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPicture.Interface.get_KeepOriginalFormat(Windows.Win32.Foundation.BOOL*)"/>
        </member>
        <member name="M:Windows.Win32.System_Ole_IPicture_Extensions.SaveAsFile(Windows.Win32.System.Ole.IPicture.Interface,Windows.Win32.System.Com.IStream*,Windows.Win32.Foundation.BOOL,System.Int32@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPicture.Interface.SaveAsFile(Windows.Win32.System.Com.IStream*,Windows.Win32.Foundation.BOOL,System.Int32*)"/>
        </member>
        <member name="M:Windows.Win32.System_Ole_IPicture_Extensions.get_Attributes(Windows.Win32.System.Ole.IPicture.Interface,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IPicture.Interface.get_Attributes(System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System_Ole_IRecordInfo_Extensions.GetGuid(Windows.Win32.System.Ole.IRecordInfo.Interface,System.Guid@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IRecordInfo.Interface.GetGuid(System.Guid*)"/>
        </member>
        <member name="M:Windows.Win32.System_Ole_IRecordInfo_Extensions.GetSize(Windows.Win32.System.Ole.IRecordInfo.Interface,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IRecordInfo.Interface.GetSize(System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System_Ole_IRecordInfo_Extensions.GetField(Windows.Win32.System.Ole.IRecordInfo.Interface,System.Void*,System.String,Windows.Win32.System.Variant.VARIANT@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IRecordInfo.Interface.GetField(System.Void*,Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Variant.VARIANT*)"/>
        </member>
        <member name="M:Windows.Win32.System_Ole_IRecordInfo_Extensions.GetFieldNoCopy(Windows.Win32.System.Ole.IRecordInfo.Interface,System.Void*,System.String,Windows.Win32.System.Variant.VARIANT@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IRecordInfo.Interface.GetFieldNoCopy(System.Void*,Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Variant.VARIANT*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System_Ole_IRecordInfo_Extensions.PutField(Windows.Win32.System.Ole.IRecordInfo.Interface,System.UInt32,System.Void*,System.String,Windows.Win32.System.Variant.VARIANT@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IRecordInfo.Interface.PutField(System.UInt32,System.Void*,Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Variant.VARIANT*)"/>
        </member>
        <member name="M:Windows.Win32.System_Ole_IRecordInfo_Extensions.PutFieldNoCopy(Windows.Win32.System.Ole.IRecordInfo.Interface,System.UInt32,System.Void*,System.String,Windows.Win32.System.Variant.VARIANT@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IRecordInfo.Interface.PutFieldNoCopy(System.UInt32,System.Void*,Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Variant.VARIANT*)"/>
        </member>
        <member name="M:Windows.Win32.System_Ole_IRecordInfo_Extensions.GetFieldNames(Windows.Win32.System.Ole.IRecordInfo.Interface,System.UInt32@,Windows.Win32.Foundation.BSTR*)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IRecordInfo.Interface.GetFieldNames(System.UInt32*,Windows.Win32.Foundation.BSTR*)"/>
        </member>
        <member name="M:Windows.Win32.System_Ole_IRecordInfo_Extensions.RecordCreateCopy(Windows.Win32.System.Ole.IRecordInfo.Interface,System.Void*,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Ole.IRecordInfo.Interface.RecordCreateCopy(System.Void*,System.Void**)"/>
        </member>
        <member name="T:WinFormsComStrategy">
            <summary>
             Windows Forms <see cref="T:System.Runtime.InteropServices.Marshalling.StrategyBasedComWrappers"/> implementation.
            </summary>
            <remarks>
             <para>
              Deriving from <see cref="T:System.Runtime.InteropServices.Marshalling.StrategyBasedComWrappers"/> allows us to leverage the functionality the runtime
              has implemented for source generated "RCW"s, including support for <see cref="T:System.Runtime.InteropServices.ComImportAttribute"/> adaption
              when built-in COM support is available (EnableGeneratedComInterfaceComImportInterop).
             </para>
             <para>
              It isn't immediately clear how we could merge <see cref="T:WinFormsComWrappers"/> with this as there is no
              strategy for <see cref="M:System.Runtime.InteropServices.ComWrappers.ComputeVtables(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags,System.Int32@)"/>. We rely
              on <see cref="T:Windows.Win32.System.Com.IManagedWrapper"/> to apply the needed vtable functionality and it doesn't appear that we
              can apply <see cref="T:System.Runtime.InteropServices.Marshalling.IComExposedDetails"/> without manually implementing (or source generating)
              <see cref="M:System.Runtime.InteropServices.Marshalling.IComExposedDetails.GetComInterfaceEntries(System.Int32@)"/> on our exposed classes.
             </para>
            </remarks>
        </member>
        <member name="T:WinFormsComWrappers">
            <summary>
             The <see cref="T:System.Runtime.InteropServices.ComWrappers"/> implementation for WinForm's COM interop usages.
            </summary>
        </member>
        <member name="M:WinFormsComWrappers.UnwrapAndInvoke``2(``0*,System.Func{``1,Windows.Win32.Foundation.HRESULT})">
            <summary>
             For the given <paramref name="this"/> pointer unwrap the associated managed object and use it to
             invoke <paramref name="func"/>.
            </summary>
            <remarks>
             <para>
              Handles exceptions and converts to <see cref="T:Windows.Win32.Foundation.HRESULT"/>.
             </para>
            </remarks>
        </member>
        <member name="M:WinFormsComWrappers.UnwrapAndInvoke``2(``0*,System.Action{``1})">
            <summary>
             For the given <paramref name="this"/> pointer unwrap the associated managed object and use it to
             invoke <paramref name="action"/>.
            </summary>
            <inheritdoc cref="M:WinFormsComWrappers.UnwrapAndInvoke``2(``0*,System.Func{``1,Windows.Win32.Foundation.HRESULT})"/>
        </member>
    </members>
</doc>
